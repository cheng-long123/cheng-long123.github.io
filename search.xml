<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue基础(二)</title>
      <link href="/bubble/2020/09/14/vuejs2/"/>
      <url>/bubble/2020/09/14/vuejs2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\bubble\css\APlayer.min.css"><script src="\bubble\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\bubble\js\Meting.min.js"></script><h2 id="VUE基础（二）"><a href="#VUE基础（二）" class="headerlink" title="VUE基础（二）"></a>VUE基础（二）</h2><h3 id="03-vue基础-计算属性"><a href="#03-vue基础-计算属性" class="headerlink" title="03-vue基础-计算属性"></a>03-vue基础-计算属性</h3><blockquote><p>问题：模板内处理数据，如果逻辑较为复杂，对应的js表达式也会复杂，模板内的业务逻辑繁重，可维护性差</p></blockquote><p>通过<strong>计算属性</strong>，来处理这些复杂逻辑，降级模板的复杂度，提供模板的可维护性。</p><p>使用场景：</p><ul><li>依赖data中的数据，但是需要经过复杂逻辑处理，才能得到你想要的数据。</li><li>此时你可以使用计算属性，复杂逻辑在声明计算属性时候进行，模板内使用数据即可。</li></ul><p>处理前：模板内逻辑复杂</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 此处逻辑复杂 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;msg.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      msg: <span class="string">&#x27;hi vue&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>处理后：模板内逻辑清晰  （使用 computed 配置选项）</p><ul><li>computed 是vue的配置选项</li><li>指向的一个对象，对象可声明多个计算属性</li><li>属性名称（计算属性的名称）</li><li>属性的值（计算属性的素材函数）<ul><li>对需要依赖的数据，进行逻辑上的处理</li><li>处理完毕后，需要return出去，返回的值就是计算属性的值</li></ul></li><li>在模板中使用计算属性，和使用data的方式是一样的。<ul><li>虽然在计算属性中声明的是函数，但是在模板中使用，当中数据来使用，不需要加括号。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 逻辑复杂 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;msg.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 计算属性 和data类似--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;reverseMsg&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      msg: <span class="string">&#x27;hi vue&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 声明计算属性</span></span></span><br><span class="line">    computed: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">//属性名字（计算属性名称）</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//属性的值（计算属性处理函数）</span></span></span><br><span class="line">      reverseMsg () &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// 对依赖的数据进行处理，且进行return</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.msg.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>当你依赖data中的数据，要经过较为复杂的逻辑处理，才能得到你想要的数据，此时可以使用计算属性。</li></ul><h3 id="04-computed和methods区别"><a href="#04-computed和methods区别" class="headerlink" title="04-computed和methods区别"></a>04-computed和methods区别</h3><p>methods定义函数，如果在模板中使用，每使用一次，就相当于调用了一次，处理逻辑会重新执行。</p><p>computed定义计算属性，如果在模板中使用，使用多次，但是如果依赖的数据不发生改变，计算属性对应的函数不会重新执行。</p><ul><li>计算属性会做缓存，提高渲染的性能。</li><li>当依赖data中的数据，发生变化的时候，计算属性也会对应发生改变。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 逻辑复杂 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;msg.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用函数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;reverseStr()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;reverseStr()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;reverseStr()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 计算属性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;reverseMsg&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;reverseMsg&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;reverseMsg&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 数据  函数  计算属性，最终通过vue实例去使用，它们不能重复定义。</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      msg: <span class="string">&#x27;hi vue&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 函数</span></span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      reverseStr () &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;methods&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.msg.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 计算属性</span></span></span><br><span class="line">    computed: &#123;</span><br><span class="line">      reverseMsg () &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;computed&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.msg.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>计算属性有缓存，提高渲染性能。</li><li>当依赖数据发生变化，计算属性也会发生改变。</li></ul><h3 id="05-案例-完善其他功能"><a href="#05-案例-完善其他功能" class="headerlink" title="05-案例-完善其他功能"></a>05-案例-完善其他功能</h3><p>扩展功能</p><ul><li>日期格式处理 （过滤器）</li><li>搜索框指自动获取焦点 （自定义指令）</li><li>根据输入的内容筛选符合条件的品牌（计算属性）</li></ul><p>第一个功能：日期格式处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 过滤器 filter</span></span><br><span class="line">Vue.filter(<span class="string">&#x27;formatTime&#x27;</span>,<span class="function">(<span class="params">val</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// val 是使用当前过滤器的管道符前的js表达式的执行结果</span></span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(val)</span><br><span class="line">  <span class="comment">// 得到字符串格式的日期：2020-07-09 18:00:00</span></span><br><span class="line">  <span class="keyword">const</span> y = <span class="built_in">String</span>(date.getFullYear())</span><br><span class="line">  <span class="keyword">const</span> m = <span class="built_in">String</span>(date.getMonth() + <span class="number">1</span>).padStart(<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> d = <span class="built_in">String</span>(date.getDate()).padStart(<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> hh = <span class="built_in">String</span>(date.getHours()).padStart(<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> mm = <span class="built_in">String</span>(date.getMinutes()).padStart(<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> ss = <span class="built_in">String</span>(date.getSeconds()).padStart(<span class="number">2</span>,<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.createTime|formatTime&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二个功能：自动获取焦点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义指令 directive</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 使用该指令的元素创建完毕后执行</span></span><br><span class="line">  inserted (el) &#123;</span><br><span class="line">    <span class="comment">// el 是使用该指令的dom元素</span></span><br><span class="line">    <span class="comment">// el.click() 触发点击事件 el.foucs() 触发获取焦点事件  自然获取了焦点</span></span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 搜索 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-inline&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding: 20px 0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-focus</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入关键字进行搜索&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第三个功能：根据输入的内容，去data中list数组进行查找，得到一个新的数组，再渲染新数组即可。</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/N9cYy9B/1586746243895.png" alt="1586746243895"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  newList () &#123;</span><br><span class="line">    <span class="comment">// 筛选后的数组</span></span><br><span class="line">    <span class="comment">// 筛选逻辑：根据key去每条数据中查询，符合条件的数据，放到新数组中，最后return</span></span><br><span class="line">    <span class="comment">// const arr = []</span></span><br><span class="line">    <span class="comment">// this.list.forEach(item=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//   if (item.brandName.includes(this.key)) &#123;</span></span><br><span class="line">    <span class="comment">//     arr.push(item)</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="comment">// return arr</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list.filter(<span class="function"><span class="params">item</span>=&gt;</span>item.brandName.includes(<span class="built_in">this</span>.key))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-&lt;tr v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;</span></span><br><span class="line"><span class="addition">+&lt;tr v-for=&quot;item in newList&quot; :key=&quot;item.id&quot;&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-&lt;tr v-if=&quot;list.length===0&quot;&gt;</span></span><br><span class="line"><span class="addition">+&lt;tr v-if=&quot;newList.length===0&quot;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="06-工具-json-server"><a href="#06-工具-json-server" class="headerlink" title="06-工具-json-server"></a>06-工具-json-server</h3><ul><li>快速创建接口的工具，模拟接口的工具。</li><li>正常项目分工：后台提供接口服务，前端调用接口，实现前端业务逻辑。</li><li>前后端分离<ul><li>两种分离模式：<ul><li>代码上的分离（前后端是同一个项目，开发目录上的区分）</li><li>项目级的分离（前端是一个单独的项目，后台是一个单独的项目）</li></ul></li><li>我们的理解：必须后台先提供接口，前端才能进行开发。</li><li>分离的意义：前后端可以并行开发。</li></ul></li></ul><p>json-server意义：模拟接口，推进前端开发进程。例外有一个工具：mock.js 模拟接口。</p><p>具体的使用步骤：</p><ol><li>是一个基于nodejs命令行工具</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i json-server -g</span><br></pre></td></tr></table></figure><ol start="2"><li>准备一个空文件夹，任何目录都行</li></ol><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/82Dmxmj/1586748855799.png" alt="1586748855799"></p><ol start="3"><li>在文件夹中新建一个json文件，名称是英文。</li></ol><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/x3g3t1h/1586748923154.png" alt="1586748923154"></p><ol start="4"><li>在json文件中，定义一个对象，对象中会有  属性名 –&gt; 属性值<ol><li>属性名  接口的地址</li><li>属性值  接口返回数据 （数组|对象）</li></ol></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;brands&quot;</span>: [</span><br><span class="line">    &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">1</span>, <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;宝马&quot;</span>, <span class="attr">&quot;time&quot;</span>: <span class="string">&quot;2019-10-10 10:10:46&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">2</span>, <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;奥迪&quot;</span>, <span class="attr">&quot;time&quot;</span>: <span class="string">&quot;2019-12-10 10:10:46&quot;</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>启动接口服务，在文件夹下，打开命令行窗口</li></ol><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/K0wSLqt/1586749263939.png" alt="1586749263939"></p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/g9cpDSR/1586749295020.png" alt="1586749295020"></p><ol start="6"><li>测试，在浏览器访问上面地址</li></ol><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/ctqJr64/1586749367545.png" alt="1586749367545"></p><p>总结：注意下json格式。</p><h3 id="07-规则-RESTful"><a href="#07-规则-RESTful" class="headerlink" title="07-规则-RESTful"></a>07-规则-RESTful</h3><p>在后台实现接口的时候，不能杂乱无章，是有规范的，restful就是一套接口定义规范。</p><table><thead><tr><th>接口地址</th><th>请求方式</th><th>操作类型</th></tr></thead><tbody><tr><td>/brands</td><td>GET</td><td>获取全部数据</td></tr><tr><td>/brands/1</td><td>GET</td><td>获取单个数据</td></tr><tr><td>/brands</td><td>POST</td><td>添加操作 {name,time}</td></tr><tr><td>/brands/1</td><td>DELETE</td><td>删除操作</td></tr><tr><td>/brands/1</td><td>PUT</td><td>完整修改{name,time}</td></tr><tr><td>/brands/1</td><td>PATCH</td><td>局部修改{name}</td></tr></tbody></table><p>以上接口规则，就是restful规则。json-server提供的就是符合restful规则的接口。</p><h3 id="08-工具-postman"><a href="#08-工具-postman" class="headerlink" title="08-工具-postman"></a>08-工具-postman</h3><p>获取全部数据</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/SDgd4p8/1586758274762.png" alt="1586758274762"></p><p>获取单个数据</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/VN2HWfm/1586758314197.png" alt="1586758314197"></p><p>添加操作</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/HTS8LfD/1586758595216.png" alt="1586758595216"></p><p>删除操作</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/TrV2dHd/1586758694685.png" alt="1586758694685"></p><p>完整修改</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/fG94qvc/1586758856845.png" alt="1586758856845"></p><p>局部修改</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/KWFN90B/1586758947808.png" alt="1586758947808"></p><p>根据条件查询数据：</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/cTSgZNP/1586759194853.png" alt="1586759194853"></p><h3 id="09-插件-axios-js"><a href="#09-插件-axios-js" class="headerlink" title="09-插件-axios.js"></a>09-插件-axios.js</h3><ul><li>axios是一个js插件，如果在浏览器中使用，基于xhr和promise的一款插件。</li><li>它也可以在nodejs使用，基于 http模块和promise 的一个js包。</li><li>axios提交数据的时候，默认的数据类型（content-type）是 application/json</li></ul><p>下载地址：<a href="https://unpkg.com/axios/dist/axios.min.js">https://unpkg.com/axios/dist/axios.min.js</a></p><p>查询：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 查询</span></span><br><span class="line"><span class="comment">// 所有</span></span><br><span class="line"><span class="comment">// axios.get(&#x27;http://localhost:3000/brands&#x27;).then(res=&gt;&#123;</span></span><br><span class="line"><span class="comment">//   // res是响应对象  // res.data是后台响应内容（数据）</span></span><br><span class="line"><span class="comment">//   console.log(res.data)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// // 单个</span></span><br><span class="line"><span class="comment">// axios.get(&#x27;http://localhost:3000/brands/2&#x27;).then(res=&gt;&#123;</span></span><br><span class="line"><span class="comment">//   // res是响应对象  // res.data是后台响应内容（数据）</span></span><br><span class="line"><span class="comment">//   console.log(res.data)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// 筛选条件查询</span></span><br><span class="line"><span class="comment">// 方式1：自己手动在地址栏?后进行拼接</span></span><br><span class="line"><span class="comment">// 方式2：针对get传参，?后键值对传参，固定传参方式 &#123;params:&#123;//传参对象 &#125;&#125;</span></span><br><span class="line">axios.get(<span class="string">&#x27;http://localhost:3000/brands&#x27;</span>,&#123;<span class="attr">params</span>:&#123;<span class="attr">name_like</span>:<span class="string">&#x27;奥&#x27;</span>&#125;&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// res是响应对象  // res.data是后台响应内容（数据）</span></span><br><span class="line">  <span class="built_in">console</span>.log(res.data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>添加：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 添加</span></span><br><span class="line"><span class="comment">// 除去get请求外，函数的第二个参数都是请求体传参，是对象类型。</span></span><br><span class="line">axios.post(<span class="string">&#x27;http://localhost:3000/brands&#x27;</span>,&#123;<span class="attr">name</span>:<span class="string">&quot;宝马&quot;</span>,<span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>删除：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 删除</span></span><br><span class="line">axios.delete(<span class="string">&#x27;http://localhost:3000/brands/2&#x27;</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4. 修改 完整</span></span><br><span class="line"><span class="comment">// axios.put(&#x27;http://localhost:3000/brands/3&#x27;,&#123;name:&quot;长安奔奔&quot;,time: new Date()&#125;).then(res=&gt;&#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;成功&#x27;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// 5. 修改 局部</span></span><br><span class="line">axios.patch(<span class="string">&#x27;http://localhost:3000/brands/3&#x27;</span>,&#123;<span class="attr">name</span>:<span class="string">&quot;奔奔&quot;</span>&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>axios的完整写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完整写法</span></span><br><span class="line">    axios(&#123;</span><br><span class="line">      <span class="comment">// 请求方式 get|post|put|patch|delete  大小写不区分</span></span><br><span class="line">      method: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">      <span class="comment">// 路径上传参在url后进行拼接</span></span><br><span class="line">      url: <span class="string">&#x27;http://localhost:3000/brands/1&#x27;</span>,</span><br><span class="line">      <span class="comment">// ?后键值对传参</span></span><br><span class="line">      params: &#123;&#125;,</span><br><span class="line">      <span class="comment">// 请求体传参</span></span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      <span class="comment">// 请求头传参</span></span><br><span class="line">      headers: &#123;&#125;</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;失败&#x27;</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>总结：不同方式的参数怎么传递给后台。</p><h3 id="10-案例-接口版-渲染列表"><a href="#10-案例-接口版-渲染列表" class="headerlink" title="10-案例-接口版-渲染列表"></a>10-案例-接口版-渲染列表</h3><p>静态页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 搜索 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-inline&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding: 20px 0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入关键字进行搜索&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 表格 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered table-hover&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>品牌名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>创建时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 添加品牌 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-inline&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;品牌名称&quot;</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>添加品牌<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现渲染列表，大致步骤：</p><ul><li>先声明一个列表数据，在data当中数据，字段名字：list</li><li>发请求向后台拿数据，给list赋值即可，数据驱动视图<ul><li>以前：window.onload = function(){}  默认渲染，页面加载完成之后</li><li>或者：$(function(){}) 默认渲染，页面文章加载完成之后</li><li>在vue中，需要默认渲染，vue实例初始化完毕后，发请求获取数据进行渲染。<ul><li>vue提供一个配置选项<code>created </code>类型是函数，实例化后执行的函数。</li></ul></li></ul></li><li>在模板当中根据list和数据中的字符段进行渲染，注意处理无数据的情况。</li></ul><p>总结：一般在created函数中获取页面需要的初始化数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 品牌列表数据</span></span></span><br><span class="line">      list: []</span><br><span class="line">    &#125;,</span><br><span class="line">    created () &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// vue实例后执行（回调函数，钩子函数），在某个时机会被调用的函数。</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.getBrands()</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 获取列表数据</span></span></span><br><span class="line">      getBrands () &#123;</span><br><span class="line"><span class="javascript">        axios.get(<span class="string">&#x27;http://localhost:3000/brands&#x27;</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// res.data 就是后的想要数据，品牌列表</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.list = res.data</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.time&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-if</span>=<span class="string">&quot;list.length===0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>暂无数据<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-案例-接口版-删除品牌"><a href="#11-案例-接口版-删除品牌" class="headerlink" title="11-案例-接口版-删除品牌"></a>11-案例-接口版-删除品牌</h3><p>实现删除品牌大致步骤：</p><ol><li>绑定点击事件，a按钮，注意默认行为阻止</li><li>指定处理函数，给函数传入品牌ID</li><li>在函数中，弹出确认框提示</li><li>点击确认框之后，发删除请求</li><li>如果成功之后，更新列表（移除删除的行）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;delBrand(item.id)&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除品牌函数</span></span><br><span class="line">delBrand (id) &#123;</span><br><span class="line">  <span class="comment">// 确认框</span></span><br><span class="line">  <span class="keyword">if</span> (confirm(<span class="string">&#x27;您确认删除该品牌吗？&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// 发请求</span></span><br><span class="line">    axios.delete(<span class="string">`http://localhost:3000/brands/<span class="subst">$&#123;id&#125;</span>`</span>).then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">// 成功了</span></span><br><span class="line">      <span class="comment">// 更新列表</span></span><br><span class="line">      <span class="built_in">this</span>.getBrands()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-案例-接口版-添加品牌"><a href="#12-案例-接口版-添加品牌" class="headerlink" title="12-案例-接口版-添加品牌"></a>12-案例-接口版-添加品牌</h3><p>实现添加品牌大致步骤：</p><ol><li>双向数据绑定，输入品牌的表单元素</li><li>绑定表单的提交事件，阻止默认行为</li><li>在methods中定义一个事件函数</li><li>在函数中，组织需要提交给后台的数据，{name,time}，id后台不需要，自动自增。<ol><li>组织数据前，对name进行校验</li></ol></li><li>发起添加请求，如果成功，重新获取后台列表数据即可。</li><li>之前输入的内容清空</li></ol><p>在案例中落地的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加品牌 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;addBrand()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-inline&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;brandName&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;品牌名称&quot;</span>&gt;</span></span><br><span class="line">  <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>添加品牌<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">      data: &#123;</span><br><span class="line">        // 品牌列表数据</span><br><span class="line">        list: [],</span><br><span class="line">        // 名称</span><br><span class="line"><span class="addition">+        brandName: &#x27;&#x27;</span></span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加品牌函数</span></span><br><span class="line">addBrand () &#123;</span><br><span class="line">  <span class="comment">// 校验</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>.brandName.trim()) &#123;</span><br><span class="line">    <span class="keyword">return</span> alert(<span class="string">&#x27;请输入品牌名称&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 数据(字段名称需要和后台接口需要的字段名称保持一致)</span></span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    name: <span class="built_in">this</span>.brandName,</span><br><span class="line">    time: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 请求</span></span><br><span class="line">  axios.post(<span class="string">&#x27;http://localhost:3000/brands&#x27;</span>,data).then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 成功</span></span><br><span class="line">    <span class="built_in">this</span>.getBrands()</span><br><span class="line">    <span class="comment">// 清空</span></span><br><span class="line">    <span class="built_in">this</span>.brandName = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-案例-接口版-搜索品牌"><a href="#13-案例-接口版-搜索品牌" class="headerlink" title="13-案例-接口版-搜索品牌"></a>13-案例-接口版-搜索品牌</h3><p>实现搜索品牌大致步骤：</p><ol><li>双向绑定 搜索框 这样可以获取到输入的关键字（key）数据。</li><li>实时进行搜索，筛选出列表需要的数据。<ol><li>以前：使用计算属性，此时你依赖的data中的（list数据，key数据）,依赖前端数据即可。</li><li>现在：监听到输入内容的改变，根据输入的内容向后台发请求（有异步操作），响应成功后才可拿到列表数据。</li><li>监听key数据的变化，vue提供了侦听器，可以监听任何数据（this能够访问的数据）的变化。</li></ol></li><li>当key数据发生变化的时候，发起查询请求，获取列表数据，赋值给list数据驱动视图，表格发生更新。</li></ol><p>学习：侦听器</p><ul><li>计算属性：当你依赖data中的数据，通过逻辑处理得到新的数据，使用计算属性。<ul><li>当你依赖的data中数据改变，计算属性的逻辑执行，计算属性改变。</li></ul></li><li>侦听器：当你想听讲到某个数据变化，当不一定是依赖这个数据直接得到你想要的数。<ul><li>你可能需要通过请求获取后台的数据，得到想要的数据，异步操作</li><li>或者 复杂逻辑操作（耗时较长）</li><li>补充：只有你想监听数据变化，去做些事件，都可以使用侦听器。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      msg: <span class="string">&#x27;hi vue&#x27;</span>,</span></span><br><span class="line">      user: &#123;</span><br><span class="line"><span class="javascript">        name: <span class="string">&#x27;tom&#x27;</span>,</span></span><br><span class="line">        age: 10</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 侦听器 watch</span></span></span><br><span class="line">    watch: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 属性名：你需要监听的字段名称</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 属性值：数据变化的时候触发的函数</span></span></span><br><span class="line">      </span><br><span class="line"><span class="javascript">      <span class="comment">//1. 监听msg数据的变化</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">//function(new,old) new 改变后的值  old改变前的值</span></span></span><br><span class="line"><span class="javascript">      <span class="string">&#x27;msg&#x27;</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newMsg,oldMsg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(newMsg, oldMsg)</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 2. 监听age数据的变化（监听对象中的数据，需要带上前置对象的名称）</span></span></span><br><span class="line"><span class="javascript">      <span class="string">&#x27;user.age&#x27;</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;age改变了&#x27;</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在案例中的实现代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 搜索 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-inline&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding: 20px 0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;key&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入关键字进行搜索&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      data: &#123;</span><br><span class="line">        // 品牌列表数据</span><br><span class="line">        list: [],</span><br><span class="line">        // 名称</span><br><span class="line">        brandName: &#x27;&#x27;,</span><br><span class="line">        // 搜索关键字</span><br><span class="line"><span class="addition">+        key: &#x27;&#x27;</span></span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  <span class="comment">// 侦听key数据的变化</span></span><br><span class="line">  key () &#123;</span><br><span class="line">    axios.get(<span class="string">&#x27;http://localhost:3000/brands&#x27;</span>,&#123;</span><br><span class="line">      params: &#123; <span class="attr">name_like</span>: <span class="built_in">this</span>.key &#125;</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.list = res.data</span><br><span class="line">      <span class="comment">// 修改list数据为查询到的新数组</span></span><br><span class="line">      <span class="comment">// 数据驱动视图，表格也会更新好</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h2><h3 id="01-★组件-概念"><a href="#01-★组件-概念" class="headerlink" title="01-★组件-概念"></a>01-★组件-概念</h3><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/j8HqyDD/1586829827877.png" alt="1586829827877"></p><p>什么是组件？</p><ul><li>js模块，独立的一个js文件，提供js逻辑，函数。</li><li>vue组件，关注于界面，<strong>它包含：HTML结构  CSS样式  JS代码</strong>，它可以把一个完整的页面，根据界面功能拆分成若干组件。</li></ul><p>组件化开发好处？</p><ul><li>高度复用</li><li>组件与组件之间相互独立的，例如：数据，函数。组件实现的功能足够单一，后期更好维护。</li></ul><p>组件底层是什么？</p><ul><li>组件本质上是一个vue实例，但是写法和vue实例不同，<code>new Vue(&#123;//配置对象&#125;)</code></li><li>组件会通过 <code>Vue.componnet(//组件)</code>  或者在Vue实例中 <code>new Vue(&#123;components:&#123;//组件&#125;&#125;)</code></li><li>组件也有配置对象，不包含 el 选项，el是指定vue实例管理的视图容器，组件实通过 template选项，指定html结构容器的。</li><li>配置选项：data methods  watch filters directives computed created …（创建组件，创建vue实例）</li></ul><p><em>需求：页面上需要三个自增功能（点个按钮自己加1）</em></p><p>未用组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 自增 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;&#123;count&#125;&#125; <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add()&quot;</span>&gt;</span>自增1<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;&#123;count1&#125;&#125; <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add1()&quot;</span>&gt;</span>自增1<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;&#123;count2&#125;&#125; <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add2()&quot;</span>&gt;</span>自增1<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      count: 0,</span><br><span class="line">      count1: 0,</span><br><span class="line">      count2: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      add () &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.count ++</span></span><br><span class="line">      &#125;,</span><br><span class="line">      add1 () &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.count1 ++</span></span><br><span class="line">      &#125;,</span><br><span class="line">      add2 () &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.count2 ++</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="comment">// 每一块界面功能，用户自己的数据，和自己的函数，功能才能相互独立。</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 但是：太多功能重复且相似的代码了，vue提出了组件化开发，优化这个问题。</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">com-add</span>&gt;</span><span class="tag">&lt;/<span class="name">com-add</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">com-add</span>&gt;</span><span class="tag">&lt;/<span class="name">com-add</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">com-add</span>&gt;</span><span class="tag">&lt;/<span class="name">com-add</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 注册组件（vue实例）</span></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;com-add&#x27;</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span> </span><span class="template-variable">&#123;&#123;<span class="name">count</span>&#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add()&quot;</span>&gt;</span>自增1<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line">    data () &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        count: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      add () &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.count ++</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="comment">// vue实例</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="02-★组件-全局注册"><a href="#02-★组件-全局注册" class="headerlink" title="02-★组件-全局注册"></a>02-★组件-全局注册</h3><p>注册完成后，可以在任意VUE实例管理的视图中使用。</p><p>基本语法：<code>Vue.component(&#39;组件名称&#39;,&#39;组件配置对象&#39;)</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注册组件时候使用的组件名称，在视图中使用就是自定义标签的名称 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注意：组件的名称不能和原生html标签重名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">com-article</span>&gt;</span><span class="tag">&lt;/<span class="name">com-article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 全局注册组件</span></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;com-article&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 组件配置对象，和vue实例的配置对象基本一致，没有el选项</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// template选项必须指定，当前组件管理的视图，需要有一个根标签。</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 在模板字符中，可以使用插值表达式，和任意指令，但是只能使用当前组件数据和函数。</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">count</span>&#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add()&quot;</span>&gt;</span>自增1<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 声明数据，使用的还是data，但是是一个函数，函数的返回值才是组件的数据，必须是对象。</span></span></span><br><span class="line">    data () &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        count: 100</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 可以使用任意配置选项</span></span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      add () &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.count ++ </span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 根实例</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="03-★组件-局部注册"><a href="#03-★组件-局部注册" class="headerlink" title="03-★组件-局部注册"></a>03-★组件-局部注册</h3><p>注册完毕后，只能在注册的当前vue实例管理的视图中使用。</p><p>基本语法：vue配置对象中 <code>components:&#123;&#39;组件名称&#39;:&#39;组件配置对象&#39;&#125;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">com-add</span>&gt;</span><span class="tag">&lt;/<span class="name">com-add</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 组件配置对象</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> ComAdd = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">count</span>&#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add()&quot;</span>&gt;</span>自增1<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;,</span></span></span><br><span class="line">    data () &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        count: 100</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      add () &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.count ++</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="comment">// 根实例</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 配置选项 components 注册局部组件</span></span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 属性名称：组件的名称</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 属性的值：组件的配置对象</span></span></span><br><span class="line"><span class="javascript">      <span class="string">&#x27;com-add&#x27;</span>: ComAdd</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="04-★组件-组件嵌套"><a href="#04-★组件-组件嵌套" class="headerlink" title="04-★组件-组件嵌套"></a>04-★组件-组件嵌套</h3><p>组件与组件的关系，会有嵌套关系。</p><p>全局组件嵌套：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">com-a</span>&gt;</span><span class="tag">&lt;/<span class="name">com-a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 需求：com-a组件 嵌套 com-b组件，在a组件中使用b组件</span></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;com-a&#x27;</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;com-a&quot;</span>&gt;</span>COMA组件 <span class="tag">&lt;<span class="name">com-b</span>&gt;</span><span class="tag">&lt;/<span class="name">com-b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;com-b&#x27;</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;com-b&quot;</span>&gt;</span>COMB组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="comment">// 根实例</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>局部组件嵌套：</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/3fGJ3ys/1586836144571.png" alt="1586836144571"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">com-a</span>&gt;</span><span class="tag">&lt;/<span class="name">com-a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// b组件配置对象</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> ComB = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;com-b&quot;</span>&gt;</span>COMB组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="comment">// a组件配置对象</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> ComA = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: &#x27;<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;com-a&quot;</span>&gt;</span>COMA组件 <span class="tag">&lt;<span class="name">com-b</span>&gt;</span><span class="tag">&lt;/<span class="name">com-b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;,</span></span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="javascript">      <span class="string">&#x27;com-b&#x27;</span>: ComB</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 根实例</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="javascript">      <span class="string">&#x27;com-a&#x27;</span>: ComA</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="05-★组件-命名规则"><a href="#05-★组件-命名规则" class="headerlink" title="05-★组件-命名规则"></a>05-★组件-命名规则</h3><p>给大家梳理一下将来大家可能遇见的组件注册命名。</p><p>两种命名规范：</p><ul><li>注册组件组件名称：小写单词加中线 <code>com-add</code>  <code>nav-bar</code><ul><li>在使用组件的时候：<code>&lt;com-add&gt;&lt;/com-add&gt;</code>  <code>&lt;nav-bar&gt;&lt;/nav-bar&gt;</code></li></ul></li><li>注册组件组件名称：单词首字母大写 <code>ComAdd</code>  <code>NavBar</code><ul><li>在使用组件的时候：<code>&lt;com-add&gt;&lt;/com-add&gt;</code>  <code>&lt;nav-bar&gt;&lt;/nav-bar&gt;</code></li><li>如果想直接使用 单词首字母大写 组件名称作为标签的名称 <ul><li>只能template指定的视图中使用  <code>&lt;ComAdd&gt;&lt;/ComAdd&gt;</code>  <code>&lt;NavBar&gt;&lt;/NavBar&gt;</code></li><li>通过el指定的dom容器中不能使用 </li></ul></li></ul></li></ul><p>总结：不管使用 小写单词加中线 还是 单词首字母大写 注册的组件，都使用 小写单词加中线 标签一定没错。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">com-a</span>&gt;</span><span class="tag">&lt;/<span class="name">com-a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// b组件配置对象</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> ComB = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;com-b&quot;</span>&gt;</span>COMB组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="comment">// a组件配置对象</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> ComA = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: &#x27;<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;com-a&quot;</span>&gt;</span>COMA组件 <span class="tag">&lt;<span class="name">ComB</span>&gt;</span><span class="tag">&lt;/<span class="name">ComB</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;,</span></span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 组件名称 ComB  使用组件 &lt;com-b /&gt;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 组件名称 ComB  在template的视图中使用 &lt;ComB /&gt;</span></span></span><br><span class="line">      ComB</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 根实例</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 组件名称 ComA  使用组件 &lt;com-a /&gt;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 组件名称 ComA  在el管理的dom容器中不是使用  &lt;ComA&gt;</span></span></span><br><span class="line">      ComA</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="06-★组件-组件传值"><a href="#06-★组件-组件传值" class="headerlink" title="06-★组件-组件传值"></a>06-★组件-组件传值</h3><p>由于组件的数据是相互独立的，导致某个组件需要使用另外一个组件的数据遇到问题，我们需要通过特定的方式来 进行组件间的数据通信。</p><p>然后这些不同的传值方式，和组件与组件间的关系有关。</p><p>分成三种：</p><ul><li>父组件 传值  子组件</li><li>子组件 传值   父组件</li><li>非父子关系，组件传值 （后面讲到）</li></ul><p>父组件 传值  子组件：</p><ul><li>父组件  <code>com-parent</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;com-parent&#x27;</span>,&#123;</span><br><span class="line">  template: <span class="string">`&lt;div&gt;父组件：&lt;com-child abc=&quot;abc数据&quot; :myMsg=&quot;msg&quot;&gt;&lt;/com-child&gt;&lt;/div&gt;`</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">&#x27;parent数据&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>子组件  <code>com-child</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;com-child&#x27;</span>,&#123;</span><br><span class="line">  template: <span class="string">`&lt;div&gt;子组件：&#123;&#123;myMsg&#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="line">  <span class="comment">// props 用来接收使用组件所绑定的属性数据，属性的名字就是数据的字段名称</span></span><br><span class="line">  <span class="comment">// props: [&#x27;abc&#x27;] 接收到了使用组件绑定的abc属性属性，使用vue实例即可访问，this.abc </span></span><br><span class="line">  <span class="comment">// 此时的 this.myMsg 其实就是父组件传递给子组件的数据</span></span><br><span class="line">  props: [<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;myMsg&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>完整的传值demo代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">com-parent</span>&gt;</span><span class="tag">&lt;/<span class="name">com-parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 父组件</span></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;com-parent&#x27;</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>父组件：</span><span class="template-variable">&#123;&#123;<span class="name">msg</span>&#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">com-child</span> <span class="attr">abc</span>=<span class="string">&quot;abc数据&quot;</span> <span class="attr">:myMsg</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">com-child</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line">    data () &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        msg: <span class="string">&#x27;parent数据&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="comment">// 子组件</span></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;com-child&#x27;</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>子组件：</span><span class="template-variable">&#123;&#123;<span class="name">myMsg</span>&#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;fn()&quot;</span>&gt;</span>改props的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// props接收的数据，是单向的。只负责父组件数据传递给子组件。</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// props接收的数据，仅仅只能访问，不能修改。</span></span></span><br><span class="line"><span class="javascript">    props: [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;myMsg&#x27;</span>],</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      fn () &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// 注意：props数据仅读</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.myMsg = <span class="string">&#x27;xxx&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="comment">// 根实例</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：父传子</p><ul><li>在父组件中，使用子组件的时候，通过自定义属性绑定父组件数据  :myMsg=”msg”</li><li>在子组件中，使用props选项来接收父传递给子的数据：props:[‘myMsg’]</li><li>注意：props接收的数据仅读</li></ul><p>子组件 传值   父组件：</p><ul><li>父组件 <code>com-parent</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;com-parent&#x27;</span>,&#123;</span><br><span class="line">  template: <span class="string">`&lt;div&gt;父组件：&lt;span @click=&quot;fn1&quot;&gt;&lt;/span&gt; &lt;com-child @myEvent=&quot;fn($event)&quot;&gt;&lt;/com-child&gt;&lt;/div&gt;`</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fn (data) &#123;</span><br><span class="line">      <span class="comment">// $event 是实参，就是触发事件传递的数据。</span></span><br><span class="line">      <span class="comment">// 这个data就是触发事件的时候传递过来的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>子组件 <code>com-child</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;com-child&#x27;</span>,&#123;</span><br><span class="line">  template: <span class="string">`&lt;div&gt;子组件：&lt;button @click=&quot;toParent()&quot;&gt;子传父&lt;/button&gt;&lt;/div&gt;`</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">&#x27;child数据&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// myEvent 是在父组件给子组件绑定的一个自定义事件，触发是由子组件来触发</span></span><br><span class="line">    toParent () &#123;</span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">&#x27;myEvent&#x27;</span>, <span class="built_in">this</span>.msg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>推导：</p><ul><li>父组件 <code>&lt;span @click=&quot;fn1&quot;&gt;</code> 是在给span标签绑定事件，指定的fn1函数是父组件的。</li><li>如果我想触发fn1函数执行，触发span标签的点击事件。</li><li>如果click绑定在span上就是原生事件，但是如果绑定在组件com-child上那就是自定义事件。</li><li>那么 在组件上绑定的事件名称可以随意命名，它都是一个自定义事件。</li><li>如果需要触发自定义事件，<code>&lt;com-child @myEvent=&quot;fn&quot;&gt;</code> ，所以myEvent事件属于子组件触发。</li><li>vue实例提供了一个函数可以触发，自己组件绑定的事件：<ul><li><code>this.$emit(&#39;myEevent&#39;)</code>  myEevent 自定义事件的名字</li><li><code>this.$emit(&#39;myEevent&#39;,&#39;数据&#39;)</code>   事件对于的函数有一个默认的传参<ul><li>指定的函数没有括号 <code>fn</code>   拥有一个默认传参，就是触发事件的时候传递的数据</li><li>指定的函数有了括号 <code>fn($event)</code>  这个$event就是就是触发事件的时候传递的数据。</li></ul></li></ul></li></ul><p>完整的子传父demo代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">com-parent</span>&gt;</span><span class="tag">&lt;/<span class="name">com-parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 父组件</span></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;com-parent&#x27;</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>父组件：<span class="tag">&lt;<span class="name">com-child</span> @<span class="attr">myEvent</span>=<span class="string">&quot;fn($event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">com-child</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;,</span></span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      fn (data) &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// data就是子组件的数据</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;父组件打印：&#x27;</span>+ data)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="comment">// 值组件</span></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;com-child&#x27;</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>子组件：<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toParent()&quot;</span>&gt;</span>子传父<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;,</span></span></span><br><span class="line">    data () &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        msg: <span class="string">&#x27;child数据&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      toParent () &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// 子传父</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&#x27;myEvent&#x27;</span>, <span class="built_in">this</span>.msg)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="comment">// 根实例</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：子传父</p><ul><li>在父组件，给子组件绑定自定义事件，会指定函数。</li><li>在子组件，内部使用 <code>this.$emit(&#39;自定义事件的名字&#39;,&#39;传递的数据&#39;)</code></li><li>在父组件，指定的函数就会触发，而且默认的传参就是  传递的数据，$event 就是 传递的数据。</li></ul><h3 id="07-SPA-特点介绍"><a href="#07-SPA-特点介绍" class="headerlink" title="07-SPA-特点介绍"></a>07-SPA-特点介绍</h3><p>当页面应用程序，简称SAP（single page application）,大白话：一个系统上的所有功能在一个页面上实现。</p><p>如果是所有功能在一个页面上实现，业务复杂度是非常高的，可维护性非常差。所以vue框架可以拆分业务，</p><p>使用组件来拆分业务。</p><p>优点：</p><ul><li>利于实现前后端分离而且是项目级的分离</li><li>只有资源加载完毕后，场景与场景之间的切换很流畅。</li></ul><p>缺点：</p><ul><li>它把所有功能写在一起，一个页面的资源提交较大，第一次访问这个系统很慢（首屏加载数据慢）<ul><li>这个后期可以做优化。</li></ul></li><li>在一个页面上实现，数据都是异步加载，js动态渲染，不利于SEO(搜索引擎优化)</li></ul><p>在单页面应用程序中，如何切换页面的业务场景。</p><ul><li><a href="https://music.163.com/">https://music.163.com/</a> </li></ul><p>通过<strong>前端路由</strong>实现业务场景的切换。</p><h3 id="08-SPA-前端路由"><a href="#08-SPA-前端路由" class="headerlink" title="08-SPA-前端路由"></a>08-SPA-前端路由</h3><p>后端路由：</p><ul><li>根据用户的请求地址+方式，分发到不同的业务函数，进行逻辑处理。</li><li>控制 客户端请求 和  后端处理函数的 映射关系。</li></ul><p>前端路由：</p><ul><li>根据地址栏变化（不发请求），去局部更新不同的页面内容。<ul><li>前端业务场景切换。</li></ul></li><li>在vue项目中的路由<ul><li>控制 地址变化 和 组件渲染 的映射关系。</li><li>例如： /   对应渲染  首页组件   </li><li>例如：/login  对应渲染  登录组件</li></ul></li></ul><p>模拟前端路由的实现：前端路由的实现原理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 导航 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 地址上改变 以#号这种方式的改变  是不会发生页面跳转的 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 术语：#和#后的字符串 这段URL字符串称为：hash地址（锚点） --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- hash的改变也会记录到浏览历史中，通过回退和前进可以切换业务场景 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 前端路由：监听的hash值得改变，去根据地址显示对应的网页内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/&quot;</span>&gt;</span>发现音乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/my&quot;</span>&gt;</span>我的音乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/friend&quot;</span>&gt;</span>朋友<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 需要根据地址（hash）来进行渲染 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 容器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> content = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#content&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> render = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取hash地址</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> hash = location.hash</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 去除#获取hash上的路径</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> path = hash.replace(<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 根据路径渲染网页内容</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">switch</span> (path) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span></span><br><span class="line"><span class="javascript">          content.innerHTML = <span class="string">&#x27;发现音乐的网页内容&#x27;</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">&#x27;/my&#x27;</span>:</span></span><br><span class="line"><span class="javascript">          content.innerHTML = <span class="string">&#x27;我的音乐的网页内容&#x27;</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">case</span> <span class="string">&#x27;/friend&#x27;</span>:</span></span><br><span class="line"><span class="javascript">          content.innerHTML = <span class="string">&#x27;朋友的网页内容&#x27;</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">          <span class="keyword">break</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render()</span><br><span class="line"><span class="javascript">    <span class="comment">// 当hash值变化的时候，动态设置网页内容</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">      render()</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>根据hash值得变化，局部根据网页内容。</li><li>在vue项目中有一个插件，vue-router实现前端路由。<ul><li>不同的路径对应不同的组件</li></ul></li></ul><h3 id="09-★vue-router-使用步骤"><a href="#09-★vue-router-使用步骤" class="headerlink" title="09-★vue-router-使用步骤"></a>09-★vue-router-使用步骤</h3><p>下载： <a href="https://cdn.bootcss.com/vue-router/3.1.3/vue-router.min.js">https://cdn.bootcss.com/vue-router/3.1.3/vue-router.min.js</a> </p><p>使用：</p><ol><li>导入</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>准备组件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 准备三个组件（组件配置对象）</span></span><br><span class="line"><span class="keyword">const</span> Home = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;发现音乐网页内容&lt;/div&gt;`</span> &#125;</span><br><span class="line"><span class="keyword">const</span> My = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;我的音乐网页内容&lt;/div&gt;`</span> &#125;</span><br><span class="line"><span class="keyword">const</span> Friend = &#123; <span class="attr">template</span>: <span class="string">`&lt;div&gt;朋友网页内容&lt;/div&gt;`</span> &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>约定路由规则（url和组件映射）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由规则（按照vue-router进行定义）</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: Home&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;/my&#x27;</span>, <span class="attr">component</span>: My&#125;,</span><br><span class="line">  &#123;<span class="attr">path</span>: <span class="string">&#x27;/friend&#x27;</span>, <span class="attr">component</span>: Friend&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="4"><li>初始化vue-router插件，使用路由规则</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化vue-router且使用刚定义的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="comment">// 初始化路由的配置对象</span></span><br><span class="line">  <span class="comment">// 有以一个配置项 routes 定义路由规则</span></span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="5"><li>把路由实例，配置到vue根实例中。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="comment">// vue提供了一个配置选项，router选项，是用来挂载路由实例的</span></span><br><span class="line">  <span class="comment">// 只有挂载了 router 实例 才可使用路由的功能</span></span><br><span class="line">  router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="6"><li>书写路由链接</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 写路由链接 不会使用a标签  使用router-link组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 组件默认解析的是a标签  to属性跳转的地址，不需要带上# --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>发现音乐<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/my&quot;</span>&gt;</span>我的音乐<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/friend&quot;</span>&gt;</span>朋友<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="7"><li>指定路由对应组件渲染的位置</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 渲染路由对应的组件 router-view承载路由对应的组件的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-★vue-router-动态路由"><a href="#10-★vue-router-动态路由" class="headerlink" title="10-★vue-router-动态路由"></a>10-★vue-router-动态路由</h3><p>概念：不同的路由地址，指向同一个组件，此时需要使用动态路由。</p><p>示图：</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/6sMcQPg/1586914825786.png" alt="1586914825786"></p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app 根容器 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 文章详情，文章列表，这两个业务场景在这个app容器内容完成切换 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- router-link的作用，点击后可以切换路由地址，或者在地址栏直接敲路由地址 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 切换的目的，显示对应的组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 组件配置对象</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 文章列表组件配置对象</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> ArticleList = &#123;</span></span><br><span class="line">    template: `</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;i in 4&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#x27;/article/1000&#x27;+i&quot;</span>&gt;</span>文章</span><span class="template-variable">&#123;&#123;<span class="name">i</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>`</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="comment">// 文章详情组件配置对象</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> ArticleItem = &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 配置了路由后，组件实例上有一个数据：$route.params 就是路径传参</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>文章详情 id：</span><span class="template-variable">&#123;&#123;<span class="name">$route.params.id</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="comment">// 路由规则</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> routes = [</span></span><br><span class="line"><span class="javascript">    &#123;<span class="attr">path</span>:<span class="string">&#x27;/list&#x27;</span>, <span class="attr">component</span>: ArticleList&#125;,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 现在路由规则 /article 不能匹配到 /article/10001 </span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 下面的写法就是动态路由写法</span></span></span><br><span class="line"><span class="javascript">    &#123;<span class="attr">path</span>:<span class="string">&#x27;/article/:id&#x27;</span>, <span class="attr">component</span>: ArticleItem&#125;</span></span><br><span class="line">  ]</span><br><span class="line"><span class="javascript">  <span class="comment">// 初始化</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; routes &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 挂载在vue根实例</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    router</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>在路由规则中，匹配到不同的地址，指向同一个组件</li><li>代码：<code>&#123;path:&#39;/article/:id&#39;, component: ArticleItem&#125;</code></li><li>数据：模板 <code>&#123;&#123;$route.params.id&#125;&#125;</code>  组件  <code>this.$route.params.id</code></li></ul><h3 id="11-★vue-router-属性to"><a href="#11-★vue-router-属性to" class="headerlink" title="11-★vue-router-属性to"></a>11-★vue-router-属性to</h3><p>作用：<code>&lt;router-link&gt;</code>组件上的属性to它的作用声明点击后的跳转的路由地址。</p><p>使用：</p><ul><li>直接使用字符串，简单路径跳转。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>也可以使用字符串，进行带参数的跳转。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 路径传参  路由规则&#123;path:&#x27;/article/:id&#x27;&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/article/10001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 键值对传参 路由规则&#123;path:&#x27;/article&#x27;&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/article?id=10001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>注意：如果有复杂的参数传递，拼接字符串挺麻烦，<strong>to属性支持对象写法</strong>。</p></li><li><p>注意：前端路由跳转，只是hash值得改变，不涉及发请求，所以不会有：请求体传参 请求头传参。</p></li><li><p>普通跳转</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;/list&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>路径传参（对象写法）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由规则 (命名路由)</span></span><br><span class="line"><span class="keyword">const</span> routes = [&#123;<span class="attr">path</span>:<span class="string">&#x27;/article/:id&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;article&#x27;</span>,<span class="attr">component</span>:ArticleItem&#125;]</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;article&#x27;,params:&#123;id: 10001&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /article/10001 --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$route.params.id #进行获取</span><br></pre></td></tr></table></figure><ul><li>键值对传参（对象写法）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [&#123;<span class="attr">path</span>:<span class="string">&#x27;/article&#x27;</span>,<span class="attr">component</span>:ArticleItem&#125;]</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;/article&#x27;,query:&#123;id: 10001&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /article?id=10001 --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$route.query.id #进行获取</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 各种router-link写法 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 字符串 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/list&quot;</span>&gt;</span>文章列表<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/article/10001&quot;</span>&gt;</span>文章详情<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/item?id=10001&quot;</span>&gt;</span>文章详情<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 对象 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;/list&#x27;&#125;&quot;</span>&gt;</span>文章列表<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;article&#x27;,params:&#123;id:10001&#125;&#125;&quot;</span>&gt;</span>文章列表<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;/item&#x27;,query:&#123;id:10001&#125;&#125;&quot;</span>&gt;</span>文章列表<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 显示路由对应组件容器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// routes 指定路由规则数组</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; </span></span><br><span class="line">    routes:[</span><br><span class="line">      &#123;</span><br><span class="line"><span class="javascript">        path: <span class="string">&#x27;/list&#x27;</span>, </span></span><br><span class="line">        component: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">          template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>列表组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line"><span class="javascript">        path: <span class="string">&#x27;/article/:id&#x27;</span>, </span></span><br><span class="line"><span class="javascript">        name: <span class="string">&#x27;article&#x27;</span>,</span></span><br><span class="line">        component: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">          template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>article文章详情组件 </span><span class="template-variable">&#123;&#123;<span class="name">$route.params.id</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line"><span class="javascript">        path: <span class="string">&#x27;/item&#x27;</span>, </span></span><br><span class="line">        component: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">          template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>item文章详情组件 </span><span class="template-variable">&#123;&#123;<span class="name">$route.query.id</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ] </span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    router</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：对象方式的两种传参，怎么取值。</p><ul><li><code>:to=&quot;&#123;name:&#39;article&#39;,params:&#123;id:10001&#125;&#125;&quot; </code>    $route.params.id<ul><li>解析后：/article/10001</li></ul></li><li><code>:to=&quot;&#123;path:&#39;/item&#39;,query:&#123;id:10001&#125;&#125;&quot;</code>   $route.query.id<ul><li>解析后：/item?id=10001</li></ul></li></ul><h3 id="12-★vue-router-编程式导航"><a href="#12-★vue-router-编程式导航" class="headerlink" title="12-★vue-router-编程式导航"></a>12-★vue-router-编程式导航</h3><p>导航：可以发生路由跳转（地址hash值得改变）</p><ul><li><router-link> 这个标签可以实现导航功能。<ul><li>通过显性的组件 router-link 定义的导航（在界面看的见），<strong>声明式导航</strong>。</li></ul></li><li>通过 <code>$router.push()</code>  这个函数可以实现导航功能。<ul><li>通过 js代码调用一个导航函数进行跳转（界面上看不见），<strong>编程式导航</strong>。</li></ul></li></ul><p>场景：</p><ul><li>在界面上，有确切的跳转链接，使用声明式导航。</li><li>当你在执行一个js逻辑的时候，你想进行跳转，此时使用编程式导航。<ul><li>在做登录的时候，登录成功后，才应该跳转到首页。</li></ul></li></ul><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 声明式导航 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 显示路由对应组件容器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; </span></span><br><span class="line"><span class="javascript">    <span class="comment">// routes 指定路由规则数组</span></span></span><br><span class="line">    routes:[</span><br><span class="line">      &#123;</span><br><span class="line"><span class="javascript">        path: <span class="string">&#x27;/login&#x27;</span>,</span></span><br><span class="line">        component: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">          template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line">          methods: &#123;</span><br><span class="line">            login () &#123;</span><br><span class="line"><span class="javascript">              <span class="comment">// 进行登录</span></span></span><br><span class="line"><span class="javascript">              <span class="comment">// 假设登录成功了</span></span></span><br><span class="line"><span class="javascript">              <span class="comment">// 跳转到首页</span></span></span><br><span class="line"><span class="javascript">              <span class="comment">// 只能通过js的方式进行跳转（编程式导航）</span></span></span><br><span class="line"><span class="javascript">              <span class="comment">// vue实例提供了一个对象 $router </span></span></span><br><span class="line"><span class="javascript">              <span class="comment">// $router就是路由实例，提供一个函数 push，可以进行跳转</span></span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.$router.push(<span class="string">&#x27;/home&#x27;</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line"><span class="javascript">        path: <span class="string">&#x27;/home&#x27;</span>,</span></span><br><span class="line">        component: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">          template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ] </span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    router</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>js代码执行的导航跳转就是编程式导航 <code>this.$router.push(&#39;/home&#39;)</code></li><li>to属性解析过执行的跳转，依赖的代码其实就是编程式导航代码。</li><li>router-link的to属性能使用的传参方式，在编程式导航中都可以使用。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路径传参</span></span><br><span class="line"><span class="built_in">this</span>.$router.push(&#123;<span class="attr">name</span>:<span class="string">&#x27;article&#x27;</span>,<span class="attr">params</span>:&#123;<span class="attr">id</span>:<span class="number">10001</span>&#125;&#125;)</span><br><span class="line"><span class="comment">// 键值对传参</span></span><br><span class="line"><span class="built_in">this</span>.$router.push(&#123;<span class="attr">path</span>:<span class="string">&#x27;/item&#x27;</span>,<span class="attr">query</span>:&#123;<span class="attr">id</span>:<span class="number">10001</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="13-★vue-router-重定向"><a href="#13-★vue-router-重定向" class="headerlink" title="13-★vue-router-重定向"></a>13-★vue-router-重定向</h3><p>重定向：</p><ul><li>当你访问某个地址的时候，经过程序的处理（用户看不见），跳转到了另外一个地址。</li></ul><p>前端的路由，使用使用重定向功能，假设一个业务场景：</p><ul><li>当你访问页面的时候，默认hash地址是 <code>#/</code> ，默认的路由地址 <code>/</code></li><li>此时我们项目的首页 <code>/home</code> ,所以：当我们访问<code>/</code>重定向到<code>/home</code>，才能默认访问首页。  </li></ul><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; </span></span><br><span class="line"><span class="javascript">    <span class="comment">// routes 指定路由规则数组</span></span></span><br><span class="line">    routes:[</span><br><span class="line"><span class="javascript">      <span class="comment">// 匹配 / 路径，重定向 到 &#x27;/home&#x27; 即可</span></span></span><br><span class="line">      &#123;</span><br><span class="line"><span class="javascript">        path: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="comment">// 首页路由规则</span></span></span><br><span class="line">      &#123;</span><br><span class="line"><span class="javascript">        path: <span class="string">&#x27;/home&#x27;</span>,</span></span><br><span class="line">        component: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">          template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>首页页面内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ] </span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    router</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>路由规则对象中 提供了一个选项：redirect 配置重定向的地址即可。</li></ul><h3 id="14-★vue-router-导航守卫"><a href="#14-★vue-router-导航守卫" class="headerlink" title="14-★vue-router-导航守卫"></a>14-★vue-router-导航守卫</h3><p>重定向配置：</p><ul><li>通过路由规则栏实现的，<code>&#123;path:&#39;/&#39;,redirect:&#39;/home&#39;&#125;</code> 当你访问/路径跳转到/home路径。</li></ul><p>上面的重定向是写死的，在跳转的过程中，无法根据业务，进行跳转。</p><p>现在有个需求：</p><ul><li>有若干个组件，个人中心，修改密码页面，登录页面。</li><li>对应访问  个人中心  修改密码  必须要登录，登录页面除外。</li><li>在跳转  个人中心 和  修改密码 这两个组件前，判断登录的状态<ul><li>如果登录：放行</li><li>如果没有：拦截到登录页面  </li></ul></li></ul><p>导航守卫：</p><ul><li>实现，在路由跳转前，实现一些业务逻辑，可以控制跳转的最终目标。</li></ul><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/q9vs1XY/1586931811606.png" alt="1586931811606"></p><p>代码：（登录模拟）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 渲染的是路由对应的组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 四个组件</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> Home = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user&quot;</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span>  </span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/password&quot;</span>&gt;</span>修改密码<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span>  </span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> Login = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> User = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> Password = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>修改密码<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="comment">// 路由规则</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> routes = [</span></span><br><span class="line"><span class="javascript">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: Home&#125;,</span></span><br><span class="line"><span class="javascript">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>, <span class="attr">component</span>: Login&#125;,</span></span><br><span class="line"><span class="javascript">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">component</span>: User&#125;,</span></span><br><span class="line"><span class="javascript">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/password&#x27;</span>, <span class="attr">component</span>: Password&#125;</span></span><br><span class="line">  ]</span><br><span class="line"><span class="javascript">  <span class="comment">// 初始化</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; routes &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 通过导航守卫，做登录状态的判断</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 在首页跳转到个人中心</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// to 就是目标的路由对象  个人中心</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// from 就是来源的路由对象  首页</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// next 下一步做的事情，如果不调用next程序卡住</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// next() 放行，目标是谁跳转到谁</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// next(&#x27;/login&#x27;) 拦截，登录地址</span></span></span><br><span class="line"><span class="javascript">  router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 只要发生路由的跳转，都会触发这个函数</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 路由跳转前执行这个函数，可以在函数中实现一些业务</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 模拟拿到登录状态</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> isLogin = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 判断逻辑</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> ((to.path !==<span class="string">&#x27;/login&#x27;</span>&amp;&amp;to.path !==<span class="string">&#x27;/&#x27;</span>) &amp;&amp; !isLogin ) <span class="keyword">return</span> next(<span class="string">&#x27;/login&#x27;</span>)</span></span><br><span class="line">    next()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 挂载</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    router</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>导航守卫 <code>router.beforeEach((to,from,next)=&gt;&#123;&#125;)</code> 在每次路由跳转前执行里面的回调函数</li><li>可以实现前端路由的访问权限控制，登录状态的判断与拦截。</li></ul><h3 id="15-★vue-router-路由嵌套"><a href="#15-★vue-router-路由嵌套" class="headerlink" title="15-★vue-router-路由嵌套"></a>15-★vue-router-路由嵌套</h3><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/YN0pK16/1586934746983.png" alt="1586934746983"></p><p>总结：</p><ul><li>在已有的路由容器中，再实现一套路由，再套一个路由容器，叫：嵌套路由。</li></ul><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一级菜单 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>发现音乐<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/my&quot;</span>&gt;</span>我的音乐<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/friend&quot;</span>&gt;</span>朋友<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 一级路由对应组件渲染的容器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 一级路由对应的组件</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> Home = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="comment">&lt;!-- 二级菜单 --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/tj&quot;</span>&gt;</span>推荐<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/top&quot;</span>&gt;</span>排行榜<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/order&quot;</span>&gt;</span>歌单<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="comment">&lt;!-- 二级路由对应组件渲染的容器 --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span>  </span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> My = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>我的音乐网页内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> Friend = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>朋友网页内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="comment">// 二级路由对应的组件</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> Tj = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>推荐网页内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> Top = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>排行榜网页内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> Order = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>歌单网页内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 路由规则</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> routes = [</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// children是用來实现嵌套路由的选项配置</span></span></span><br><span class="line"><span class="javascript">      path: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: Home, <span class="attr">children</span>: [</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/tj&#x27;</span>, <span class="attr">component</span>: Tj &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/top&#x27;</span>, <span class="attr">component</span>: Top &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/order&#x27;</span>, <span class="attr">component</span>: Order &#125;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/my&#x27;</span>, <span class="attr">component</span>: My &#125;,</span></span><br><span class="line"><span class="javascript">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/friend&#x27;</span>, <span class="attr">component</span>: Friend &#125;</span></span><br><span class="line">  ]</span><br><span class="line"><span class="javascript">  <span class="comment">// 初始化</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; routes &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 挂载</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    router</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>嵌套路由除了 router-view 之间需要嵌套，路由规则也需要通过children来实现嵌套。</li></ul><h3 id="16-vue-cli-介绍"><a href="#16-vue-cli-介绍" class="headerlink" title="16-vue-cli-介绍"></a>16-vue-cli-介绍</h3><blockquote><p>vue-cli是一个开发vue项目的脚手架工具。</p></blockquote><p> <strong>脚手架</strong>是为了保证各施工过程顺利进行而搭设的工作平台。 </p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/sVkpYhq/1586936282638.png" alt="1586936282638"></p><p>vue-cli可以提供基于vue项目架子的快速创建，成为了一套标准。</p><ul><li>项目目录结构，统一的项目结构。</li><li>提供了开发过程中的系列工具，<ul><li>例如：babel  语法降级的</li><li>例如：eslint  约束语法风格（代码风格）</li><li>例如：less  预处理器</li><li>…</li></ul></li><li>提供一个开发时服务器，预览代码（预览项目）<ul><li>提供：自动刷新浏览器，方便你预览</li><li>提供：热更新功能，有些资源的修改，不需要刷新浏览器，立即更新，进行预览</li><li>…</li></ul></li></ul><p>总结：</p><ul><li>vue-cli是一个提供开发项目过程中，便利的一个平台。更加方便的开发项目，提高你的开发效率。</li><li>基于nodejs的命令行工具。</li></ul><h3 id="17-vue-cli-安装"><a href="#17-vue-cli-安装" class="headerlink" title="17-vue-cli-安装"></a>17-vue-cli-安装</h3><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm安装</span></span><br><span class="line">npm i @vue/cli -g</span><br><span class="line"><span class="comment"># yarn安装</span></span><br><span class="line">yarn add @vue/cli global</span><br></pre></td></tr></table></figure><ul><li><p>成功：安装日志中没有任何关于 error  err 相关的日志，代表成功。</p></li><li><p>关于安装报错的问题：</p><ul><li>90%是网络问题，你多试试。</li><li>如果安装慢，使用淘宝镜像。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @vue/cli -g --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mac 苹果电脑</span></span><br><span class="line">sudo npm i @vue/cli -g</span><br></pre></td></tr></table></figure></li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure><h3 id="18-vue-cli-创建项目"><a href="#18-vue-cli-创建项目" class="headerlink" title="18-vue-cli-创建项目"></a>18-vue-cli-创建项目</h3><p>创建项目的步骤：</p><ol><li>打开命令行窗口，执行命令：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 必须英文  2. 不能和包名重名</span></span><br><span class="line">vue create <span class="string">&#x27;项目名称&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>选择创建方式，默认创建，自定义创建。选择默认创建</li></ol><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/tY5G6dB/1586939494650.png" alt="1586939494650"></p><ol start="3"><li>等待安装项目依赖的包</li></ol><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/Pjm6fmx/1586939532904.png" alt="1586939532904"></p><ol start="4"><li>创建成功</li></ol><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/VpyY1qP/1586939698351.png" alt="1586939698351"></p><ol start="5"><li>启动项目（在项目根目录下执行 npm run serve）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><ol start="6"><li>启动成功</li></ol><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/TBTBWRZ/1586939851700.png" alt="1586939851700"></p><ol start="7"><li>去浏览器访问 <a href="http://localhost:8080/">http://localhost:8080</a></li></ol><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/vmKC0Fx/1586939904435.png" alt="1586939904435"></p><h3 id="19-vue-cli-入口文件"><a href="#19-vue-cli-入口文件" class="headerlink" title="19-vue-cli-入口文件"></a>19-vue-cli-入口文件</h3><p>项目目录结构：</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/y0Z7QZc/1586940775930.png" alt="1586940775930"></p><p>前端工作目录：</p><ul><li>views 自己手动添加</li></ul><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/J734Hh7/1586941157051.png" alt="1586941157051"></p><p>入口文件作用：</p><ul><li>在vue-cli的项目中，是以单个文件作为组件进行开发，也是以模块的方式进行开发。</li><li>项目中机会拥有很多文件，像是css  js  组件</li><li>通过 main.js 去整合所有的拆分的文件，导入到main.js里面来，通过vue-cli合并所有的文件在一个页面中进行预览。</li></ul><p>解释main.js的代码：</p><p>分析代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 现在的项目是基于npm的，使用的是npm的包文件</span></span><br><span class="line"><span class="comment">// import语法是es6提供的导入模块的语法 类似nodejs中的 require()</span></span><br><span class="line"><span class="comment">// 导入vue后的变量名称Vue，是vue的构造函数</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入App的组件，在vue-cli中组件写法是.vue文件格式</span></span><br><span class="line"><span class="comment">// 等价：const App = &#123;template:&#x27;&#x27;,data,methods,...&#125; 组件配置对象</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 生产环境提示（将来上线后部署到服务器后的vue提供提示）</span></span><br><span class="line"><span class="comment">// 提示：简单提示  详细提示</span></span><br><span class="line"><span class="comment">// 在生产环境：使用简单的提示  性能更好</span></span><br><span class="line"><span class="comment">// 在开发环境：使用详细的提示  便于调试</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 这就是一个vue实例，管理根容器，将来main.js的代码在public下index.html进行预览</span></span><br><span class="line"><span class="comment">// 想要去管理的就是 index.html 中的 #app 容器</span></span><br><span class="line"><span class="comment">// render 函数，vue实例的配置选项，用于解析组件，现在：解析APP.vue组件</span></span><br><span class="line"><span class="comment">// render 完整：createElement 根据组件创建元素的函数</span></span><br><span class="line"><span class="comment">// render: function(createElement)&#123; return createElement(App)  &#125;</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"><span class="comment">// render创建的dom元素，是需要渲染的。</span></span><br><span class="line"><span class="comment">// vue实例提供一个函数 $mount() 挂载，把APP组件挂载到#app容器，替换式。</span></span><br><span class="line"><span class="comment">// APP.vue 根组件，将来所有组件在根组件基础上进行渲染的。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>导入VUE模块</li><li>导入根组件</li><li>开启开发时提示</li><li>创建根实例，然后在根实例上使用组件。<ul><li>render函数是解析App.vue根组件</li><li>$mount函数将解析的APP.vue组件的内容替换index.html中的#app容器。</li></ul></li></ul><p>职责：</p><ul><li>负责依赖项目需要的资源</li><li>根实例的创建</li></ul><h3 id="20-vue-cli-ES6模块化"><a href="#20-vue-cli-ES6模块化" class="headerlink" title="20-vue-cli-ES6模块化"></a>20-vue-cli-ES6模块化</h3><p>模块化规范：用来约定模块（一个js文件就是一个模块，模块拥有自己作用域）的导入和导出。</p><p>在nodejs中，模块化规范：CommonJS</p><ul><li>导入：<code>const path = require(&#39;path&#39;)</code></li><li>导出：<code>module.exports = &#39;导出的内容&#39;</code>   <code>exports.xxx = &#39;导出的内容&#39;</code></li></ul><p>ES6也提供了模块化规范：ES6模块</p><ul><li><em>默认</em>导入与导出<ul><li>导入：<code>import 变量名 from &#39;包名|js模块路径&#39;</code></li><li>导出：<code>export default 导出内容</code></li></ul></li><li><em>按需</em>导入与导出<ul><li>导入：<code>import &#123;成员变量名1&#125; from &#39;包名|js模块路径&#39;</code></li><li>导出：<ul><li><code>export const 成员变量名1 = &#39;导出内容1&#39; </code></li><li><code>export const 成员变量名2 = &#39;导出内容2&#39; </code></li></ul></li></ul></li></ul><p>代码演示：</p><ul><li><em>默认</em>导入与导出</li></ul><p><code>module-a.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模块a  默认导出</span></span><br><span class="line"><span class="comment">// 可以导出任何格式的内容：字符串  数字  函数  对象  数组 ...</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&#x27;模块A&#x27;</span>,</span><br><span class="line">  attr: <span class="string">&#x27;属性&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> obj <span class="keyword">from</span> <span class="string">&#x27;./module-a&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// &#123;name: &quot;模块A&quot;, attr: &quot;属性&quot;&#125;</span></span><br></pre></td></tr></table></figure><ul><li><em>按需</em>导入与导出</li></ul><p><code>module-b.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模块B  按需导出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const a = 10</span></span><br><span class="line"><span class="comment">// const b = 20</span></span><br><span class="line"><span class="comment">// 默认导出，将来在导入的时候，a和b都会导入</span></span><br><span class="line"><span class="comment">// export default &#123;a,b&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按需导出</span></span><br><span class="line"><span class="comment">// 成员1</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">10</span></span><br><span class="line"><span class="comment">// 成员2</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">20</span></span><br></pre></td></tr></table></figure><p><code>main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按需导入</span></span><br><span class="line"><span class="keyword">import</span> &#123;a,b&#125; <span class="keyword">from</span> <span class="string">&#x27;./module-b&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(a,b)</span><br><span class="line"><span class="comment">// 按需导入（全部成员导入）</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> all <span class="keyword">from</span> <span class="string">&#x27;./module-b&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(all) <span class="comment">// 收集了所有成员的变量（对象）</span></span><br></pre></td></tr></table></figure><p>其他情况：</p><ul><li>默认导出和按需导出是可以共存的。</li></ul><p><code>module-c.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模块C  默认和按需可以共存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认成员</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&#x27;默认成员&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其他成员</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = &#123; </span><br><span class="line">  name: <span class="string">&#x27;其他成员a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = &#123; </span><br><span class="line">  name: <span class="string">&#x27;其他成员b&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认成员 其他成员  都想导入</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> cmodule <span class="keyword">from</span> <span class="string">&#x27;./module-c&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(cmodule) <span class="comment">//  收集了所有成员的变量（对象）包括default成员</span></span><br><span class="line"><span class="comment">// 只导入 默认成员  和  a成员</span></span><br><span class="line"><span class="comment">// 如果成员的变量名和其他的变量名冲突，可以取别名  a as 别名（使用它作为变量名称）</span></span><br><span class="line"><span class="keyword">import</span> def,&#123;a <span class="keyword">as</span> myA&#125; <span class="keyword">from</span> <span class="string">&#x27;./module-c&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(def,myA)</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>ES6的模块化，浏览器暂时不支持。</li><li>NODEJS中10版本支持，在vue-cli（webpack）的项目中支持（对ES6的模块化进行解析去兼容浏览器）</li></ul><h3 id="21-vue-cli-单文件组件"><a href="#21-vue-cli-单文件组件" class="headerlink" title="21-vue-cli-单文件组件"></a>21-vue-cli-单文件组件</h3><p>以前定义组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局注册组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;com-a&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">// 组件配置对象</span></span><br><span class="line">  template: <span class="string">&#x27;&lt;div&gt;组件结构&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// 局部注册组件</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">&#x27;com-b&#x27;</span>: &#123;</span><br><span class="line">      <span class="comment">// 组件配置对象</span></span><br><span class="line">      template: <span class="string">&#x27;&lt;div&gt;组件结构&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>不够是何种注册方式，每个组件必须有一个组件配置化对象。</p><p>现在定义组件：在vue-cli中</p><ul><li>以 .vue 文件的方式来定义组件，文件的内容代表的是：<strong>组件配置对象</strong>。</li><li>需要渲染这个组件<ul><li>使用这个配置对象进行 全局注册 或者 局部注册，再来使用。</li><li>使用路由规则中的 component 选项指定路由配置对象。</li></ul></li><li>称为：单文件组件</li></ul><p>.vue文件的格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 相对于组件配置对象中 template 选项，声明组件结构。</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>必须有一个root（根）标签 &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">// 如果有其他的配置选项，需要默认导出一个对象，在对象中声明其他配置选项</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 其他组件配置对象</span></span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      msg: <span class="string">&#x27;单文件组件数据&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">// 当前组件需要样式</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.red</span>&#123;</span></span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用这种方式定义组件，结构 逻辑 样式 分工明确，非常清晰，便于维护。</p><ul><li>style中scoped属性作用：限制样式在当前组件下生效。</li></ul><h2 id="VUE（扩展）"><a href="#VUE（扩展）" class="headerlink" title="VUE（扩展）"></a>VUE（扩展）</h2><h3 id="01-vue扩展-生命周期"><a href="#01-vue扩展-生命周期" class="headerlink" title="01-vue扩展-生命周期"></a>01-vue扩展-生命周期</h3><p>生命周期：</p><ul><li>指的是一个vue实例，从创建到销毁的过程。</li><li>在生命过程中，每到一个时间点，vue会触发某个函数，回调函数，生命周期钩子函数。</li></ul><p>画图理解：</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/fSBsyRD/1587182354592.png" alt="1587182354592"></p><p>官方的图：</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/ZTkQSmL/lifecycle.png" alt="1587182354592"></p><p>总结：</p><ul><li>created()  组件初始化完毕<ul><li>获取数据</li></ul></li><li>mounted()  模板渲染完毕<ul><li>操作dom</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">ref</span>=<span class="string">&quot;dom&quot;</span>&gt;</span>我就是一个dom<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    created () &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;组件初始化&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.dom)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// created 中获取不到DOM</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;模板渲染完毕&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.dom)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// mounted 才可以获取dom</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="02-vue扩展-动画"><a href="#02-vue扩展-动画" class="headerlink" title="02-vue扩展-动画"></a>02-vue扩展-动画</h3><p>如果你想实现较为复杂的动画，你还是需要使用transition或者animation自定义动画。</p><p>如果你想通过vue实现动画，它提供了进入和离开时候动画实现，说白了就是一个进场动画，离场动画的实现。在说白一些，提供了 创建显示元素或组件，移除隐藏元素或组件，过程中的动画。</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/NCNVxvw/1587190959032.png" alt="1587190959032"></p><p>显示/创建（元素|组件）</p><ul><li>v-enter  进入前</li><li>v-enter-active 进入中</li><li>v-enter-to 进入后</li></ul><p>隐藏/移除（元素|组件）</p><ul><li>v-leave 离开前</li><li>v-leave-active 离开中</li><li>v-leave-to 离开后</li></ul><p>你可以在不同阶段，改变元素或组件的样式属性，然后添加过滤效果，即可实现动画。</p><p>1、单个元素实现进入和离开动画：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow=!isShow&quot;</span>&gt;</span>切换元素的淡入和淡出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 实现进入和离开动画需要加上一个transition组件，包裹需要实现动画的元素|组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data () &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        isShow: <span class="literal">true</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 根据vue提供的6个状态，定义不同状态的样式即可 */</span></span><br><span class="line"><span class="comment">/* .v-enter&#123;</span></span><br><span class="line"><span class="comment">  opacity: 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">.v-enter-active&#123;</span></span><br><span class="line"><span class="comment">  transition: all 2s;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">.v-enter-to&#123;</span></span><br><span class="line"><span class="comment">  opacity: 1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">.v-leave&#123;</span></span><br><span class="line"><span class="comment">  opacity: 1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">.v-leave-active&#123;</span></span><br><span class="line"><span class="comment">  transition: all 2s;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">.v-leave-to&#123;</span></span><br><span class="line"><span class="comment">  opacity: 0;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="selector-class">.v-enter</span>,<span class="selector-class">.v-leave-to</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-enter-active</span>,<span class="selector-class">.v-leave-active</span>&#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、多个元素做动画，需要给每个动画取名字。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isOpen=!isOpen&quot;</span>&gt;</span>切换元素的展开与收起<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isOpen&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data () &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        isOpen: <span class="literal">true</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/* 类的前缀，和transition标签的name属性有关 */</span></span><br><span class="line"><span class="selector-class">.box2-enter</span>,<span class="selector-class">.box2-leave-to</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2-enter-active</span>,<span class="selector-class">.box2-leave-active</span>&#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、列表做动画。（v-for遍历元素的进入和离开动画）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    ul&#123;</span><br><span class="line">      list-style: none;</span><br><span class="line">    &#125;</span><br><span class="line">    ul li &#123;</span><br><span class="line">      width: 500px;</span><br><span class="line">      height: 30px;</span><br><span class="line">      line-height: 30px;</span><br><span class="line">      padding: 0 10px;</span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">dashed</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-id">#eee</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.li-enter</span>,<span class="selector-class">.li-leave-to</span>&#123;</span></span><br><span class="line">      opacity: 0;</span><br><span class="line">      transform: translateY(200px);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.li-enter-active</span>,<span class="selector-class">.li-leave-active</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 1<span class="selector-class">.5s</span>;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 移除的元素，不能占位 */</span></span></span><br><span class="line">      position: absolute;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/* 元素移除的过程，下一个元素会移动，动画可以实现 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.li-move</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 1<span class="selector-class">.5s</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果是列表动画 需要是 transition-group 组件包裹 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- tag=&quot;ul&quot; 解析成ul标签 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name=&quot;li&quot; 控制动画的六个类名以li开头，不是默认的v开头 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">tag</span>=<span class="string">&quot;ul&quot;</span> <span class="attr">name</span>=<span class="string">&quot;li&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;del(item.id)&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data () &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">          list: [</span><br><span class="line"><span class="javascript">            &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;周杰伦&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&#x27;周生生&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">&#x27;周大福&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">id</span>:<span class="number">4</span>,<span class="attr">name</span>:<span class="string">&#x27;周某某&#x27;</span>&#125;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// 删除</span></span></span><br><span class="line">        del (id) &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> index = <span class="built_in">this</span>.list.findIndex(<span class="function"><span class="params">item</span>=&gt;</span>item.id===id)</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.list.splice(index,<span class="number">1</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="03-vue扩展-插槽"><a href="#03-vue扩展-插槽" class="headerlink" title="03-vue扩展-插槽"></a>03-vue扩展-插槽</h3><p>组件作用，高度复用，相互独立，可维护性高。以前的高度复用体现，对业务逻辑的封装。</p><p>组件的插槽，提供的是界面上高度复用。</p><p>举个栗子：</p><ul><li>有一个页面，头，内容，底 三块，我有若干个相同的页面，封装成一个组件。</li><li>但是，并不是每一个页面完全相同，内容肯定会不同，所以采用一个组件封装页面有问题。</li></ul><p>使用插槽：</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/MgyLKJj/1587195548138.png" alt="1587195548138"></p><p>代码演示：</p><ul><li>默认插槽（组件只有一处内容不固定）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 组件标签之间的内容，插入定义组件的slot标签位置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">page</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">page</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">page</span>&gt;</span>内容3<span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 组件</span></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;page&#x27;</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">header</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="comment">&lt;!-- 默认插槽 --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">footer</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>具名插槽（如果组件中有多处内容不固定）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.page</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">      width: 200px;</span><br><span class="line">      margin-bottom: 10px;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 组件标签之间的内容，插入定义组件的slot标签位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">page</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- slot=&quot;插槽的名字&quot; 把当前标签内的结构插入到名字为content的插槽中 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>底部1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">page</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 组件</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;page&#x27;</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">      template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">header</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">section</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="comment">&lt;!-- 具名插槽 --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="comment">&lt;!-- 具名插槽 --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="04-vue扩展-混入"><a href="#04-vue扩展-混入" class="headerlink" title="04-vue扩展-混入"></a>04-vue扩展-混入</h3><p>**混入(mixin)**是一个概念，在 less 中拥有混入语法，在vue中页实现了混入。</p><p>less中的混入：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 复用某个类的样式，或者某个函数的样式。</span></span><br><span class="line"><span class="selector-class">.red</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bg</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#ccc</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 新类名，同时拥有上面两个类的样式，且拥有自己的样式</span></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="selector-class">.red</span>()</span><br><span class="line">  <span class="selector-class">.bg</span>()</span><br><span class="line">  <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">  <span class="selector-class">.bg</span>()</span><br><span class="line">  <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>混入作用：提取公用的代码，在组合新的功能，可以混入公用的代码，提高逻辑的复用。</p><p>vue混入：</p><ul><li>组件自行混入</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">com-a</span>&gt;</span><span class="tag">&lt;/<span class="name">com-a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">com-b</span>&gt;</span><span class="tag">&lt;/<span class="name">com-b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 待混入的对象</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> mixin = &#123;</span></span><br><span class="line">    mounted () &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 组件容器dom对象</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> dom = <span class="built_in">this</span>.$refs.dom</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取高度,赋值给height数据</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.height = dom.offsetHeight</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;com-a&#x27;</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;dom&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:100px&quot;</span>&gt;</span>组件A </span><span class="template-variable">&#123;&#123;<span class="name">height</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        height: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 获取组件的高度,显示在组件中</span></span></span><br><span class="line">    mixins: [mixin]</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;com-b&#x27;</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;dom&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:120px&quot;</span>&gt;</span>组件B </span><span class="template-variable">&#123;&#123;<span class="name">height</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        height: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 获取组件的高度,显示在组件中</span></span></span><br><span class="line">    mixins: [mixin]</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>全局混入</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dom&quot;</span>&gt;</span></span><br><span class="line">   &#123;&#123;msg&#125;&#125;</span><br><span class="line">   <span class="tag">&lt;<span class="name">com-a</span>&gt;</span><span class="tag">&lt;/<span class="name">com-a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">com-b</span>&gt;</span><span class="tag">&lt;/<span class="name">com-b</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="comment">// 给所有vue实例混入一段业务</span></span></span><br><span class="line">   Vue.mixin(&#123;</span><br><span class="line"><span class="javascript">     <span class="comment">// 全局混入的时候，关于dom操作，在mouted中遇到问题。</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">// 这样写，所有的组件和vue实例，都会混mounted,都需要dom的ref属性。</span></span></span><br><span class="line"><span class="javascript">     <span class="comment">// 但是其他的选项是可以混入的</span></span></span><br><span class="line">     mounted () &#123;</span><br><span class="line"><span class="javascript">       <span class="comment">// 组件容器dom对象</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">const</span> dom = <span class="built_in">this</span>.$refs.dom</span></span><br><span class="line"><span class="javascript">       <span class="comment">// 获取高度,赋值给height数据</span></span></span><br><span class="line"><span class="javascript">       <span class="built_in">this</span>.height = dom.offsetHeight</span></span><br><span class="line">     &#125;,</span><br><span class="line">     data () &#123;</span><br><span class="line"><span class="javascript">       <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">         msg: <span class="string">&#x27;混入数据&#x27;</span></span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line">       say () &#123;</span><br><span class="line"><span class="javascript">         <span class="keyword">return</span> <span class="string">&#x27;混入的函数&#x27;</span></span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"><span class="javascript">   Vue.component(<span class="string">&#x27;com-a&#x27;</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">     template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;dom&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:100px&quot;</span>&gt;</span>组件A </span><span class="template-variable">&#123;&#123;<span class="name">height</span>&#125;&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123;<span class="name">msg</span>&#125;&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123;<span class="name">say</span>()&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line">     data() &#123;</span><br><span class="line"><span class="javascript">       <span class="keyword">return</span> &#123;</span></span><br><span class="line">         height: 0</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line"><span class="javascript">     <span class="comment">// 获取组件的高度,显示在组件中</span></span></span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">   Vue.component(<span class="string">&#x27;com-b&#x27;</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">     template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;dom&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:120px&quot;</span>&gt;</span>组件B </span><span class="template-variable">&#123;&#123;<span class="name">height</span>&#125;&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123;<span class="name">msg</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line">     data() &#123;</span><br><span class="line"><span class="javascript">       <span class="keyword">return</span> &#123;</span></span><br><span class="line">         height: 0</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line"><span class="javascript">     <span class="comment">// 获取组件的高度,显示在组件中</span></span></span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">   <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">     el: <span class="string">&#x27;#app&#x27;</span></span></span><br><span class="line">   &#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="05-vue扩展-devtools"><a href="#05-vue扩展-devtools" class="headerlink" title="05-vue扩展-devtools"></a>05-vue扩展-devtools</h3><p>痛点：</p><ul><li>在使用组件的时候，不好调试，不能手动修改数据，也不能观察数据的变化。</li><li>以前通过vm接收vue实例，然后去操作数据，获取数据，来进行调试，很多情况无法使用全局变量去接收vue实例，然后控制台修改和观察。即使能去修改和观察也是很麻烦。</li><li>所以我们需要一个vue项目的调试工具。</li></ul><p>工具：</p><ul><li>vue-devtools  vue项目的开发者工具。</li></ul><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/0MKHqQK/1587199928560.png" alt="1587199928560"></p><p>安装：</p><ul><li><a href="https://chrome.google.com/webstore/category/extensions?hl=zh-CN">https://chrome.google.com/webstore/category/extensions?hl=zh-CN</a>  应用商店下载安装。</li><li>本地安装步骤：</li></ul><p>1、解压今天资料中的 vue-devtools.zip 文件，注意：解压到不动的目录。</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/G5qTzc0/1587200185657.png" alt="1587200185657"></p><p>2、进入浏览的扩展程序</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/7bbNWRq/1587200306943.png" alt="1587200306943"></p><p>3、打开开发者模式</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/cvNVzGS/1587200351512.png" alt="1587200351512"></p><p>4、加载已解压的扩展程序</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/2K16K9L/1587200470073.png" alt="1587200470073"></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git入门</title>
      <link href="/bubble/2020/09/12/Git/"/>
      <url>/bubble/2020/09/12/Git/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\bubble\css\APlayer.min.css"><script src="\bubble\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\bubble\js\Meting.min.js"></script><h1 id="Git-入门"><a href="#Git-入门" class="headerlink" title="Git 入门"></a>Git 入门</h1><p>Git的两个作用</p><ul><li>记录开发的历史，每次记录就是一个版本，而且可以回到历史的某个版本</li><li>可以实现多人合作开发</li></ul><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/5BsN5Kg/logo-2x.png" alt="Git"></p><h2 id="关于版本控制"><a href="#关于版本控制" class="headerlink" title="关于版本控制"></a>关于版本控制</h2><h3 id="什么是版本控制-管理"><a href="#什么是版本控制-管理" class="headerlink" title="什么是版本控制(管理)"></a>什么是版本控制(管理)</h3><p>​    实际开发中，比如有一个功能，或一个文件，今天写了一点，明天又写了一点，后天又写了一点。每天都要更新代码。但是到第三天，发现昨天的代码写错了，所以得将代码回退到第一天的状态，这个时候就不好办了，因为第二天改动的地方太多了。</p><p>​    这个时候，就需要将每天写的代码都做一个备份，当然备份可以复制粘贴，这样的话文件就会太多了，不建议使用；版本控制软件就是对每天的代码做备份的工具。</p><p>版本控制主要解决两个问题：</p><ul><li>历史记录，能够记录开发过程中的每一个版本，也能够在每个版本之间来回穿梭。</li><li>多人协作</li></ul><h3 id="本地版本控制系统"><a href="#本地版本控制系统" class="headerlink" title="本地版本控制系统"></a>本地版本控制系统</h3><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/rdS8HXF/1563803278509.png" alt="1563803278509"></p><h3 id="集中式"><a href="#集中式" class="headerlink" title="集中式"></a>集中式</h3><p>先说集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/gjSsc1Z/0-20190526233947050.jpg" alt="central-repo"></p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/SVcGFwz/centralized.png" alt="1563803841639"></p><p>集中式版本控制系统最大的毛病就是必须联网才能工作，如果在局域网内还好，带宽够大，速度够快，可如果在互联网上，遇到网速慢的话，可能提交一个10M的文件就需要5分钟，这还不得把人给憋死啊。</p><p>集中式版本管理的代表：</p><ul><li>SVN（Subversion）</li></ul><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><p>那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><p>和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。</p><p>在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/58QddY0/0-20190526234018814.jpg" alt="distributed-repo"></p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/t4BGsD7/distributed.png" alt="12"></p><p>当然，Git的优势不单是不必联网这么简单，后面我们还会看到Git极其强大的分支管理，把SVN等远远抛在了后面。</p><p>CVS作为最早的开源而且免费的集中式版本控制系统，直到现在还有不少人在用。由于CVS自身设计的问题，会造成提交文件不完整，版本库莫名其妙损坏的情况。同样是开源而且免费的SVN修正了CVS的一些稳定性问题，是目前用得最多的集中式版本库控制系统。</p><p>除了免费的外，还有收费的集中式版本控制系统，比如IBM的ClearCase（以前是Rational公司的，被IBM收购了），特点是安装比Windows还大，运行比蜗牛还慢，能用ClearCase的一般是世界500强，他们有个共同的特点是财大气粗，或者人傻钱多。</p><p>微软自己也有一个集中式版本控制系统叫VSS，集成在Visual Studio中。由于其反人类的设计，连微软自己都不好意思用了。</p><p>分布式版本控制系统除了Git以及促使Git诞生的BitKeeper外，还有类似Git的Mercurial和Bazaar等。这些分布式版本控制系统各有特点，但最快、最简单也最流行的依然是Git！</p><h2 id="Git-介绍"><a href="#Git-介绍" class="headerlink" title="Git 介绍"></a>Git 介绍</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><ul><li>分布式版本控制系统<ul><li>历史记录</li><li>多人协同</li></ul></li></ul><h3 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h3><p>很多人都知道，Linus 在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。</p><p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？</p><p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！</p><p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。</p><p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p><p>安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。</p><p>Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：</p><p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p><p>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</p><p>历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</p><h3 id="Git-作者"><a href="#Git-作者" class="headerlink" title="Git 作者"></a>Git 作者</h3><blockquote><p><a href="%5Bhttps://baike.baidu.com/item/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%9C%AC%E7%BA%B3%E7%AC%AC%E5%85%8B%E7%89%B9%C2%B7%E6%89%98%E7%93%A6%E5%85%B9%5D(https://baike.baidu.com/item/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%9C%AC%E7%BA%B3%E7%AC%AC%E5%85%8B%E7%89%B9%C2%B7%E6%89%98%E7%93%A6%E5%85%B9)">百度百科 - 林纳斯·本纳第克特·托瓦兹</a></p></blockquote><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/16JNzzs/5882b2b7d0a20cf4f664615276094b36adaf9943.png" alt="作者"></p><h3 id="资源连接"><a href="#资源连接" class="headerlink" title="资源连接"></a>资源连接</h3><ul><li><a href="https://git-scm.com/">Git 官网</a></li><li><a href="https://git-scm.com/docs">官方文档</a></li><li><a href="https://github.github.com/training-kit/downloads/github-git-cheat-sheet.pdf">GitHub Cheat Sheet</a></li><li><a href="http://ndpsoftware.com/git-cheatsheet.html">Visual Git Cheat Sheet</a></li><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600">一个国人写的Git 教程</a></li><li><strong><a href="https://git-scm.com/book/zh/v2">Pro Git</a></strong></li><li><a href="https://backlog.com/git-tutorial/cn/">猴子都能懂得 GIT 入门</a></li><li><a href="https://rogerdudler.github.io/git-guide/index.zh.html">git 简明指南</a></li><li>…</li></ul><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><ul><li>下载地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li><li>安装<ul><li>一路next安装即可。</li></ul></li></ul><blockquote><p>注：<code>$</code> 表示命令提示符，不需要输入它</p></blockquote><h3 id="初次使用Git软件之前的配置"><a href="#初次使用Git软件之前的配置" class="headerlink" title="初次使用Git软件之前的配置"></a>初次使用Git软件之前的配置</h3><blockquote><p>初次使用Git，会让我们配置用户的信息，配置方式如下：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --global 会将配置项保存到用户配置</span></span><br><span class="line">$ git config --global user.name <span class="string">&quot;xxx&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure><p><img src= "/bubble/img/loading.gif" data-lazy-src="Git.assets/1584673710375.png" alt="1584673710375"></p><blockquote><p>如果需要修改名字和邮箱，还是使用这两条命令即可。</p></blockquote><h3 id="Git初体验"><a href="#Git初体验" class="headerlink" title="Git初体验"></a>Git初体验</h3><p>Git可以完成代码的版本管理（git可以记录，我们每次写的代码是什么样的）</p><p><strong>一定要在项目文件夹</strong>，右键–&gt;Git Bash Here。执行后面的三个命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化，表示使用Git管理我们的项目。这个命令只需要执行一次</span></span><br><span class="line">git init </span><br><span class="line"><span class="comment"># 如果需要使用git记住当前代码的样子（即当前的版本）</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;提交说明&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 后续，如果继续更新了代码，并且也希望git记住更新后的代码版本，继续执行  git add . 和 git commit -m &#x27;提交说明&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Git三种区域及工作流程"><a href="#Git三种区域及工作流程" class="headerlink" title="Git三种区域及工作流程"></a>Git三种区域及工作流程</h3><ul><li>工作目录<ul><li>工作目录是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。磁盘上能够看到的文件</li></ul></li><li>暂存区域<ul><li>暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作`‘索引’’，不过一般说法还是叫暂存区域。</li></ul></li><li>Git 仓库<ul><li>Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。</li></ul></li></ul><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/8XWmnrt/1566700712829.png" alt="1566700712829"></p><blockquote><p>工作区新建的文件和Git没有任何关系；文件被添加到暂存区，才叫做被Git管理过</p><p>代码不能越过暂存区而直接从工作区提交到仓库区</p></blockquote><h2 id="Git-基础"><a href="#Git-基础" class="headerlink" title="Git 基础"></a>Git 基础</h2><h3 id="添加文件到暂存区"><a href="#添加文件到暂存区" class="headerlink" title="添加文件到暂存区"></a>添加文件到暂存区</h3><blockquote><p>[] 表示可选的</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以空格隔开可以一次 add 多个文件</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [dir] [file] [dir] [file] [file] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区，包括子目录</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="提交文件到仓库"><a href="#提交文件到仓库" class="headerlink" title="提交文件到仓库"></a>提交文件到仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区和暂存区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line"><span class="comment"># 注意：不包括未跟踪文件，即不包含没有被GIt管理过的文件</span></span><br><span class="line">$ git commit -a -m <span class="string">&quot;提交日志&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/bQ5YTSd/1584686285940.png" alt="1584686285940"></p><h3 id="文件的状态"><a href="#文件的状态" class="headerlink" title="文件的状态"></a>文件的状态</h3><p>执行 <code>git status</code> 命令，可以查看到文件的状态</p><ul><li>未跟踪</li><li>已暂存</li><li>已修改</li><li>已提交（没有提示）</li></ul><p><strong>未跟踪（Untracked files）</strong>，表示还没有被 Git 管理过，既没有进入过暂存区，更没有进入过仓库区。</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/crwpQdG/1566700991061.png" alt="1566700991061"></p><p><strong>已暂存（staged）</strong>，表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/sQ0KmvK/1566701129660.png" alt="1566701129660"></p><p>已修改（modified），文件被添加到暂存区，但是没有提交到仓库，然后在工作区对文件进行了修改。</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/0hyppgN/1566701786300.png" alt="1566701786300"></p><p>已提交（committed），表示数据已经安全的保存在本地数据库中。</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/0hFvstK/1563869484112.png" alt="1563869484112"></p><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最好用的是 gitk</span></span><br><span class="line">$ gitk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简略查看历史版本</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/kqFjyvK/1566705494327.png" alt="1566705494327"></p><h3 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit版本号] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次 commit 保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/bubble/img/loading.gif" data-lazy-src="Git.assets/1584686261644.png" alt="1584686261644"></p><h3 id="历史穿梭"><a href="#历史穿梭" class="headerlink" title="历史穿梭"></a>历史穿梭</h3><ul><li><p>想要回退到历史的某个版本，可以使用 <code>git checkout 版本号</code></p></li><li><p>回到历史的某个版本之后，需要使用 <code>git reflog --oneline</code> 查看所有的版本</p></li><li><p>如果向回到最后的一次提交状态，可以使用最后的版本号，也可以使用 <code>git checkout master</code></p></li></ul><blockquote><p>回到历史，千万不要修改。如果修改了，则需要重新提交，当然了，提交之后，后续的其他版本全部会被覆盖。</p></blockquote><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>实际开发中，使用Git管理的代码已经上线了，已经投入使用了；但是还要增加一些功能，我们是在原有的基础上直接修改代码吗？肯定不是，原因很简单，一旦该错了，也许会造成非常大的损失；</p><p>这个时候，我们就需要为原来的代码创建一个副本，在这个副本上增加新功能，这个副本就是分支。当新功能测试后没有bug了，再将副本的代码（分支）合并到主分支上。</p><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。 在很多版本控制系统中，这是一个略微低效的过程——常常需要完全创建一个源代码目录的副本。对于大项目来说，这样的过程会耗费很多时间。</p><p>有人把 Git 的分支模型称为它的`‘必杀技特性’’，也正因为这一特性，使得 Git 从众多版本控制系统中脱颖而出。 为何 Git 的分支模型如此出众呢？ Git 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。 与许多其它版本控制系统不同，Git 鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次。 理解和精通这一特性，你便会意识到 Git 是如此的强大而又独特，并且从此真正改变你的开发方式。</p><h3 id="分支的新建与合并"><a href="#分支的新建与合并" class="headerlink" title="分支的新建与合并"></a>分支的新建与合并</h3><p>你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即 <code>master</code> 分支。</p><p><code>HEAD</code> 可以理解为一个指针，指针指向哪里，就表示当前正在这里开发。所以，<code>HEAD</code> 指向的就是当前分支。</p><p>一开始的时候，<code>master</code>分支是一条线，Git 用 <code>master</code> 指向最新的提交，再用 <code>HEAD</code> 指向 <code>master</code>，就能确定当前分支，以及当前分支的提交点：</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/5FHtR4K/0-1560036977779.png" alt="git-br-initial"></p><p>每次提交，<code>master</code> 分支都会向前移动一步，这样，随着你不断提交，<code>master</code> 分支的线也越来越长。</p><p>当我们创建新的分支，例如 <code>dev</code> 时，Git 新建了一个指针叫 <code>dev</code>，指向 <code>master</code> 相同的提交，再把 <code>HEAD</code> 指向 <code>dev</code>，就表示当前分支在 <code>dev</code> 上：</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/KwpVcmv/0-1560036977789.png" alt="git-br-create"></p><p>你看，Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p><p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/cLrgnBY/0-1560036977801.png" alt="git-br-dev-fd"></p><p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/LvbWyXt/0-1560036977763.png" alt="git-br-ff-merge"></p><p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p><p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/Ytfc41H/0-1560036977771.png" alt="git-br-rm"></p><p>真是太神奇了，你看得出来有些提交是通过分支完成的吗？</p><p>下面开始实战。</p><p>首先，我们创建<code>dev</code>分支，然后切换到<code>dev</code>分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个分支，名字叫做dev</span></span><br><span class="line">$ git branch dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支命令；切换到dev分支上</span></span><br><span class="line">$ git checkout dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用下面的命令，代替上面两个命令；下面的命令表示创建并切换分支到dev上</span></span><br><span class="line">$ git checkout -b dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以用 <code>git branch</code> 命令查看当前分支，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line"><span class="comment"># 会看到类似下面的结果，前面标注*的，表示当前分支</span></span><br><span class="line"><span class="comment"># * dev</span></span><br><span class="line"><span class="comment">#   master</span></span><br></pre></td></tr></table></figure><p><code>git branch</code> 命令会列出所有分支，当前分支前面会标一个<code>*</code>号。</p><p>然后，我们就可以在 <code>dev</code> 分支上进行开发了，比如增加或改动几个文件</p><p>然后提交</p><p>现在，<code>dev</code> 分支的工作完成，我们就可以切换回 <code>master</code> 分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure><p>我们把<code>dev</code>分支的工作成果合并到<code>master</code>分支上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge dev</span><br></pre></td></tr></table></figure><p><code>git merge</code>命令用于合并指定分支到当前分支。</p><p>合并完成后，就可以放心地删除<code>dev</code>分支了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d dev</span><br></pre></td></tr></table></figure><p>删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</p><p><strong>小结：</strong></p><p>Git鼓励大量使用分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建分支</span></span><br><span class="line">$ git branch &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">$ git checkout &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建+切换分支</span></span><br><span class="line">$ git checkout -b &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并某分支到当前分支</span></span><br><span class="line">$ git merge &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d &lt;name&gt;</span><br></pre></td></tr></table></figure><blockquote><ol><li>如果你想切换分支，需要把当前分支全部提交到仓库</li><li>如果把dev分支合并到master分支上，需要先切换到master分支</li><li>如果想删除dev分支，需要先离开这个分支</li></ol></blockquote><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><h4 id="快进模式合并"><a href="#快进模式合并" class="headerlink" title="快进模式合并"></a>快进模式合并</h4><p>如果 dev 分支包含 master 分支最新提交，那么当你合并 dev 到 master 的时候，会执行快进模式合并</p><p>快速模块就是直接指向最新提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要把dev分支合并到master主分支上，需要先切回master</span></span><br><span class="line">$ git checkout master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行下面的命令，将dev分支合并到master上</span></span><br><span class="line">$ git merge dev</span><br></pre></td></tr></table></figure><h4 id="合并模式提交"><a href="#合并模式提交" class="headerlink" title="合并模式提交"></a>合并模式提交</h4><p>如果两个分支都进行了新的提交，那么在合并的时候就执行合并模式，Git 会自动将两个分支的不同提交的改动尝试自动合并，如果合并的过程没有冲突，则直接进入 bi 编辑模式让你输入提交日志完成合并提交。</p><p>合并模式会生成一次新的提交记录。</p><p>合并的时候，如果出现下面的画面：</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/ZzD1Nxh/1563873852307.png" alt="1563873852307"></p><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>人生不如意之事十之八九，合并分支往往也不是一帆风顺的。</p><p>如果在合并分支的时候，产生了冲突，则需要解决冲突</p><p>如果产生冲突，会在合并代码的时候，给出提示：</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/yg1ZqqT/1563853287184.png" alt="1563853287184"></p><p>当前显示aa.js有冲突，在代码中，会看到：</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/vZy3TSs/1563874529679.png" alt="1563874529679"></p><p>把写master分支和dev分支的两个程序员叫到一起，一起研究并解决冲突。比如经过两个程序员的讨论，决定两个改动都保留，则删除提示：</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/g9pfN7g/1563874667997.png" alt="1563874667997"></p><p>最后回到命令行窗口，执行add和commit提交即可。</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/cytTwhy/1563853529228.png" alt="1563853529228"></p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>目前，我们的操作都是一个人开发，如果涉及到多人开发呢？大家的代码如何合并到一起呢？这个时候就需要公网上的一台服务器了，大家可以把代码提交到这台服务器上，也可以从服务器上拉取所有的代码。这个公网上的服务器就叫做远程仓库。</p><p>完全可以自己搭建一台运行Git的服务器，不过现阶段，为了学Git先搭个服务器绝对是小题大作。好在这个世界上有个叫 <a href="https://github.com/">GitHub</a> 的神奇的网站，从名字就可以看出，这个网站就是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。</p><p>实际上，除了GitHib，还有很多第三方远程仓库托管服务：</p><ul><li>GitHub（讲，但是这个网站很难打开）</li><li>码云（gitee）（明天，打开速度快）</li><li>coding</li><li>Gitlab<ul><li>一个开源的类似于 GitHub 的 Git 仓库托管服务</li><li>支持自行搭建</li></ul></li></ul><h3 id="创建GitHub账号"><a href="#创建GitHub账号" class="headerlink" title="创建GitHub账号"></a>创建GitHub账号</h3><p>打开github.com网站，自行注册账号即可。</p><p>注册后，会给你注册的邮箱发送一个验证的邮件（这个邮件一般会当做垃圾邮件，也可能不是垃圾邮件），我们需要进入邮箱进行验证，验证通过即可使用该账号了。</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="将本地仓库放到线上"><a href="#将本地仓库放到线上" class="headerlink" title="将本地仓库放到线上"></a>将本地仓库放到线上</h4><p>开发都是在本地开发，当做好一个功能后，我们就需要将本地代码推送到远程仓库</p><ol><li><p>在GitHub远程创建一个新的仓库</p><p> <img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/JHkkpft/1563854559890.png" alt="1563854559890"></p></li></ol><pre><code>填写信息并创建仓库。![1563854825144](https://i.ibb.co/TH3vzdX/1563854825144.png)</code></pre><ol start="2"><li><p>在本地仓库下执行命令进行推送，将本地仓库的代码推送到远程</p><ul><li>创建远程仓库的时候，先不要勾选README</li></ul></li></ol><h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><p>在本地命令行，执行下面的命令，可以生成SSH秘钥（包含一个公钥一个私钥）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱地址&quot;</span></span><br><span class="line"><span class="comment"># 执行完这个命令之后，后面有一些询问，我们直接一路回车即可</span></span><br></pre></td></tr></table></figure><p>最后生成的秘钥在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Windows：</span><br><span class="line">C:\Users\GaoWei\.ssh   &#x2F;&#x2F;  Users--用户   GaoWei--我的计算机用户名</span><br><span class="line"></span><br><span class="line">mac：</span><br><span class="line">你的用户名那个文件夹中。 按shift+Commend+.  可以显示隐藏文件，然后就可以看到 .ssh文件夹了</span><br></pre></td></tr></table></figure><p>找到 <code>.ssh/id_rsa.pub</code>，用vscode打开，复制里面全部的内容，配置到远程仓库</p><ul><li>GitHub右上角的三角号</li><li>Settings</li><li>左侧有 SSH and GPG keys</li><li>在显示的界面中，点击右上角的 New SSH key，然后完成添加公钥操作</li></ul><h3 id="如何推送本地仓库的代码到远程仓库"><a href="#如何推送本地仓库的代码到远程仓库" class="headerlink" title="如何推送本地仓库的代码到远程仓库"></a>如何推送本地仓库的代码到远程仓库</h3><p>在本地仓库中，执行 下面的命令即可把代码推送到远程仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加远程关联到本地</span></span><br><span class="line">git remote add origin git@github.com:Laotang-123/96.git</span><br><span class="line"><span class="comment"># push推。 把本地的master分支，推送到origin表示的那个地址</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>后续，如果需要再次推送，直接执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础(一)</title>
      <link href="/bubble/2020/09/12/vuejs/"/>
      <url>/bubble/2020/09/12/vuejs/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\bubble\css\APlayer.min.css"><script src="\bubble\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\bubble\js\Meting.min.js"></script><h2 id="VUE基础"><a href="#VUE基础" class="headerlink" title="VUE基础"></a>VUE基础</h2><h3 id="01-介绍-vue是什么"><a href="#01-介绍-vue是什么" class="headerlink" title="01-介绍-vue是什么"></a>01-介绍-vue是什么</h3><blockquote><p>目标：了解vue的一些基础概念。</p></blockquote><p>官方网站： <a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a> </p><p>官方介绍：渐进式javascript框架。</p><p>小概念：</p><ul><li>库<ul><li>jquery 是一个js库</li><li>只提供一些API给开发者使用</li></ul></li><li>UI框架<ul><li>bootstrap  layui  layer  是UI框架 </li><li>包含 js html css 主要实现了一套支撑网站开发的常用控件（对话框，弹出框，tab页签…）</li></ul></li><li>JS框架<ul><li><strong>vue</strong>  react  angluar 是JS框架</li><li>纯js编写，提供了开发网站功能的标准（<strong>规则</strong>），约定开发规则，通过这些规则组织你的功能代码。</li></ul></li></ul><p>我们理解：vue就是一个js框架。</p><h3 id="02-介绍-vue做什么"><a href="#02-介绍-vue做什么" class="headerlink" title="02-介绍-vue做什么"></a>02-介绍-vue做什么</h3><blockquote><p>目标：知道我们学习vue的原因。</p></blockquote><p>vue框架适合做 SPA 类型的网站。</p><p>解释两种类型的网站：</p><ul><li>spa是单页面应用程序（所有网站功能在一个页面上实现），英文：single page application<ul><li>在访问网站的第一个场景，就加载了所有的资源<ul><li>缺点：首屏加载过慢</li></ul></li><li>在切换场景的时候不需要再加载资源，切换场景比较流畅。</li></ul></li><li>传统类型网站：切换业务场景是通过<strong>页面跳转</strong>来实现的，弊端：场景切换速度比较慢，依赖网络。</li></ul><p>为什么？</p><ul><li>由于单页面应用程序，所有的业务逻辑在一个页面上实现，逻辑复杂度非常高。</li><li>我们需要一个框架来组织维护业务功能代码，这个框架就是vue</li></ul><h3 id="03-介绍-vue的核心"><a href="#03-介绍-vue的核心" class="headerlink" title="03-介绍-vue的核心"></a>03-介绍-vue的核心</h3><blockquote><p>目标：了解vue的核心功能。</p></blockquote><p>vue提供了那些功能，让我们开发网站更加方便，让我们维护业务功能更加方便。</p><p>数据驱动视图</p><ul><li>在vue中，通过修改数据，即可更新视图（页面），大大解放了操作dom的时间，把精力放在业务上。</li></ul><p>双向数据绑定</p><ul><li>vue是一个典型的 MVVM 思想的框架</li><li>M 是数据模型  model</li><li>V 是视图（界面）view</li><li>VM 是控制数据模型和视图的管理者</li><li>概念：数据可以影响视图变化，视图变化也会影响数据变化。</li></ul><p>组件化开发</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/p1nNfdd/1586829827877.png" alt="1586483466717"></p><ul><li>把一个网站功能，分割若干个组件，相同类型的组件可复用，组件功能是独立的，可维护性高。</li></ul><h3 id="04-起步-安装vue"><a href="#04-起步-安装vue" class="headerlink" title="04-起步-安装vue"></a>04-起步-安装vue</h3><blockquote><p>目标：知道怎么去安装vue的几种方式。</p></blockquote><p>不同的阶段使用不同的安装下载方式:</p><p>基础阶段：使用script标签引入</p><ul><li>本地方式<ul><li>下载：<a href="https://cn.vuejs.org/js/vue.js">https://cn.vuejs.org/js/vue.js</a></li><li>引入：<code>&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</code></li></ul></li><li>cdn方式<ul><li>引入：<code> &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; </code></li></ul></li></ul><p>项目阶段：npm的方式</p><ul><li>安装 <code>npm i vue</code></li><li>导入后使用即可</li></ul><p>总结：在基础学习阶段，使用本地下载引入的方式。</p><h3 id="05-起步-体验vue"><a href="#05-起步-体验vue" class="headerlink" title="05-起步-体验vue"></a>05-起步-体验vue</h3><blockquote><p>目标：能够自己独立的完成第一个vue程序。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 2. 视图 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入VUE核心js文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 功能代码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 需要把数据渲染到页面上</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 页面上输入的内容，收集到数据中</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 控制数据模型和视图管理者</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 1. 数据模型</span></span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        msg: <span class="string">&#x27;hi vue&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>把上面的代码，可以拆分成，M + V + VM 结构。</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/QH8b5vH/1586485671266.png" alt="1586485671266"></p><h3 id="06-★选项-el"><a href="#06-★选项-el" class="headerlink" title="06-★选项-el"></a>06-★选项-el</h3><blockquote><p>目标：知道vue选项中el选项的使用方法和注意事项。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  &#123;&#123;msg&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line">    <span class="comment">&lt;!-- 被管理的容器才可以使用vue提供的功能 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 初始化vue实例，vue实例就是vm的意思</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 初始化的配置对象，里面有很多选项</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// el === element 元素，标签，容器</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// el指定当前vue实例管理的容器是谁。</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 值是：选择器 | dom元素</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// el: document.querySelector(&#x27;#app&#x27;),</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      // Do not mount Vue to <span class="tag">&lt;<span class="name">html</span>&gt;</span> or <span class="tag">&lt;<span class="name">body</span>&gt;</span> - mount to normal elements instead.</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// el不能指定 html 和 body 容器</span></span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;body&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        msg: <span class="string">&#x27;hi vue&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>el选项：</p><ul><li>作用是：指定vue实例管理的容器</li><li>可以使用 选择器或者dom元素来指定</li><li>注意：不能指定 html body 容器</li></ul><h3 id="07-★选项-data"><a href="#07-★选项-data" class="headerlink" title="07-★选项-data"></a>07-★选项-data</h3><blockquote><p>目标：知道vue选项中data选项的使用方法和注意事项。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模板中直接使用数据的名称即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 在全局环境下，在浏览器的控制台就可以直接访问vm，通过vm可以修改数据，演示数据驱动视图更新</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 在配置选项中声明的data数据，在vue初始化的时候，挂载在vue实例上的数据名称：$data，所以访问数据：vm.$data</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 通过 vm.$data.msg = 123  即可修改数据，也看到了驱动视图更新。</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 访问data中的数据，需要通过 vm.$data 才能访问到，略微有些麻烦</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 所以：vue实例代理了$data中的数据，直接通过vm就可以操作和访问数据。vm.msg = 123</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// data作用：声明数据，提供给vue实例使用，vue实例管理的视图也可以使用</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// data当中声明的数据：具备响应式功能（当数据变化的时候，驱动使用该数据的视图进行更新）</span></span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        msg: <span class="string">&#x27;hi vue&#x27;</span>,</span></span><br><span class="line">        user: &#123;</span><br><span class="line"><span class="javascript">          <span class="comment">// 有用户名称 name 字段名称</span></span></span><br><span class="line"><span class="javascript">          name: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>// 总结：// 1. 通过实例可以直接访问data中的数据 vm.msg，在模板中使用数据的字段名称即可。&#123;&#123;msg&#125;&#125;// 2. 在data中显性声明的数据，都是响应式数据，可以数据驱动视图。// 3. 注意：在模板中使用的数据，建议在data中提前声明，即使没有值也需要声明。</code></pre><h3 id="08-★选项-methods"><a href="#08-★选项-methods" class="headerlink" title="08-★选项-methods"></a>08-★选项-methods</h3><blockquote><p>目标：知道vue选项中methods选项的使用方法和注意事项。</p></blockquote><p>methods选项作用：</p><ol><li>为vue实例提供自定义函数的，大白话：自己的业务函数书写位置</li><li>可以被 vue实例直接调用，且函数的this指向就是vue实例，就是vm</li><li>也可以在vue实例管理的模板（管理的容器|视图）当中使用这些函数</li><li>书写函数有很多方式，在vue中适合哪种方式？ 建议：属性简写</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;say()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;say2()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;say3()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        msg: <span class="string">&#x27;hi vue&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="comment">// methods选项，定义函数的位置，它指定对象</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 可以定义多个函数，属性对应函数。</span></span></span><br><span class="line">      methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// vue实例可以调用这个函数 vm.say()</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 在模板但是也可以使用这个函数，直接使用函数名称调用即可 say()，函数的返回值会输出在视图中</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 在函数中的 this 就是vue实例，也就是vm，所以就可以访问数据</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 写法1：传统写法</span></span></span><br><span class="line"><span class="javascript">        say: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;ok&#x27;</span>)</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="string">&#x27;你好&#x27;</span> + <span class="built_in">this</span>.msg</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 写法2: 属性简写</span></span></span><br><span class="line">        say2 () &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="string">&#x27;你好2&#x27;</span> + <span class="built_in">this</span>.msg</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 写法3：箭头函数</span></span></span><br><span class="line"><span class="javascript">        say3: <span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 箭头函数没有this,也就是访问不到vue实例，操作不了数据。</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 建议：在methods中尽量不使用箭头函数，因为经常会使用vue实例</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="string">&#x27;你好3&#x27;</span> + <span class="built_in">this</span>.msg</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>写函数的地方，给vue实例使用，给模板使用，不建议写箭头函数，属性简写比较合适。</li></ul><h3 id="09-术语-插值表达式"><a href="#09-术语-插值表达式" class="headerlink" title="09-术语-插值表达式"></a>09-术语-插值表达式</h3><blockquote><p>目标：了解vue术语插值表达式是什么和使用场景。</p></blockquote><p>在vue中<code>&#123;&#123;  &#125;&#125;</code>语法，叫做：插值表达式，大白话就是输出值得语法。</p><p>在插值表达式中可以写：</p><ul><li>写data数据字段名称</li><li>写methods函数的名称，进行调用</li><li>任意js表达式<ul><li>加减运算</li><li>三元运算</li><li>…</li></ul></li><li>但是不能写js语句<ul><li>声明变量</li><li>分支</li><li>循环</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用函数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fn()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用js表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;1+count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;count&gt;10?&#x27;大&#x27;:&#x27;小&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 不能使用js语句 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; if (true)&#123;&#125; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;var a = 10&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        msg: <span class="string">&#x27;hi vue&#x27;</span>,</span></span><br><span class="line">        count: 9</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        fn () &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="string">&#x27;函数的数据&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-术语-指令"><a href="#10-术语-指令" class="headerlink" title="10-术语-指令"></a>10-术语-指令</h3><blockquote><p>目标：了解vue术语指令是什么和使用场景。</p></blockquote><p>指令（directive）,其实就是一个以v-开头的标签属性，例如：<code>v-model</code> 双向绑定指令。</p><p>vue提供了一些指令，这些指令都是以v-开头，他们可以扩展标签的原有功能。这些指令的值，可以是js表达式，当关联js表达式依赖的数据发生变化，对应的指令就会产生作用。</p><p>扩展功能：</p><ul><li>输入框双向绑定</li><li>标签的显示隐藏</li><li>标签显示的内容</li><li>…</li></ul><p>总结：</p><ul><li>vue提供的v-开头的属性就是指令，扩展标签原有的功能。加上这个指令后，就可以实现某些功能。</li></ul><h3 id="11-指令-v-text和v-html"><a href="#11-指令-v-text和v-html" class="headerlink" title="11-指令-v-text和v-html"></a>11-指令-v-text和v-html</h3><blockquote><p>目标：能够使用v-text和v-html去更新标签内容。</p></blockquote><p>这组指令作用：</p><ul><li>更新标签的内容</li><li>根据数据进行更新</li></ul><p>具体的作用：</p><ul><li>v-text 更新标签的内容，格式是文本，和 innerText 相似。</li><li>v-html 更新标签的内容，格式是html，和 innerHTML 相似。</li></ul><p>在代码中体验：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 当你局部更新标签内的文本，使用插值表达式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>你好：&#123;&#123;strText&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 当你完整更新标签内的文本，使用v-text，同时存在的时候v-text生效--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 动态渲染文本内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;strText&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 动态渲染html内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;strText&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      msg: <span class="string">&#x27;hi vue&#x27;</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">      strText: &#x27;<span class="tag">&lt;<span class="name">b</span>&gt;</span>我是文本<span class="tag">&lt;/<span class="name">b</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>v-text 更新 纯文本</li><li>v-html 更新  html内容</li></ul><h3 id="12-指令-v-show和v-if"><a href="#12-指令-v-show和v-if" class="headerlink" title="12-指令-v-show和v-if"></a>12-指令-v-show和v-if</h3><blockquote><p>目标：能够使用v-show和v-if去控制标签的显示隐藏。</p></blockquote><p>这对指令作用：</p><ul><li>控制元素的显示和隐藏<ul><li>让一个元素隐藏：display:none</li><li>让一个元素隐藏：移除这个元素</li></ul></li></ul><p>指令具体作用：</p><ul><li>v-show 元素的显示和隐藏，使用的是 display:none|block|…</li><li>v-if 元素的创建和移除。</li></ul><p>区分下使用场景：</p><ul><li>v-show 性能较好，对应需要频繁切换显示与隐藏的功能，可以使用v-show。</li><li>v-if 减少标签，状态切换次数少的时候，使用使用v-if</li></ul><p>通过代码体验下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指令 v-show --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 值：是布尔类型，如果是js表达式，就看js表达式的执行结果，是真还是假 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 如果是真 显示 反之隐藏 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>指令 v-show<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指令 v-if --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 值：是布尔类型，如果是js表达式，就看js表达式的执行结果，是真还是假 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 如果是真 创建 反之移除 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>指令 v-if<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      msg: <span class="string">&#x27;hi vue&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      isShow: <span class="literal">true</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>在切换状态频繁的时候建议使用v-show，其他情况使用 v-if</li></ul><h3 id="13-指令-v-on"><a href="#13-指令-v-on" class="headerlink" title="13-指令-v-on"></a>13-指令-v-on</h3><blockquote><p>目标：能够使用v-on去绑定事件。</p></blockquote><p>v-on指令的作用是：绑定事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click</span>=<span class="string">&quot;js表达式|一个methods中函数&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-on:事件名称=&quot;触发事件的时候的处理逻辑（js表达式|函数实现）&quot;</code></p><p>可以是@符号简写v-on指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;js表达式|一个methods中函数&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>@事件名称=&quot;触发事件的时候的处理逻辑（js表达式|函数实现）&quot;</code></p><p>如果绑定的是一个函数：事件处理函数</p><ul><li>函数普通写法</li><li>函数需要事件对象</li><li>函数需要时间对象又需要额外的参数</li></ul><p>通过代码来演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>我是一个容器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 点按钮隐藏上面div容器 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 1. 指令绑定事件后指定：js表达式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;isShow=false&quot;</span>&gt;</span>隐藏容器1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 2. 使用@可以简化v-on:的使用 一样是绑定事件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow=false&quot;</span>&gt;</span>隐藏容器2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 3. 指令绑定事件后指定：函数 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 3.1 如果处理函数不需要传参，你带不带括号效果一样 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;fn&quot;</span>&gt;</span>隐藏容器3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;fn()&quot;</span>&gt;</span>隐藏容器4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 3.2 如果处理函数中需要事件对象 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--     如果绑定事件的时候，函数不带扩号，触发函数的时候默认传入事件对象 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;fn2&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--     如果绑定事件的时候，函数带了扩号，需要自己传入事件对象，vue提供了一个 $event 的参数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;fn2($event)&quot;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 3.3 如果处理函数中需要事件对象以及其他传参 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;fn3($event, 10)&quot;</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      msg: <span class="string">&#x27;hi vue&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      isShow: <span class="literal">true</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      fn () &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// 当你需要处理复杂逻辑的时候，建议使用函数</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.isShow = <span class="literal">false</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      fn2 (e) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      fn3 (e, num) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e,num)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：绑定函数的时候带不带括号？</p><ul><li>如果你需要接受事件触发的默认传参，不带括号</li><li>如果你需要自己来进行传参，需要带括号，自己传实参</li><li>如果什么参数都不要，带不带无所谓</li></ul><h3 id="14-指令-v-for"><a href="#14-指令-v-for" class="headerlink" title="14-指令-v-for"></a>14-指令-v-for</h3><blockquote><p>目标：能够使用v-for去遍历标签。</p></blockquote><p>v-for作用是遍历标签（容器），需要依赖数据遍历。</p><p>数据类型：数组</p><p><code>v-for=&quot;遍历时每项数据变量名称 in data中数据&quot;</code></p><p><code>v-for=&quot;(遍历时每项数据变量名称,索引变量名称) in data中数据&quot;</code></p><p>数据类型：对象</p><p><code>v-for=&quot;(属性值,属性名,索引) in data中数据（对象）&quot;</code></p><p>提升性能书写习惯</p><ul><li><p>这个写法，在遍历的时候性能好一些，还有找到对应元素的时候性能好一些。</p><p><code>v-for=&quot;&quot; :key=&quot;指定的唯一标识&quot;</code></p></li><li><p>将来数据当中肯定会有类似ID的数据，建议使用ID。</p></li></ul><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 列表 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用v-for让li根据data中的arr数据进行遍历 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1. v-for=&quot;遍历时每项数据变量名称 in data中数据&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in arr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. v-for=&quot;(遍历时每项数据变量名称,索引变量名称) in data中数据&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,i) in arr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;---&gt;&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3. v-for=&quot;(属性值,属性名,索引) in data中数据（对象）&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(v,k,i) in obj&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;k&quot;</span>&gt;</span>&#123;&#123;v&#125;&#125;---&gt;&#123;&#123;k&#125;&#125;---&gt;&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      msg: <span class="string">&#x27;hi vue&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      arr: [<span class="string">&#x27;周杰伦&#x27;</span>,<span class="string">&#x27;林俊杰&#x27;</span>,<span class="string">&#x27;邓超&#x27;</span>],</span></span><br><span class="line">      obj: &#123;</span><br><span class="line"><span class="javascript">        name: <span class="string">&#x27;朴树&#x27;</span>,</span></span><br><span class="line">        age: 40,</span><br><span class="line"><span class="javascript">        gender: <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>补充：</p><ul><li>将来大家可能看到另外一种遍历写法：<code>v-for=&quot;item of arr&quot;</code></li><li>在vue中以上写法和 <code>v-for=&quot;item in arr&quot;</code> 作用是一致的。</li></ul><h3 id="15-指令-v-bind"><a href="#15-指令-v-bind" class="headerlink" title="15-指令-v-bind"></a>15-指令-v-bind</h3><blockquote><p>目标：能够使用v-bind去绑定属性的值。</p></blockquote><p>v-bind指令的作用：动态绑定标签上的属性的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;data数据&quot;</span>&gt;</span>元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>v-bind指令有简写用法 <code>:</code> 冒号</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:title</span>=<span class="string">&quot;data数据&quot;</span>&gt;</span>元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：使用v-bind后属性值会解析成js表达式|数据，如果没有绑定只会解析普通字符串。</p><p>演示代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;fn()&quot;</span>&gt;</span>修改title属性值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 1. 完整使用 v-bind 指令，完成修改属性的值 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span>元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 2. 简写写法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span>元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      msg: <span class="string">&#x27;hi vue&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      title: <span class="string">&#x27;我是提示&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      fn () &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.title = <span class="string">&#x27;修改提示&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在大家知道<code>:key=&quot;i&quot;</code> 是什么意思</p><ul><li>动态绑定 属性key 指定一个唯一标识，提高性能。</li></ul><h3 id="16-案例"><a href="#16-案例" class="headerlink" title="16-案例"></a>16-案例</h3><blockquote><p>串一串今天的知识。</p></blockquote><p>需求：</p><ul><li>根据数据渲染一个表格</li><li>每行拥有一个删除按钮，点击按钮删除当前行</li></ul><p>数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;id:1,brandName:&#39;宝马&#39;,createTime: &#39;2020-04-10&#39;&#125;,</span><br><span class="line">  &#123;id:2,brandName:&#39;奔驰&#39;,createTime: &#39;2020-06-10&#39;&#125;,</span><br><span class="line">  &#123;id:3,brandName:&#39;奥迪&#39;,createTime: &#39;2020-02-10&#39;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>表格：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered table-hover&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>品牌名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>创建时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>宝马<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2019-10-10<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>宝马<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2019-10-10<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>宝马<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2019-10-10<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现功能：</p><ul><li>渲染表格</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      list: [</span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">brandName</span>: <span class="string">&#x27;宝马&#x27;</span>, <span class="attr">createTime</span>: <span class="string">&#x27;2020-04-10&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">brandName</span>: <span class="string">&#x27;奔驰&#x27;</span>, <span class="attr">createTime</span>: <span class="string">&#x27;2020-06-10&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">brandName</span>: <span class="string">&#x27;奥迪&#x27;</span>, <span class="attr">createTime</span>: <span class="string">&#x27;2020-02-10&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">brandName</span>: <span class="string">&#x27;马自达&#x27;</span>, <span class="attr">createTime</span>: <span class="string">&#x27;2020-02-10&#x27;</span> &#125;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.brandName&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.createTime&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>删除功能</li></ul><p>给A按钮绑定点击事件，但是触发事件的时候，还触发了A按钮的默认跳转行为。</p><ul><li>触发事件的时候，阻止默认行为。<ul><li>以前实现：<code>e.preventDefault()</code></li><li>vue实现：<code>@click.prevent</code>   此时的prevent叫：事件修饰符</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,i) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;del(i)&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  del (index) &#123;</span><br><span class="line">    <span class="comment">// 思维：凡是视图的更新，通过数据去驱动。</span></span><br><span class="line">    <span class="comment">// 实现：得到点击的当前行的索引，根据索引移除数组中对应的数据即可。</span></span><br><span class="line">    <span class="built_in">this</span>.list.splice(index, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17-指令-v-bind绑定class"><a href="#17-指令-v-bind绑定class" class="headerlink" title="17-指令-v-bind绑定class"></a>17-指令-v-bind绑定class</h3><blockquote><p>目标：知道通过vue怎么去操作类，也就是class属性的值。</p></blockquote><p>动态绑定class属性，有两种方式：</p><ul><li>绑定对象</li><li>绑定数组</li></ul><p>v-bind绑定class的时候，使用对象数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 写死  :class=&quot;&#123;类名:是否加这个类名,类名1:是否加这个类名1&#125;&quot; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 动态  需要把对象声明在data当中，将来操作数据即可操作类名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classObject&quot;</span>&gt;</span>盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;classObject.bg=true&quot;</span>&gt;</span>加bg类<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;classObject.red=true&quot;</span>&gt;</span>加red类<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      classObject: &#123;</span><br><span class="line"><span class="javascript">        bg: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        red: <span class="literal">false</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>v-bind绑定class的时候，使用数组数据：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数组 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 写死  :class=&quot;[&#x27;类名&#x27;,&#x27;类名1&#x27;]&quot; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 动态  需要把数组声明在data当中，将来操作数据即可操作类名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classArray&quot;</span>&gt;</span>盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;classArray.push(&#x27;bg&#x27;)&quot;</span>&gt;</span>加bg类<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;classArray.push(&#x27;red&#x27;)&quot;</span>&gt;</span>加red类<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      classArray: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>:class</code> 动态绑定类名 <code>class</code> 原生属性，可以同时存在，他们包含的所有类会合并在一起生效。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classArray&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>:class 可以使用对象  {类名：布尔类型}</li><li>:class 可以使用数组  [‘类名’]</li><li>class 和 :class 可共存，结果类合并在一起</li></ul><h3 id="18-指令-v-bind绑定style"><a href="#18-指令-v-bind绑定style" class="headerlink" title="18-指令-v-bind绑定style"></a>18-指令-v-bind绑定style</h3><blockquote><p>目标：知道通过vue怎么去操作行内样式，也就是style属性的值。</p></blockquote><p>动态绑定style属性有两种方式：</p><ul><li>对象形式</li><li>数组形式</li></ul><p>v-bind绑定style使用对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 写死  :style=&quot;&#123;css属性名称:css属性值,...&#125;&quot; 注意：css属性名建议使用驼峰命名，</span></span><br><span class="line"><span class="comment">    如果想使用带-的css属性名称，需要使用``包裹即可。  --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;div :style=&quot;&#123;color:&#x27;red&#x27;,&#x27;font-size&#x27;:&#x27;30px&#x27;&#125;&quot;&gt;元素&lt;/div&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 如果想动态绑定style的值，将对象声明在data当中即可 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;styleObject&quot;</span>&gt;</span>元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;styleObject.color=&#x27;red&#x27;&quot;</span>&gt;</span>加红色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;styleObject.fontSize=&#x27;30px&#x27;&quot;</span>&gt;</span>变大<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 默认没有 color 和 fontSize 值</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// styleObject: &#123; color: &#x27;red&#x27;, fontSize: &#x27;30px&#x27; &#125;</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 注意：响应式数据（驱动视图更新的数据）必须提前在data中显性的声明。</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// styleObject: &#123;&#125;</span></span></span><br><span class="line">      styleObject: &#123;</span><br><span class="line"><span class="javascript">        color: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">        fontSize: <span class="literal">null</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>v-bind绑定style使用数组：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数组 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 写死 :style=&quot;[&#123;css属性名称:css属性值,...&#125;,&#123;&#125;,&#123;&#125;,...]&quot;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 动态 需要将数组声明在data中 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: hotpink;&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleArray&quot;</span>&gt;</span>元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;styleArray.push(&#123;color:&#x27;red&#x27;&#125;)&quot;</span>&gt;</span>加红色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;styleArray.push(&#123;fontSize:&#x27;30px&#x27;&#125;)&quot;</span>&gt;</span>变大<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 需要追加的选项 &#123;color:&#x27;red&#x27;&#125;,&#123;fontSize:&#x27;30px&#x27;&#125;</span></span></span><br><span class="line">      styleArray: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果同时存在 :style 和 style  vue操作的样式会覆盖默认样式。</p><p>总结：</p><ul><li>:style 使用对象  {css属性名:css属性值}</li><li>:style 使用数组 [{css属性名:css属性值}]</li></ul><h3 id="19-指令-v-model"><a href="#19-指令-v-model" class="headerlink" title="19-指令-v-model"></a>19-指令-v-model</h3><blockquote><p>目标：知道如何绑定多种类型的表单元素，以及v-model语法糖原理。</p></blockquote><p>v-model的作用是：给表单元素添加双向数据绑定的功能。</p><ul><li>data中的数据可以给表单元素赋值   M—-&gt;V</li><li>当表单元素值发生变化去修改data中的数据为当前表单元素的值   V—-&gt;M</li></ul><p>**第一个知识(重要)**：v-model的语法糖（某段代码的简写）原理</p><ul><li>不使用v-model如果实现表单元素的双向数据绑定？</li><li>能够实现不使用v-model实现双向数据绑定，那你就知道原理。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 双向数据绑定 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- v-model是语法糖，它简写了一些代码 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 如果不是v-model能够实现双向数据绑定，v-model的语法糖原理 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 1. M -- &gt;V  数据赋值给表单元素 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 2. V -- &gt;M  表单元素值改变，修改数据为当前表单元素的值 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- :value=&quot;msg&quot; 给表单元素赋值 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- $event input事件的事件对象 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- $event.target input的dom对象（事件的触发源） --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- $event.target.value 输入框的内容 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- msg=$event.target.value 把输入的内容重新修改msg的值 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;msg&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;msg=$event.target.value&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 总结：</span></span><br><span class="line"><span class="comment">   v-model=&quot;msg&quot;</span></span><br><span class="line"><span class="comment">   :value=&quot;msg&quot; @input=&quot;msg=$event.target.value&quot;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      msg: <span class="string">&#x27;hi vue&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第二个知识</strong>：如何使用v-model去绑定其他的表单元素类型。</p><ul><li>文本域</li><li>复选框</li><li>单选框</li><li>下拉框</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文本域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;textareaStr&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 复选框 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1. 单个复选框  值是布尔类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;isChecked&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. 多个复选框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ball&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 打球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 游戏</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;book&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 看书</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单选框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span>&gt;</span> 男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span>&gt;</span> 女</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 下拉框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        textareaStr: <span class="string">&#x27;hi vue&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        isChecked: <span class="literal">true</span>,</span></span><br><span class="line">        hobby: [],</span><br><span class="line"><span class="javascript">        gender: <span class="string">&#x27;男&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        city: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="20-指令-v-cloak"><a href="#20-指令-v-cloak" class="headerlink" title="20-指令-v-cloak"></a>20-指令-v-cloak</h3><blockquote><p>目标：知道如何解决插值表达式闪烁问题。</p></blockquote><p>v-cloak作用是：解决模板中的插值表达式的闪烁问题，<code>&#123;&#123;msg&#125;&#125;</code>  等vue来解析，解析后才能看到数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 在模板未解析前生效 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line">      display: none;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这个指令 在模板解析后  会移除 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        msg: <span class="string">&#x27;hi vue&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="21-指令-v-once"><a href="#21-指令-v-once" class="headerlink" title="21-指令-v-once"></a>21-指令-v-once</h3><blockquote><p>目标：知道如何让视图只渲染一次，不受数据变化影响。</p></blockquote><p>v-once作用：让模板的某个容器只渲染一次，当它依赖的数据发生变的时候，被指令修饰的容器不会再次渲染。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这个容器只想渲染一次，不再受数据的影响 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        msg: <span class="string">&#x27;hi vue&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="22-案例-渲染列表"><a href="#22-案例-渲染列表" class="headerlink" title="22-案例-渲染列表"></a>22-案例-渲染列表</h3><blockquote><p>目标：完成表格列表渲染。</p></blockquote><p>需求：</p><ul><li>根据data中的数据，进行tr的渲染。</li><li>当没有数据的时候，显示暂无数据。</li></ul><p>静态页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered table-hover&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>品牌名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>创建时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>宝马<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2019-10-10<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>准备数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">brandName</span>: <span class="string">&#x27;宝马&#x27;</span>, <span class="attr">createTime</span>: <span class="string">&#x27;2020-04-10&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">brandName</span>: <span class="string">&#x27;奔驰&#x27;</span>, <span class="attr">createTime</span>: <span class="string">&#x27;2020-06-10&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">brandName</span>: <span class="string">&#x27;奥迪&#x27;</span>, <span class="attr">createTime</span>: <span class="string">&#x27;2020-02-10&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">brandName</span>: <span class="string">&#x27;马自达&#x27;</span>, <span class="attr">createTime</span>: <span class="string">&#x27;2020-02-10&#x27;</span> &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>完整的功能实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered table-hover&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>品牌名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>创建时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.brandName&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.createTime&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当数组的长度为0的时候，显示暂无数据 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-if</span>=<span class="string">&quot;list.length===0&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>暂无数据<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      list: [</span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">brandName</span>: <span class="string">&#x27;宝马&#x27;</span>, <span class="attr">createTime</span>: <span class="string">&#x27;2020-04-10&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">brandName</span>: <span class="string">&#x27;奔驰&#x27;</span>, <span class="attr">createTime</span>: <span class="string">&#x27;2020-06-10&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">brandName</span>: <span class="string">&#x27;奥迪&#x27;</span>, <span class="attr">createTime</span>: <span class="string">&#x27;2020-02-10&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">brandName</span>: <span class="string">&#x27;马自达&#x27;</span>, <span class="attr">createTime</span>: <span class="string">&#x27;2020-02-10&#x27;</span> &#125;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="23-案例-完成删除"><a href="#23-案例-完成删除" class="headerlink" title="23-案例-完成删除"></a>23-案例-完成删除</h3><blockquote><p>目标：完成表格一行删除。</p></blockquote><p>需求：</p><ul><li>点击删除按钮，确认框提示</li><li>点击确认后，再进行删除</li><li>绑定事件，指定处理函数的时候，传入ID</li><li>在处理函数中，根据ID进行删除（id===&gt;index====&gt;根据索引删除）</li></ul><p>实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;delBrand(item.id)&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="comment">// 删除逻辑</span></span><br><span class="line">  delBrand (id) &#123;</span><br><span class="line">    <span class="comment">// 确认框</span></span><br><span class="line">    <span class="keyword">if</span> (confirm(<span class="string">&#x27;您确认删除该品牌吗？&#x27;</span>)) &#123;</span><br><span class="line">      <span class="comment">// 根据ID拿索引</span></span><br><span class="line">      <span class="keyword">const</span> index = <span class="built_in">this</span>.list.findIndex(<span class="function"><span class="params">item</span>=&gt;</span>item.id===id)</span><br><span class="line">      <span class="comment">// 根据索引进行移除</span></span><br><span class="line">      <span class="built_in">this</span>.list.splice(index, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="24-案例-添加品牌"><a href="#24-案例-添加品牌" class="headerlink" title="24-案例-添加品牌"></a>24-案例-添加品牌</h3><blockquote><p>目标：完成表格添加品牌。</p></blockquote><p>大致的实现步骤：</p><ol><li>准备一个表单，包含一个输入框，包含一个提交按钮。</li><li>监听提交事件，提取输入框中的内容</li><li>根据输入的内容来组织 品牌信息对象  追加到数组中即可<ol><li>数据会驱动视图的更新</li></ol></li><li>清空输入框中的内容</li></ol><p>在案例中的代码：</p><ul><li>结构</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加品牌 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-inline&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;品牌名称&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>添加品牌<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>监听提交事件，且阻止默认提交行为</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;addBrand()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-inline&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>双向绑定输入框</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;brandName&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;品牌名称&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在处理函数中实现逻辑</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加品牌</span></span><br><span class="line">addBrand() &#123;</span><br><span class="line">  <span class="comment">// 通过v-model绑定输入框，可以实时的获取输入的内容</span></span><br><span class="line">  <span class="comment">// console.log(this.brandName)</span></span><br><span class="line">  <span class="comment">// 严谨判断，未输入内容，提示 + 阻止程序运行</span></span><br><span class="line">  <span class="comment">// trim()是去除字符串左右两侧的空格，然后去判断会更加严谨</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>.brandName.trim()) &#123;</span><br><span class="line">    <span class="keyword">return</span> alert(<span class="string">&#x27;请输入品牌名称&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 组织一个对象：id brandName createTime</span></span><br><span class="line">  <span class="comment">// 正常逻辑：去除数组中最后一项数据的ID累加1即可</span></span><br><span class="line">  <span class="comment">// 极端情况：数组中已经没有数据，此时ID为1即可</span></span><br><span class="line">  <span class="keyword">const</span> obj = &#123;</span><br><span class="line">    id: <span class="built_in">this</span>.list.length ? <span class="built_in">this</span>.list[<span class="built_in">this</span>.list.length - <span class="number">1</span>].id + <span class="number">1</span> : <span class="number">1</span>,</span><br><span class="line">    brandName: <span class="built_in">this</span>.brandName,</span><br><span class="line">    createTime: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 追加到数组中即可</span></span><br><span class="line">  <span class="built_in">this</span>.list.push(obj)</span><br><span class="line">  <span class="comment">// 清空输入框</span></span><br><span class="line">  <span class="built_in">this</span>.brandName = <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="25-案例-梳理其它功能"><a href="#25-案例-梳理其它功能" class="headerlink" title="25-案例-梳理其它功能"></a>25-案例-梳理其它功能</h3><blockquote><p>目标：确定还有哪些功能需要完成。</p></blockquote><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://i.ibb.co/qM6HzCG/1586589565220.png" alt="1586589565220"></p><p>输入框结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 搜索 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-inline&quot;</span> <span class="attr">style</span>=<span class="string">&quot;padding: 20px 0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入关键字进行搜索&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 表格 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="26-vue定义过滤器"><a href="#26-vue定义过滤器" class="headerlink" title="26-vue定义过滤器"></a>26-vue定义过滤器</h3><blockquote><p>目标：知道如何定义过滤器和使用过滤器。</p></blockquote><p>过滤器（filter）的作用：</p><ul><li>我们会在模板中使用 插值表达式  或者  绑定属性的值。</li><li>但是有时候输出的数据的格式不理想，使用过滤器转换格式。</li></ul><p>过滤器有两种写法：</p><ul><li>全局过滤器（全局定义，然后在每个视图中均可使用）</li><li>局部过滤器（在vue实例中定义，仅能给当前vue实例管理的视图使用）</li></ul><p>全局过滤器：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 需求：输出6位字符，不够前面补0 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- padStart是String提供的，默认的数字。 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- | 管道符 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;msg|myFilter&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;msg|myFilter&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 全局过滤器</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1. Vue.filter(&#x27;过滤器名称&#x27;,&#x27;处理函数&#x27;)</span></span></span><br><span class="line"><span class="javascript">  Vue.filter(<span class="string">&#x27;myFilter&#x27;</span>, <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// value 就是使用该过滤器前面的插值表达式的执行结果</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 需要对value进行转换，将换后的结果返回出去</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 返回的值会输出到模板中</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="built_in">String</span>(value).padStart(<span class="number">6</span>,<span class="number">0</span>)</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 实例1</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      msg: 103</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="comment">// 实例2</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app2&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      msg: 205</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>局部过滤器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例1</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg: <span class="number">103</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 局部过滤器</span></span><br><span class="line">  <span class="comment">// vue配置对象中，提供了选项filters指向对象，可以定义多个过滤器</span></span><br><span class="line">  filters: &#123;</span><br><span class="line">    <span class="comment">// 属性名称（过滤器名称）：属性的值（过滤器处理函数）</span></span><br><span class="line">    <span class="comment">// myFilter:function()&#123;&#125;</span></span><br><span class="line">    myFilter(value) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">String</span>(value).padStart(<span class="number">6</span>,<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>全局 <code>Vue.filter(&#39;过滤器名称&#39;,(value)=&gt;&#123; //管道符前js表达式执行结果 // 返回处理好的数据即可 &#125;)</code></li><li>局部  <code>new Vue(&#123;filters:&#123;&#39;过滤器名称&#39;:(value)=&gt;&#123; //管道符前js表达式执行结果 // 返回处理好的数据即可 &#125;&#125;&#125;)</code></li></ul><h3 id="27-vue操作dom"><a href="#27-vue操作dom" class="headerlink" title="27-vue操作dom"></a>27-vue操作dom</h3><blockquote><p>目标：知道使用ref获取dom元素。</p></blockquote><p>在某些特殊情况，必须要操作dom，vue提供了一种方式操作dom，如何获取dom的方式。</p><p>vue提供一个属性：ref</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;myDom&quot;</span>&gt;</span>dom<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过vue实例就可以获取：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this就是vue的实例</span></span><br><span class="line"><span class="comment">// $refs 是对象，收集了视图中所有使用了ref属性的dom元素 &#123;myDom:dom对象&#125;</span></span><br><span class="line"><span class="built_in">this</span>.$refs.myDom</span><br></pre></td></tr></table></figure><p>通过代码演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">      height: 240px;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 盒子 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;box&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">ref</span>=<span class="string">&quot;span&quot;</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 特殊情况，在v-for的标签上加了ref --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- v-for=&quot;序号 in 次数&quot; 序号从1开始 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">ref</span>=<span class="string">&quot;li&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;i in 3&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getHeight()&quot;</span>&gt;</span>获取盒子高度<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">      methods: &#123;</span><br><span class="line">        getHeight () &#123;</span><br><span class="line"><span class="javascript">          <span class="comment">// 先拿到dom容器再获取高度</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs)</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> box = <span class="built_in">this</span>.$refs.box</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(box.offsetHeight)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">          <span class="comment">// 如果给v-for的标签加了ref</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 会获取到所有的元素 就是数组  [dom,dom,dom]</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.li)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="28-vue自定义指令"><a href="#28-vue自定义指令" class="headerlink" title="28-vue自定义指令"></a>28-vue自定义指令</h3><blockquote><p>目标：知道如何定义自定义指令，使用自定义指令。</p></blockquote><p>指令（directive）vue提供了v-开头的特殊属性，称之为指令。它提供的指令是有限，如果遇见内置指令无法给你实现的功能，自己封装一个指令（自定义指令）。</p><p><em>定义一个v-focus的指令，作用让input自动获取焦点</em></p><p>全局自定义指令，局部自定义指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-focus</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-myfocus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 全局自定义指令</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// Vue.directive(&#x27;指令的名称&#x27;,&#x27;指令配置对象&#x27;)</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 参数1：指令的名称，不包含v-，但是在使用指令的时候需要加上v-</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 参数2：指令配置对象，固定属性 inserted 指定的一个函数，</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//      1. 该函数会在通过指令标记的元素，创建完毕之后执行</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">//      2. 该函数有一个默认参数 el 指的是使用这个指令的元素</span></span></span><br><span class="line"><span class="javascript">  Vue.directive(<span class="string">&#x27;focus&#x27;</span>,&#123;</span></span><br><span class="line">    inserted (el) &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 获取焦点</span></span></span><br><span class="line">      el.focus()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 局部自定义指令</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// vue配置对象提供了一个选项：directives 对应 对象</span></span></span><br><span class="line">    directives: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 属性名称(指令的名称)：属性的值(指令的配置对象)</span></span></span><br><span class="line">      myfocus: &#123;</span><br><span class="line">        inserted (el) &#123;</span><br><span class="line"><span class="javascript">          el.style.height = <span class="string">&#x27;50px&#x27;</span></span></span><br><span class="line">          el.focus()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>补充：</p><ul><li>dom元素提供了focus函数，dom.focus()触发获取焦点事件，自然元素可以获取焦点。</li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise</title>
      <link href="/bubble/2020/09/10/promise/"/>
      <url>/bubble/2020/09/10/promise/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\bubble\css\APlayer.min.css"><script src="\bubble\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\bubble\js\Meting.min.js"></script><h3 id="promise是什么？"><a href="#promise是什么？" class="headerlink" title="promise是什么？"></a>promise是什么？</h3><p>1、主要用于异步计算<br>2、可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果<br>3、可以在对象之间传递和操作promise，帮助我们处理队列</p><h3 id="为什么会有promise？"><a href="#为什么会有promise？" class="headerlink" title="为什么会有promise？"></a>为什么会有promise？</h3><p><strong>为了避免界面冻结（任务）</strong></p><ul><li>同步：假设你去了一家饭店，找个位置，叫来服务员，这个时候服务员对你说，对不起我是“同步”服务员，我要服务完这张桌子才能招呼你。那桌客人明明已经吃上了，你只是想要个菜单，这么小的动作，服务员却要你等到别人的一个大动作完成之后，才能再来招呼你，这个便是同步的问题：也就是“顺序交付的工作1234，必须按照1234的顺序完成”。</li><li>异步：则是将耗时很长的A交付的工作交给系统之后，就去继续做B交付的工作，。等到系统完成了前面的工作之后，再通过回调或者事件，继续做A剩下的工作。<br> AB工作的完成顺序，和交付他们的时间顺序无关，所以叫“异步”。</li></ul><h3 id="异步操作的常见语法"><a href="#异步操作的常见语法" class="headerlink" title="异步操作的常见语法"></a>异步操作的常见语法</h3><ol><li><p>事件监听</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;#start&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, start, <span class="literal">false</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 响应事件，进行相应的操作</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// jquery on 监听</span></span><br><span class="line">$(<span class="string">&#x27;#start&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, start)</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>回调</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比较常见的有ajax</span></span><br><span class="line">$.ajax(<span class="string">&#x27;http://www.wyunfei.com/&#x27;</span>, &#123;</span><br><span class="line"> success (res) &#123;</span><br><span class="line">   <span class="comment">// 这里可以监听res返回的数据做回调逻辑的处理</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者在页面加载完毕后回调</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 页面结构加载完成，做回调逻辑处理</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="有了nodeJS之后…对异步的依赖进一步加剧了"><a href="#有了nodeJS之后…对异步的依赖进一步加剧了" class="headerlink" title="有了nodeJS之后…对异步的依赖进一步加剧了"></a>有了nodeJS之后…对异步的依赖进一步加剧了</h3><p>大家都知道在nodeJS出来之前PHP、Java、python等后台语言已经很成熟了，nodejs要想能够有自己的一片天，那就得拿出点自己的绝活：</p><p><strong>无阻塞高并发，是nodeJS的招牌，要达到无阻塞高并发异步是其基本保障</strong><br> 举例：查询数据从数据库，PHP第一个任务查询数据，后面有了新任务，那么后面任务会被挂起排队；而nodeJS是第一个任务挂起交给数据库去跑，然后去接待第二个任务交给对应的系统组件去处理挂起，接着去接待第三个任务…<strong>那这样子的处理必然要依赖于异步操作</strong></p><h3 id="异步回调的问题："><a href="#异步回调的问题：" class="headerlink" title="异步回调的问题："></a>异步回调的问题：</h3><ul><li>之前处理异步是通过纯粹的回调函数的形式进行处理</li><li>很容易进入到回调地狱中，剥夺了函数return的能力</li><li>问题可以解决，但是难以读懂，维护困难</li><li>稍有不慎就会踏入回调地狱 - 嵌套层次深，不好维护</li></ul><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://p.ananas.chaoxing.com/star3/origin/a7ea418715582b4ecad2e46592bc1247.png?rw=1200&rh=996&_fileSize=66560&_orientation=1"></p><p>一般情况我们一次性调用API就可以完成请求。<br> 有些情况需要多次调用服务器API，就会形成一个链式调用，比如为了完成一个功能，我们需要调用API1、API2、API3，依次按照顺序进行调用，这个时候就会出现回调地狱的问题</p><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><ul><li>promise是一个对象，对象和函数的区别就是对象可以保存状态，函数不可以（闭包除外）</li><li>并未剥夺函数return的能力，因此无需层层传递callback，进行回调获取数据</li><li>代码风格，容易理解，便于维护</li><li>多个异步等待合并便于解决</li></ul><h3 id="promise详解"><a href="#promise详解" class="headerlink" title="promise详解"></a>promise详解</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 一段耗时的异步操作</span></span><br><span class="line">    resolve(<span class="string">&#x27;成功&#x27;</span>) <span class="comment">// 数据处理完成</span></span><br><span class="line">    <span class="comment">// reject(&#x27;失败&#x27;) // 数据处理出错</span></span><br><span class="line">  &#125;</span><br><span class="line">).then(</span><br><span class="line">  (res) =&gt; &#123;<span class="built_in">console</span>.log(res)&#125;,  <span class="comment">// 成功</span></span><br><span class="line">  (err) =&gt; &#123;<span class="built_in">console</span>.log(err)&#125; <span class="comment">// 失败</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>resolve作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；<br> reject作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p><p>promise有三个状态：<br> 1、pending[待定]初始状态<br> 2、fulfilled[实现]操作成功<br> 3、rejected[被否决]操作失败<br> 当promise状态发生改变，就会触发then()里的响应函数处理后续步骤；<br> promise状态一经改变，不会再变。</p><p>Promise对象的状态改变，只有两种可能：<br> 从pending变为fulfilled<br> 从pending变为rejected。<br> 这两种情况只要发生，状态就凝固了，不会再变了。</p><h5 id="最简单示例："><a href="#最简单示例：" class="headerlink" title="最简单示例："></a>最简单示例：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="分两次，顺序执行"><a href="#分两次，顺序执行" class="headerlink" title="分两次，顺序执行"></a>分两次，顺序执行</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val) <span class="comment">//  参数val = &#x27;hello&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line">      &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val) <span class="comment">// 参数val = &#x27;world&#x27;</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h5 id="promise完成后then"><a href="#promise完成后then" class="headerlink" title="promise完成后then()"></a>promise完成后then()</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pro = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">     resolve(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">   &#125;, <span class="number">2000</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">   pro.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(value) <span class="comment">// hello world</span></span><br><span class="line"> &#125;)</span><br><span class="line"> &#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure><p>结论：promise作为队列最为重要的特性，我们在任何一个地方生成了一个promise队列之后，我们可以把他作为一个变量传递到其他地方。</p><h5 id="假如在-then-的函数里面不返回新的promise，会怎样？"><a href="#假如在-then-的函数里面不返回新的promise，会怎样？" class="headerlink" title="假如在.then()的函数里面不返回新的promise，会怎样？"></a>假如在.then()的函数里面不返回新的promise，会怎样？</h5><h3 id="then"><a href="#then" class="headerlink" title=".then()"></a>.then()</h3><p>1、接收两个函数作为参数，分别代表fulfilled（成功）和rejected（失败）<br> 2、.then()返回一个新的Promise实例，所以它可以链式调用<br> 3、当前面的Promise状态改变时，.then()根据其最终状态，选择特定的状态响应函数执行<br> 4、状态响应函数可以返回新的promise，或其他值，不返回值也可以我们可以认为它返回了一个null；<br> 5、如果返回新的promise，那么下一级.then()会在新的promise状态改变之后执行<br> 6、如果返回其他任何值，则会立即执行下一级.then()</p><h5 id="then-里面有-then-的情况"><a href="#then-里面有-then-的情况" class="headerlink" title=".then()里面有.then()的情况"></a>.then()里面有.then()的情况</h5><p>1、因为.then()返回的还是Promise实例<br> 2、会等里面的then()执行完，再执行外面的</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://p.ananas.chaoxing.com/star3/origin/4dccf093711346420188119a1edc195e.png?rw=1200&rh=1004&_fileSize=43620&_orientation=1">sts\img\promise2.png)</p><p>对于我们来说，此时最好将其展开，也是一样的结果，而且会更好读：</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://p.ananas.chaoxing.com/star3/origin/762bf8f064137f398531e97ee8067f33.png?rw=1200&rh=1014&_fileSize=44676&_orientation=1"></p><h5 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h5><p>Promise会自动捕获内部异常，并交给rejected响应函数处理。</p><ol><li>第一种错误处理<img src= "/bubble/img/loading.gif" data-lazy-src="https://p.ananas.chaoxing.com/star3/origin/85afa5f0d5bd6d6347ad47124dcc19bd.png?rw=860&rh=715&_fileSize=26696&_orientation=1">mise4.png)</li></ol><p>第二种错误处理</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://p.ananas.chaoxing.com/star3/origin/d447bdb232b0980b357b2ddd622da7ec.png?rw=861&rh=618&_fileSize=24984&_orientation=1"></p><ul><li>错误处理两种做法：<br> 第一种：reject(‘错误信息’).then(() =&gt; {}, () =&gt; {错误处理逻辑})<br> 第二种：throw new Error(‘错误信息’).catch( () =&gt; {错误处理逻辑})<br> 推荐使用第二种方式，更加清晰好读，并且可以捕获前面所有的错误（可以捕获N个then回调错误）</li></ul><h3 id="catch-then"><a href="#catch-then" class="headerlink" title="catch() + then()"></a>catch() + then()</h3><p><strong>第一种情况：</strong></p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://p.ananas.chaoxing.com/star3/origin/771574be5149774f827b5849ebd6a3b3.png?rw=917&rh=1252&_fileSize=49696&_orientation=1"></p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://p.ananas.chaoxing.com/star3/origin/640546a97884677a5bcfc22c0a92e21d.png?rw=417&rh=226&_fileSize=6204&_orientation=1"></p><p>结论：catch也会返回一个promise实例，并且是resolved状态</p><p><strong>第二种情况：</strong></p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://p.ananas.chaoxing.com/star3/origin/8812e822576a88b45ac83303cb916c2d.png?rw=1200&rh=744&_fileSize=27114&_orientation=1"></p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://p.ananas.chaoxing.com/star3/origin/73f91a2aa4556a59269fc79d6ef61d82.png?rw=460&rh=248&_fileSize=8388&_orientation=1"></p><p>结论：抛出错误变为rejected状态，所以绕过两个then直接跑到最下面的catch</p><h5 id="Promise-all-批量执行"><a href="#Promise-all-批量执行" class="headerlink" title="Promise.all() 批量执行"></a>Promise.all() 批量执行</h5><p>Promise.all([p1, p2, p3])用于将多个promise实例，包装成一个新的Promise实例，返回的实例就是普通的promise<br> 它接收一个数组作为参数<br> 数组里可以是Promise对象，也可以是别的值，只有Promise会等待状态改变<br> 当所有的子Promise都完成，该Promise完成，返回值是全部值得数组<br> 有任何一个失败，该Promise失败，返回值是第一个失败的子Promise结果</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//切菜</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cutUp</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;开始切菜。&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;        <span class="comment">//做一些异步操作</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;切菜完毕！&#x27;</span>);</span><br><span class="line">                resolve(<span class="string">&#x27;切好的菜&#x27;</span>);</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//烧水</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">boil</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;开始烧水。&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;        <span class="comment">//做一些异步操作</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;烧水完毕！&#x27;</span>);</span><br><span class="line">                resolve(<span class="string">&#x27;烧好的水&#x27;</span>);</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Promise</span>.all([cutUp(), boil()])</span><br><span class="line">        .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;准备工作完毕&#x27;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(result);</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h5 id="Promise-race-类似于Promise-all-，区别在于它有任意一个完成就算完成"><a href="#Promise-race-类似于Promise-all-，区别在于它有任意一个完成就算完成" class="headerlink" title="Promise.race() 类似于Promise.all() ，区别在于它有任意一个完成就算完成"></a>Promise.race() 类似于Promise.all() ，区别在于它有任意一个完成就算完成</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">&#x27;I\`m p1 &#x27;</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">&#x27;I\`m p2 &#x27;</span>)</span><br><span class="line">        &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">Promise</span>.race([p1, p2])</span><br><span class="line">        .then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(value)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><ul><li>常见用法：<br> 异步操作和定时器放在一起，，如果定时器先触发，就认为超时，告知用户；<br> 例如我们要从远程的服务家在资源如果5000ms还没有加载过来我们就告知用户加载失败</li><li>现实中的用法<br> 回调包装成Promise，他有两个显而易见的好处：<br> 1、可读性好<br> 2、返回 的结果可以加入任何Promise队列</li></ul><blockquote><p>实战示例，回调地狱和promise对比：</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">   第一步：找到北京的id</span></span><br><span class="line"><span class="comment">   第二步：根据北京的id -&gt; 找到北京公司的id</span></span><br><span class="line"><span class="comment">   第三步：根据北京公司的id -&gt; 找到北京公司的详情</span></span><br><span class="line"><span class="comment">   目的：模拟链式调用、回调地狱</span></span><br><span class="line"><span class="comment"> ***/</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 回调地狱</span></span><br><span class="line"> <span class="comment">// 请求第一个API: 地址在北京的公司的id</span></span><br><span class="line"> $.ajax(&#123;</span><br><span class="line">   url: <span class="string">&#x27;https://www.easy-mock.com/mock/5a52256ad408383e0e3868d7/lagou/city&#x27;</span>,</span><br><span class="line">   success (resCity) &#123;</span><br><span class="line">     <span class="keyword">let</span> findCityId = resCity.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (item.id == <span class="string">&#x27;c1&#x27;</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> item</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)[<span class="number">0</span>].id</span><br><span class="line">     </span><br><span class="line">     $.ajax(&#123;</span><br><span class="line">       <span class="comment">//  请求第二个API: 根据上一个返回的在北京公司的id “findCityId”，找到北京公司的第一家公司的id</span></span><br><span class="line">       url: <span class="string">&#x27;https://www.easy-mock.com/mock/5a52256ad408383e0e3868d7/lagou/position-list&#x27;</span>,</span><br><span class="line">       success (resPosition) &#123;</span><br><span class="line">         <span class="keyword">let</span> findPostionId = resPosition.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="keyword">if</span>(item.cityId == findCityId) &#123;</span><br><span class="line">             <span class="keyword">return</span> item</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;)[<span class="number">0</span>].id</span><br><span class="line">         <span class="comment">// 请求第三个API: 根据上一个API的id(findPostionId)找到具体公司，然后返回公司详情</span></span><br><span class="line">         $.ajax(&#123;</span><br><span class="line">           url: <span class="string">&#x27;https://www.easy-mock.com/mock/5a52256ad408383e0e3868d7/lagou/company&#x27;</span>,</span><br><span class="line">           success (resCom) &#123;</span><br><span class="line">             <span class="keyword">let</span> comInfo = resCom.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (findPostionId == item.id) &#123;</span><br><span class="line">                 <span class="keyword">return</span> item</span><br><span class="line">               &#125;</span><br><span class="line">             &#125;)[<span class="number">0</span>]</span><br><span class="line">             <span class="built_in">console</span>.log(comInfo)</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise 写法</span></span><br><span class="line">  <span class="comment">// 第一步：获取城市列表</span></span><br><span class="line">  <span class="keyword">const</span> cityList = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      url: <span class="string">&#x27;https://www.easy-mock.com/mock/5a52256ad408383e0e3868d7/lagou/city&#x27;</span>,</span><br><span class="line">      success (res) &#123;</span><br><span class="line">        resolve(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第二步：找到城市是北京的id</span></span><br><span class="line">    cityList.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> findCityId = res.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.id == <span class="string">&#x27;c1&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> item</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)[<span class="number">0</span>].id</span><br><span class="line">      </span><br><span class="line">      findCompanyId().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 第三步（2）：根据北京的id -&gt; 找到北京公司的id</span></span><br><span class="line">        <span class="keyword">let</span> findPostionId = res.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(item.cityId == findCityId) &#123;</span><br><span class="line">              <span class="keyword">return</span> item</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)[<span class="number">0</span>].id</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第四步（2）：传入公司的id</span></span><br><span class="line">        companyInfo(findPostionId)</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第三步（1）：根据北京的id -&gt; 找到北京公司的id</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">findCompanyId</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> aaa = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      $.ajax(&#123;</span><br><span class="line">        url: <span class="string">&#x27;https://www.easy-mock.com/mock/5a52256ad408383e0e3868d7/lagou/position-list&#x27;</span>,</span><br><span class="line">        success (res) &#123;</span><br><span class="line">          resolve(res)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> aaa</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第四步：根据上一个API的id(findPostionId)找到具体公司，然后返回公司详情</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">companyInfo</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> companyList = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      url: <span class="string">&#x27;https://www.easy-mock.com/mock/5a52256ad408383e0e3868d7/lagou/company&#x27;</span>,</span><br><span class="line">      success (res) &#123;</span><br><span class="line">        <span class="keyword">let</span> comInfo = res.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (id == item.id) &#123;</span><br><span class="line">               <span class="keyword">return</span> item</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">console</span>.log(comInfo)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> Vue </category>
          
          <category> promise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html面试题</title>
      <link href="/bubble/2020/07/23/html2020md/"/>
      <url>/bubble/2020/07/23/html2020md/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\bubble\css\APlayer.min.css"><script src="\bubble\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\bubble\js\Meting.min.js"></script><p><strong>1 DOCTYPE有什么作用？标准模式与混杂模式如何区分？它们有何意义?</strong></p><p>告诉浏览器使用哪个版本的HTML规范来渲染文档。DOCTYPE不存在或形式不正确会导致HTML文档以混杂模式呈现。<br>标准模式（Standards mode）以浏览器支持的最高标准运行；混杂模式（Quirks mode）中页面是一种比较宽松的向后兼容的方式显示。<a id="more"></a></p><p><strong>2 HTML5为什么只需要写 <!DOCTYPE HTML>？</strong></p><p>HTML5不基于SGML（Standard Generalized Markup Language 标准通用标记语言），因此不需要对DTD（DTD 文档类型定义）进行引用，但是需要DOCTYPE来规范浏览器行为。</p><p>HTML4.01基于SGML，所以需要引用DTD。才能告知浏览器文档所使用的文档类型，如下：<br><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"></p><p><strong>3 行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</strong></p><p>行内元素：<code>a span img input select</code><br>块级元素：<code>div ul ol li dl dt dd h1 p</code><br>空元素：<code>&lt;br&gt; &lt;hr&gt; &lt;link&gt; &lt;meta&gt;</code></p><p><strong>4 页面导入样式时，使用link和@import有什么区别？</strong></p><p>相同的地方，都是外部引用CSS方式，区别：</p><ol><li>link是xhtml标签，除了加载css外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS</li><li>link引用CSS时候，页面载入时同时加载；@import需要在页面完全加载以后加载，而且@import被引用的CSS会等到引用它的CSS文件被加载完才加载</li><li>link是xhtml标签，无兼容问题；@import是在css2.1提出来的，低版本的浏览器不支持</li><li>link支持使用javascript控制去改变样式，而@import不支持</li><li>link方式的样式的权重高于@import的权重</li><li>import在html使用时候需要<code>&lt;style type=&quot;text/css&quot;&gt;</code>标签</li></ol><p><strong>5 无样式内容闪烁（FOUC）Flash of Unstyle Content</strong></p><p>@import导入CSS文件会等到文档加载完后再加载CSS样式表。因此，在页面DOM加载完成到CSS导入完成之间会有一段时间页面上的内容是没有样式的。</p><p>解决方法：使用link标签加载CSS样式文件。因为link是顺序加载的，这样页面会等到CSS下载完之后再下载HTML文件，这样先布局好，就不会出现FOUC问题。</p><p><strong>6 介绍一下你对浏览器内核的理解？</strong></p><p>主要分成两部分：渲染引擎(Layout Engine或Rendering Engine)和JS引擎。</p><p>渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。<br>JS引擎：解析和执行javascript来实现网页的动态效果。</p><p>最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。</p><p><strong>7 常见的浏览器内核有哪些？</strong></p><ol><li>Trident( MSHTML )：IE MaxThon TT The World 360 搜狗浏览器</li><li>Geckos：Netscape6及以上版本 FireFox Mozilla Suite/SeaMonkey</li><li>Presto：Opera7及以上(Opera内核原为：Presto，现为：Blink)</li><li>Webkit：Safari Chrome</li></ol><p><strong>8 HTML5有哪些新特性,移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分HTML和HTML5</strong></p><p>新增加了图像、位置、存储、多任务等功能。<br>新增元素：</p><ol><li>canvas</li><li>用于媒介回放的video和audio元素</li><li>本地离线存储。localStorage长期存储数据，浏览器关闭后数据不丢失;sessionStorage的数据在浏览器关闭后自动删除</li><li>语意化更好的内容元素，比如 article footer header nav section</li><li>位置API：Geolocation</li><li>表单控件，calendar date time email url search</li><li>新的技术：web worker(web worker是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 在后台运行) web socket</li><li>拖放API：drag、drop</li></ol><p>移除的元素：</p><ol><li>纯表现的元素：basefont big center font s strike tt u</li><li>性能较差元素：frame frameset noframes</li></ol><p>区分：</p><ol><li>DOCTYPE声明的方式是区分重要因素</li><li>根据新增加的结构、功能来区分</li></ol><p><strong>9 简述一下你对HTML语义化的理解？</strong></p><ol><li>去掉或丢失样式的时候能够让页面呈现出清晰的结构。</li><li>有利于SEO和搜索引擎建立良好沟通，有助于爬虫抓取更多的信息，爬虫依赖于标签来确定上下文和各个关键字的权重。</li><li>方便其它设备解析。</li><li>便于团队开发和维护，语义化根据可读性。</li></ol><p><strong>10 HTML5的文件离线储存怎么使用，工作原理是什么？</strong></p><p>在线情况下，浏览器发现HTML头部有manifest属性，它会请求manifest文件，如果是第一次访问，那么浏览器就会根据manifest文件的内容下载相应的资源，并进行离线存储。如果已经访问过并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面。然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不会做任何操作，如果文件改变了，那么就会重新下载文件中的资源，并且进行离线存储。例如，</p><p>在页面头部加入manifest属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">manifest</span>=<span class="string">&#x27;cache.manifest&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在cache.manifest文件中编写离线存储的资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">v0.11</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CACHE:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">js/app.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">css/style.css</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NETWORK:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Resourse/logo.png</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FALLBACK:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> //offline.html</span><br></pre></td></tr></table></figure><p><strong>11 cookies，sessionStorage和localStorage的区别？</strong></p><p>共同点：都是保存在浏览器端，且是同源的。</p><p>区别：</p><ol><li>cookies是为了标识用户身份而存储在用户本地终端上的数据，始终在同源http请求中携带，即cookies在浏览器和服务器间来回传递，而sessionstorage和localstorage不会自动把数据发给服务器，仅在本地保存。</li><li>存储大小的限制不同。cookie保存的数据很小，不能超过4k，而sessionstorage和localstorage保存的数据大，可达到5M。</li><li>数据的有效期不同。cookie在设置的cookie过期时间之前一直有效，即使窗口或者浏览器关闭。sessionstorage仅在浏览器窗口关闭之前有效。localstorage始终有效，窗口和浏览器关闭也一直保存，用作长久数据保存。</li><li>作用域不同。cookie在所有的同源窗口都是共享；sessionstorage不在不同的浏览器共享，即使同一页面；localstorage在所有同源窗口都是共享</li></ol><p><strong>12 iframe框架有那些优缺点？</strong></p><p>优点：</p><ol><li>iframe能够原封不动的把嵌入的网页展现出来。</li><li>如果有多个网页引用iframe，那么你只需要修改iframe的内容，就可以实现调用的每一个页面内容的更改，方便快捷。</li><li>网页如果为了统一风格，头部和版本都是一样的，就可以写成一个页面，用iframe来嵌套，可以增加代码的可重用。</li><li>如果遇到加载缓慢的第三方内容如图标和广告，这些问题可以由iframe来解决。</li></ol><p>缺点：</p><ol><li>搜索引擎的爬虫程序无法解读这种页面</li><li>框架结构中出现各种滚动条</li><li>使用框架结构时，保证设置正确的导航链接。</li><li>iframe页面会增加服务器的http请求</li></ol><p><strong>13 label的作用是什么? 是怎么用的?</strong></p><p>label标签用来定义表单控件间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。label 中有两个属性是非常有用的, FOR和ACCESSKEY。<br>FOR属性功能：表示label标签要绑定的HTML元素，你点击这个标签的时候，所绑定的元素将获取焦点。例如，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Label</span> <span class="attr">FOR</span>=<span class="string">&quot;InputBox&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">Label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">ID</span>=<span class="string">&quot;InputBox&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>ACCESSKEY属性功能：表示访问label标签所绑定的元素的热键，当您按下热键，所绑定的元素将获取焦点。例如，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Label</span> <span class="attr">FOR</span>=<span class="string">&quot;InputBox&quot;</span> <span class="attr">ACCESSKEY</span>＝&quot;<span class="attr">N</span>&quot;&gt;</span>姓名<span class="tag">&lt;/<span class="name">Label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">ID</span>=<span class="string">&quot;InputBox&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>14 HTML5的form如何关闭自动完成功能？</strong></p><p>HTML的输入框可以拥有自动完成的功能，当你往输入框输入内容的时候，浏览器会从你以前的同名输入框的历史记录中查找出类似的内容并列在输入框下面，这样就不用全部输入进去了，直接选择列表中的项目就可以了。但有时候我们希望关闭输入框的自动完成功能，例如当用户输入内容的时候，我们希望使用AJAX技术从数据库搜索并列举而不是在用户的历史记录中搜索。</p><p>方法：</p><ol><li>在IE的internet选项菜单中里的自动完成里面设置</li><li>设置form输入框的autocomplete为on或者off来来开启输入框的自动完成功能</li></ol><p><strong>15 如何实现浏览器内多个标签页之间的通信?</strong></p><ol><li>WebSocket SharedWorker</li><li>也可以调用 localstorge、cookies 等本地存储方式。 localstorge 在另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件，我们通过监听事件，控制它的值来进行页面信息通信。</li></ol><p>注意：Safari 在无痕模式下设置 localstorge 值时会抛出QuotaExceededError 的异常</p><p><strong>16 webSocket如何兼容低浏览器？</strong></p><ol><li>Adobe Flash Socket ActiveX HTMLFile (IE) 基于 multipart 编码发送 XHR 基于长轮询的 XHR</li><li>引用WebSocket.js这个文件来兼容低版本浏览器。</li></ol><p><strong>16 页面可见性（Page Visibility）API 可以有哪些用途？</strong></p><ol><li>通过visibility state的值得检测页面当前是否可见，以及打开网页的时间。</li><li>在页面被切换到其他后台进程时，自动暂停音乐或视频的播放。</li></ol><p><strong>17 如何在页面上实现一个圆形的可点击区域？</strong></p><ol><li>map+area或者svg</li><li>border-radius</li><li>纯js实现，一个点不在圆上的算法</li></ol><p><strong>18 实现不使用 border 画出1px高的线，在不同浏览器的Quirks mode和CSS Compat模式下都能保持同一效果</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height:1px;overflow:hidden;background:red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>19 网页验证码是干嘛的，是为了解决什么安全问题？</strong></p><ol><li>区分用户是计算机还是人的程序;</li><li>可以防止恶意破解密码、刷票、论坛灌水；</li></ol><p><strong>20 title与h1的区别、b与strong的区别、i与em的区别？</strong></p><p>title属性没有明确意义，只表示标题；h1表示层次明确的标题，对页面信息的抓取也有很大的影响<br>strong标明重点内容，语气加强含义；b是无意义的视觉表示<br>em表示强调文本；i是斜体，是无意义的视觉表示<br>视觉样式标签：<code>b i u s</code><br>语义样式标签：<code>strong em ins del code</code></p><p><strong>21 元素的alt和title有什么异同？</strong></p><p>在alt和title同时设置的时候，alt作为图片的替代文字出现，title是图片的解释文字。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue面试题(一)</title>
      <link href="/bubble/2020/07/23/vue2020ms1/"/>
      <url>/bubble/2020/07/23/vue2020ms1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\bubble\css\APlayer.min.css"><script src="\bubble\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\bubble\js\Meting.min.js"></script><h3 id="1-说一下Vue的双向绑定数据的原理"><a href="#1-说一下Vue的双向绑定数据的原理" class="headerlink" title="1. 说一下Vue的双向绑定数据的原理"></a>1. 说一下Vue的双向绑定数据的原理</h3><blockquote><p><code>vue</code> 实现数据双向绑定主要是：采用数据劫持结合发布者-订阅者模式的方式，通过 <code>Object.defineProperty()</code> 来劫持各个属性的 <code>setter</code>，<code>getter</code>，在数据变动时发布消息给订阅者，触发相应监听回调</p></blockquote><a id="more"></a><h3 id="2-解释单向数据流和双向数据绑定"><a href="#2-解释单向数据流和双向数据绑定" class="headerlink" title="2. 解释单向数据流和双向数据绑定"></a>2. 解释单向数据流和双向数据绑定</h3><blockquote><p>单向数据流： 顾名思义，数据流是单向的。数据流动方向可以跟踪，流动单一，追查问题的时候可以更快捷。缺点就是写起来不太方便。要使UI发生变更就必须创建各种 </p></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action</span><br></pre></td></tr></table></figure><p> 来维护对应的 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state</span><br></pre></td></tr></table></figure><p>双向数据绑定：数据之间是相通的，将数据变更的操作隐藏在框架内部。优点是在表单交互较多的场景下，会简化大量与业务无关的代码。缺点就是无法追踪局部状态的变化，增加了出错时 <code>debug</code> 的难度</p></blockquote><h3 id="3-Vue-如何去除url中的"><a href="#3-Vue-如何去除url中的" class="headerlink" title="3. Vue 如何去除url中的 #"></a>3. Vue 如何去除url中的 <code>#</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vue-router&#96; 默认使用 &#96;hash&#96; 模式，所以在路由加载的时候，项目中的 &#96;url&#96; 会自带 &#96;#&#96;。如果不想使用 &#96;#&#96;， 可以使用 &#96;vue-router&#96; 的另一种模式 &#96;history</span><br><span class="line">new Router(&#123;</span><br><span class="line">  mode: &#39;history&#39;,</span><br><span class="line">  routes: [ ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，当我们启用 <code>history</code> 模式的时候，由于我们的项目是一个单页面应用，所以在路由跳转的时候，就会出现访问不到静态资源而出现 <code>404</code> 的情况，这时候就需要服务端增加一个覆盖所有情况的候选资源：如果 <code>URL</code> 匹配不到任何静态资源，则应该返回同一个 <code>index.html</code> 页面</p></blockquote><h3 id="4-对-MVC、MVVM的理解"><a href="#4-对-MVC、MVVM的理解" class="headerlink" title="4. 对 MVC、MVVM的理解"></a>4. 对 MVC、MVVM的理解</h3><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://p.ananas.chaoxing.com/star3/origin/c7908f6c2ea7396260078c1edb057151.png?rw=470&rh=276&_fileSize=29048&_orientation=1"></p><p>特点：</p><ol><li><code>View</code> 传送指令到 <code>Controller</code></li><li><code>Controller</code> 完成业务逻辑后，要求 <code>Model</code> 改变状态</li><li><code>Model</code> 将新的数据发送到 <code>View</code>，用户得到反馈</li></ol><p><strong>所有通信都是单向的</strong></p><blockquote><p>MVVM</p></blockquote><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://p.ananas.chaoxing.com/star3/origin/8ebd6d8401ea2d5b3c8712b3993f0baa.png?rw=481&rh=271&_fileSize=27447&_orientation=1"></p><p>特点：</p><ol><li>各部分之间的通信，都是双向的</li><li>采用双向绑定：<code>View</code> 的变动，自动反映在 <code>ViewModel</code>，反之亦然</li></ol><p>具体请移步 <a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html">这里</a></p><h3 id="5-介绍虚拟DOM"><a href="#5-介绍虚拟DOM" class="headerlink" title="5. 介绍虚拟DOM"></a>5. 介绍虚拟DOM</h3><p><a href="https://www.jianshu.com/p/616999666920">参考这里</a></p><h3 id="6-vue生命周期的理解"><a href="#6-vue生命周期的理解" class="headerlink" title="6. vue生命周期的理解"></a>6. vue生命周期的理解</h3><blockquote><p>vue实例有一个完整的生命周期，生命周期也就是指一个实例从开始创建到销毁的这个过程</p></blockquote><ul><li><code>beforeCreated()</code> 在实例创建之间执行，数据未加载状态</li><li><code>created()</code> 在实例创建、数据加载后，能初始化数据，<code>dom</code>渲染之前执行</li><li><code>beforeMount()</code> 虚拟<code>dom</code>已创建完成，在数据渲染前最后一次更改数据</li><li><code>mounted()</code> 页面、数据渲染完成，真实<code>dom</code>挂载完成</li><li><code>beforeUpadate()</code> 重新渲染之前触发</li><li><code>updated()</code> 数据已经更改完成，<code>dom</code> 也重新 <code>render</code> 完成,更改数据会陷入死循环</li><li><code>beforeDestory()</code> 和 <code>destoryed()</code> 前者是销毁前执行（实例仍然完全可用），后者则是销毁后执行</li></ul><h3 id="7-组件通信"><a href="#7-组件通信" class="headerlink" title="7. 组件通信"></a>7. 组件通信</h3><blockquote><p>父组件向子组件通信</p></blockquote><p>子组件通过 <code>props</code> 属性，绑定父组件数据，实现双方通信</p><blockquote><p>子组件向父组件通信</p></blockquote><p>将父组件的事件在子组件中通过 <code>$emit</code> 触发</p><blockquote><p>非父子组件、兄弟组件之间的数据传递</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*新建一个Vue实例作为中央事件总嫌*&#x2F;</span><br><span class="line">let event &#x3D; new Vue();</span><br><span class="line"></span><br><span class="line">&#x2F;*监听事件*&#x2F;</span><br><span class="line">event.$on(&#39;eventName&#39;, (val) &#x3D;&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F;......do something</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;*触发事件*&#x2F;</span><br><span class="line">event.$emit(&#39;eventName&#39;, &#39;this is a message.&#39;)</span><br></pre></td></tr></table></figure><blockquote><p>Vuex 数据管理</p></blockquote><h3 id="8-vue-router-路由实现"><a href="#8-vue-router-路由实现" class="headerlink" title="8. vue-router 路由实现"></a>8. vue-router 路由实现</h3><blockquote><p>路由就是用来跟后端服务器进行交互的一种方式，通过不同的路径，来请求不同的资源，请求不同的页面是路由的其中一种功能</p></blockquote><p>参考 <a href="https://zhuanlan.zhihu.com/p/37730038">这里</a></p><h3 id="9-v-if-和-v-show-区别"><a href="#9-v-if-和-v-show-区别" class="headerlink" title="9. v-if 和 v-show 区别"></a>9. v-if 和 v-show 区别</h3><blockquote><p>使用了 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v-if</span><br></pre></td></tr></table></figure><p> 的时候，如果值为 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">false</span><br></pre></td></tr></table></figure><p> ，那么页面将不会有这个 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html</span><br></pre></td></tr></table></figure><p> 标签生成。</p><p><code>v-show</code> 则是不管值为 <code>true</code> 还是 <code>false</code> ，<code>html</code> 元素都会存在，只是 <code>CSS</code> 中的 <code>display</code> 显示或隐藏</p></blockquote><h3 id="10-route和-router的区别"><a href="#10-route和-router的区别" class="headerlink" title="10. $route和$router的区别"></a>10. $route和$router的区别</h3><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$router</span><br></pre></td></tr></table></figure><p> 为 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VueRouter</span><br></pre></td></tr></table></figure><p> 实例，想要导航到不同 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URL</span><br></pre></td></tr></table></figure><p>，则使用 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$router.push</span><br></pre></td></tr></table></figure><p> 方法</p><p><code>$route</code> 为当前 <code>router</code> 跳转对象里面可以获取 <code>name</code> 、 <code>path</code> 、 <code>query</code> 、 <code>params</code> 等</p></blockquote><h3 id="11-NextTick-是做什么的"><a href="#11-NextTick-是做什么的" class="headerlink" title="11. NextTick 是做什么的"></a>11. NextTick 是做什么的</h3><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$nextTick&#96; 是在下次 &#96;DOM&#96; 更新循环结束之后执行延迟回调，在修改数据之后使用 &#96;$nextTick&#96;，则可以在回调中获取更新后的 &#96;DOM</span><br></pre></td></tr></table></figure></blockquote><p>具体可参考官方文档 <a href="https://cn.vuejs.org/v2/guide/reactivity.html">深入响应式原理</a></p><h3 id="12-Vue-组件-data-为什么必须是函数"><a href="#12-Vue-组件-data-为什么必须是函数" class="headerlink" title="12. Vue 组件 data 为什么必须是函数"></a>12. Vue 组件 data 为什么必须是函数</h3><blockquote><p>因为js本身的特性带来的，如果 <code>data</code> 是一个对象，那么由于对象本身属于引用类型，当我们修改其中的一个属性时，会影响到所有Vue实例的数据。如果将 <code>data</code> 作为一个函数返回一个对象，那么每一个实例的 <code>data</code> 属性都是独立的，不会相互影响了</p></blockquote><h3 id="13-计算属性computed-和事件-methods-有什么区别"><a href="#13-计算属性computed-和事件-methods-有什么区别" class="headerlink" title="13. 计算属性computed 和事件 methods 有什么区别"></a>13. 计算属性computed 和事件 methods 有什么区别</h3><p>我们可以将同一函数定义为一个 <code>method</code> 或者一个计算属性。对于最终的结果，两种方式是相同的</p><p>不同点：</p><blockquote><p>computed: 计算属性是基于它们的依赖进行缓存的,只有在它的相关依赖发生改变时才会重新求值</p><p>对于 <code>method</code> ，只要发生重新渲染，<code>method</code> 调用总会执行该函数</p></blockquote><h3 id="14-对比-jQuery-，Vue-有什么不同"><a href="#14-对比-jQuery-，Vue-有什么不同" class="headerlink" title="14. 对比 jQuery ，Vue 有什么不同"></a>14. 对比 jQuery ，Vue 有什么不同</h3><blockquote><p>jQuery 专注视图层，通过操作 DOM 去实现页面的一些逻辑渲染； Vue 专注于数据层，通过数据的双向绑定，最终表现在 DOM 层面，减少了 DOM 操作</p><p>Vue 使用了组件化思想，使得项目子集职责清晰，提高了开发效率，方便重复利用，便于协同开发</p></blockquote><h3 id="15-Vue-中怎么自定义指令"><a href="#15-Vue-中怎么自定义指令" class="headerlink" title="15. Vue 中怎么自定义指令"></a>15. Vue 中怎么自定义指令</h3><blockquote><p>全局注册</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 注册一个全局自定义指令 &#96;v-focus&#96;</span><br><span class="line">Vue.directive(&#39;focus&#39;, &#123;</span><br><span class="line">  &#x2F;&#x2F; 当被绑定的元素插入到 DOM 中时……</span><br><span class="line">  inserted: function (el) &#123;</span><br><span class="line">    &#x2F;&#x2F; 聚焦元素</span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>局部注册</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">directives: &#123;</span><br><span class="line">  focus: &#123;</span><br><span class="line">    &#x2F;&#x2F; 指令的定义</span><br><span class="line">    inserted: function (el) &#123;</span><br><span class="line">      el.focus()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考 <a href="https://cn.vuejs.org/v2/guide/custom-directive.html">官方文档-自定义指令</a></p><h3 id="16-Vue-中怎么自定义过滤器"><a href="#16-Vue-中怎么自定义过滤器" class="headerlink" title="16. Vue 中怎么自定义过滤器"></a>16. Vue 中怎么自定义过滤器</h3><blockquote><p>可以用全局方法 <code>Vue.filter()</code> 注册一个自定义过滤器，它接收两个参数：过滤器 <code>ID</code> 和过滤器函数。过滤器函数以值为参数，返回转换后的值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(&#39;reverse&#39;, function (value) &#123;</span><br><span class="line">  return value.split(&#39;&#39;).reverse().join(&#39;&#39;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;!-- &#39;abc&#39; &#x3D;&gt; &#39;cba&#39; --&gt;</span><br><span class="line">&lt;span v-text&#x3D;&quot;message | reverse&quot;&gt;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure><p>过滤器也同样接受全局注册和局部注册</p><h3 id="17-对-keep-alive-的了解"><a href="#17-对-keep-alive-的了解" class="headerlink" title="17. 对 keep-alive 的了解"></a>17. 对 keep-alive 的了解</h3><blockquote><p><code>keep-alive</code> 是 <code>Vue</code> 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;component&gt;</span><br><span class="line">    &lt;!-- 该组件将被缓存！ --&gt;</span><br><span class="line">  &lt;&#x2F;component&gt;</span><br><span class="line">&lt;&#x2F;keep-alive&gt;</span><br></pre></td></tr></table></figure><blockquote><p>可以使用API提供的props，实现组件的动态缓存</p></blockquote><p>具体参考 <a href="https://cn.vuejs.org/v2/api/#keep-alive">官方API</a></p><h3 id="18-Vue-中-key-的作用"><a href="#18-Vue-中-key-的作用" class="headerlink" title="18. Vue 中 key 的作用"></a>18. Vue 中 key 的作用</h3><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key</span><br></pre></td></tr></table></figure><p> 的特殊属性主要用在 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue</span><br></pre></td></tr></table></figure><p> 的虚拟 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOM</span><br></pre></td></tr></table></figure><p> 算法，在新旧 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodes</span><br></pre></td></tr></table></figure><p> 对比时辨识 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VNodes</span><br></pre></td></tr></table></figure><p>。如果不使用 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key</span><br></pre></td></tr></table></figure><p>，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue</span><br></pre></td></tr></table></figure><p> 会使用一种最大限度减少动态元素并且尽可能的尝试修复/再利用相同类型元素的算法。使用 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key</span><br></pre></td></tr></table></figure><p>，它会基于 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key</span><br></pre></td></tr></table></figure><p> 的变化重新排列元素顺序，并且会移除 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key</span><br></pre></td></tr></table></figure><p> 不存在的元素。</p><p>有相同父元素的子元素必须有独特的 <code>key</code>。重复的 <code>key</code> 会造成渲染错误</p></blockquote><p>具体参考 <a href="https://cn.vuejs.org/v2/api/#key">官方API</a></p><h3 id="19-Vue-的核心是什么"><a href="#19-Vue-的核心是什么" class="headerlink" title="19. Vue 的核心是什么"></a>19. Vue 的核心是什么</h3><blockquote><p>数据驱动 组件系统</p></blockquote><h3 id="20-vue-等单页面应用的优缺点"><a href="#20-vue-等单页面应用的优缺点" class="headerlink" title="20. vue 等单页面应用的优缺点"></a>20. vue 等单页面应用的优缺点</h3><blockquote><p>优点：</p></blockquote><ul><li>良好的交互体验</li><li>良好的前后端工作分离模式</li><li>减轻服务器压力</li></ul><blockquote><p>缺点：</p></blockquote><ul><li>SEO难度较高</li><li>前进、后退管理</li><li>初次加载耗时多</li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> Vue </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css面试题</title>
      <link href="/bubble/2020/07/23/css2020ms/"/>
      <url>/bubble/2020/07/23/css2020ms/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\bubble\css\APlayer.min.css"><script src="\bubble\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\bubble\js\Meting.min.js"></script><h3 id="1-、介绍一下标准的CSS的盒子模型？与低版本IE的盒子模型有什么不同的？"><a href="#1-、介绍一下标准的CSS的盒子模型？与低版本IE的盒子模型有什么不同的？" class="headerlink" title="1 、介绍一下标准的CSS的盒子模型？与低版本IE的盒子模型有什么不同的？"></a>1 、介绍一下标准的CSS的盒子模型？与低版本IE的盒子模型有什么不同的？</h3><p>标准盒子模型：宽度=内容的宽度（content）+ border + padding + margin<br>低版本IE盒子模型：宽度=内容宽度（content+border+padding）+ margin</p><a id="more"></a><h3 id="2、-box-sizing属性？"><a href="#2、-box-sizing属性？" class="headerlink" title="2、 box-sizing属性？"></a>2、 box-sizing属性？</h3><p>用来控制元素的盒子模型的解析模式，默认为content-box<br>context-box：W3C的标准盒子模型，设置元素的 height/width 属性指的是content部分的高/宽<br>border-box：IE传统盒子模型。设置元素的height/width属性指的是border + padding + content部分的高/宽</p><h3 id="3、-CSS选择器有哪些？哪些属性可以继承？"><a href="#3、-CSS选择器有哪些？哪些属性可以继承？" class="headerlink" title="3、 CSS选择器有哪些？哪些属性可以继承？"></a>3、 CSS选择器有哪些？哪些属性可以继承？</h3><p>id选择器(#myid)、类选择器(.myclassname)、标签选择器(div, h1, p)、相邻选择器(h1 + p)、子选择器（ul &gt; li）、后代选择器（li a）、通配符选择器（*）、属性选择器（a[rel=“external”]）、伪类选择器（a:hover, li:nth-child）<br>可继承的属性：font-size, font-family, color<br>不可继承的样式：border, padding, margin, width, height<br>优先级（就近原则）：!important &gt; [ id &gt; class &gt; tag ]<br>!important 比内联优先级高.</p><h3 id="4、-CSS优先级算法如何计算？"><a href="#4、-CSS优先级算法如何计算？" class="headerlink" title="4、 CSS优先级算法如何计算？"></a>4、 CSS优先级算法如何计算？</h3><p>元素选择符： 1<br>class选择符： 10<br>id选择符：100<br>元素标签：1000<br>➤!important声明的样式优先级最高，如果冲突再进行计算。<br>➤如果优先级相同，则选择最后出现的样式。<br>➤继承得到的样式的优先级最低。</p><h3 id="5-、CSS3新增伪类有那些"><a href="#5-、CSS3新增伪类有那些" class="headerlink" title="5 、CSS3新增伪类有那些?"></a>5 、CSS3新增伪类有那些?</h3><p>p:first-of-type 选择属于其父元素的首个元素<br>p:last-of-type 选择属于其父元素的最后元素<br>p:only-of-type 选择属于其父元素唯一的元素<br>p:only-child 选择属于其父元素的唯一子元素<br>p:nth-child(2) 选择属于其父元素的第二个子元素<br>:enabled :disabled 表单控件的禁用状态。<br>:checked 单选框或复选框被选中。</p><h3 id="6、如何居中div？如何居中一个浮动元素？如何让绝对定位的div居中？"><a href="#6、如何居中div？如何居中一个浮动元素？如何让绝对定位的div居中？" class="headerlink" title="6、如何居中div？如何居中一个浮动元素？如何让绝对定位的div居中？"></a>6、如何居中div？如何居中一个浮动元素？如何让绝对定位的div居中？</h3><h4 id="div："><a href="#div：" class="headerlink" title="div："></a>div：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;<span class="selector-tag">margin</span>: 0 <span class="selector-tag">auto</span>; </span><br><span class="line"><span class="selector-tag">height</span>: 50<span class="selector-tag">px</span>;<span class="selector-tag">width</span>: 80<span class="selector-tag">px</span>;</span><br><span class="line">12</span><br></pre></td></tr></table></figure><h4 id="浮动元素的上下左右居中："><a href="#浮动元素的上下左右居中：" class="headerlink" title="浮动元素的上下左右居中："></a>浮动元素的上下左右居中：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span><br><span class="line"><span class="selector-tag">float</span>: <span class="selector-tag">left</span>;<span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line"><span class="selector-tag">width</span>: 200<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">height</span>: 100<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">left</span>: 50%;</span><br><span class="line"><span class="selector-tag">top</span>: 50%;</span><br><span class="line"><span class="selector-tag">margin</span>: <span class="selector-tag">-50px</span> 0 0 <span class="selector-tag">-100px</span>; </span><br><span class="line">1234567</span><br></pre></td></tr></table></figure><h4 id="绝对定位的左右居中："><a href="#绝对定位的左右居中：" class="headerlink" title="绝对定位的左右居中："></a>绝对定位的左右居中：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">black</span>;</span><br><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line"><span class="selector-tag">width</span>: 200<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">height</span>: 100<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">margin</span>: 0 <span class="selector-tag">auto</span>;</span><br><span class="line"><span class="selector-tag">left</span>: 0;</span><br><span class="line"><span class="selector-tag">right</span>: 0; </span><br><span class="line">1234567</span><br></pre></td></tr></table></figure><h3 id="7-、display有哪些值？说明他们的作用"><a href="#7-、display有哪些值？说明他们的作用" class="headerlink" title="7 、display有哪些值？说明他们的作用?"></a>7 、display有哪些值？说明他们的作用?</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//inline（默认）--内联</span></span><br><span class="line"><span class="comment">//none--隐藏</span></span><br><span class="line"><span class="comment">//block--块显示</span></span><br><span class="line"><span class="comment">//table--表格显示</span></span><br><span class="line"><span class="comment">//list-item--项目列表</span></span><br><span class="line"><span class="comment">//inline-block  内链块元素</span></span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><h3 id="8、-position的值？"><a href="#8、-position的值？" class="headerlink" title="8、 position的值？"></a>8、 position的值？</h3><p>static（默认）：按照正常文档流进行排列；<br>relative（相对定位）：不脱离文档流，参考自身静态位置通过 top, bottom, left, right 定位；<br>absolute(绝对定位)：参考距其最近一个不为static的父级元素通过top, bottom, left, right 定位；<br>fixed(固定定位)：所固定的参照对像是可视窗口。</p><h3 id="9、-CSS3有哪些新特性？"><a href="#9、-CSS3有哪些新特性？" class="headerlink" title="9、 CSS3有哪些新特性？"></a>9、 CSS3有哪些新特性？</h3><p>➤RGBA和透明度</p><p>➤background-image background-origin(content-box/padding-box/border-box) background-size background-repeat</p><p>➤word-wrap（对长的不可分割单词换行）word-wrap：break-word</p><p>➤文字阴影：text-shadow： 5px 5px 5px #FF0000;（水平阴影，垂直阴影，模糊距离，阴影颜色）</p><p>➤font-face属性：定义自己的字体</p><p>➤圆角（边框半径）：border-radius 属性用于创建圆角</p><p>➤边框图片：border-image: url(border.png) 30 30 round</p><p>➤盒阴影：box-shadow: 10px 10px 5px #888888</p><p>➤媒体查询：定义两套css，当浏览器的尺寸变化时会采用不同的属性</p><h3 id="10、-请解释一下CSS3的flexbox（弹性盒布局模型）-以及适用场景？"><a href="#10、-请解释一下CSS3的flexbox（弹性盒布局模型）-以及适用场景？" class="headerlink" title="10、 请解释一下CSS3的flexbox（弹性盒布局模型）,以及适用场景？"></a>10、 请解释一下CSS3的flexbox（弹性盒布局模型）,以及适用场景？</h3><p>该布局模型的目的是提供一种更加高效的方式来对容器中的条目进行布局、对齐和分配空间。在传统的布局方式中，block 布局是把块在垂直方向从上到下依次排列的；</p><p>而 inline 布局则是在水平方向来排列。弹性盒布局并没有这样内在的方向限制，可以由开发人员自由操作。<br>试用场景：弹性布局适合于移动前端开发，在Android和ios上也完美支持。</p><h3 id="11-、用纯CSS创建一个三角形的原理是什么？"><a href="#11-、用纯CSS创建一个三角形的原理是什么？" class="headerlink" title="11 、用纯CSS创建一个三角形的原理是什么？"></a>11 、用纯CSS创建一个三角形的原理是什么？</h3><p><strong>首先，需要把元素的宽度、高度设为0。然后设置边框样式。</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: 0;</span><br><span class="line"><span class="selector-tag">height</span>: 0;</span><br><span class="line"><span class="selector-tag">border-top</span>: 40<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">transparent</span>;</span><br><span class="line"><span class="selector-tag">border-left</span>: 40<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">transparent</span>;</span><br><span class="line"><span class="selector-tag">border-right</span>: 40<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">transparent</span>;</span><br><span class="line"><span class="selector-tag">border-bottom</span>: 40<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ff0000</span>;</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><h3 id="12-、一个满屏品字布局如何设计"><a href="#12-、一个满屏品字布局如何设计" class="headerlink" title="12 、一个满屏品字布局如何设计?"></a>12 、一个满屏品字布局如何设计?</h3><p>第一种真正的品字：</p><p>➤三块高宽是确定的；</p><p>➤上面那块用margin: 0 auto;居中；</p><p>➤下面两块用float或者inline-block不换行；</p><p>➤用margin调整位置使他们居中。</p><p>第二种全屏的品字布局:<br>上面的div设置成100%，下面的div分别宽50%，然后使用float或者inline使其不换行。</p><h3 id="13、-常见的兼容性问题？"><a href="#13、-常见的兼容性问题？" class="headerlink" title="13、 常见的兼容性问题？"></a>13、 常见的兼容性问题？</h3><p>➤不同浏览器的标签默认的margin和padding不一样。</p><p>*{margin:0;padding:0;}</p><p>➤IE6双边距bug：块属性标签float后，又有横行的margin情况下，在IE6显示margin比设置的大。hack：display:inline;将其转化为行内属性。</p><p>➤渐进识别的方式，从总体中逐渐排除局部。首先，巧妙的使用“9”这一标记，将IE浏览器从所有情况中分离出来。接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attribute">background-color</span>:<span class="number">#f1ee18</span>;</span><br><span class="line"><span class="comment">/*所有识别*/</span></span><br><span class="line"><span class="attribute">.background-color</span>:<span class="number">#00deff</span>\<span class="number">9</span>; </span><br><span class="line"><span class="comment">/*IE6、7、8识别*/</span></span><br><span class="line">+background-color:#a200ff;</span><br><span class="line"><span class="comment">/*IE6、7识别*/</span></span><br><span class="line">_<span class="selector-tag">background-color</span>:<span class="selector-id">#1e0bd1</span>;</span><br><span class="line"><span class="comment">/*IE6识别*/</span>&#125;</span><br><span class="line">12345678</span><br></pre></td></tr></table></figure><p>➤设置较小高度标签（一般小于10px），在IE6，IE7中高度超出自己设置高度。hack：给超出高度的标签设置overflow:hidden;或者设置行高line-height 小于你设置的高度。</p><p>➤IE下，可以使用获取常规属性的方法来获取自定义属性,也可以使用getAttribute()获取自定义属性；Firefox下，只能使用getAttribute()获取自定义属性。解决方法:统一通过getAttribute()获取自定义属性。</p><p>➤Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。</p><p>➤超链接访问过后hover样式就不出现了，被点击访问过的超链接样式不再具有hover和active了。</p><p>解决方法是改变CSS属性的排列顺序:L-V-H-A ( love hate ): a:link {} a:visited {} a:hover {} a:active {}</p><h3 id="14、-为什么要初始化CSS样式"><a href="#14、-为什么要初始化CSS样式" class="headerlink" title="14、 为什么要初始化CSS样式"></a>14、 为什么要初始化CSS样式</h3><p>因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。</p><h3 id="15、-absolute的containing-block计算方式跟正常流有什么不同？"><a href="#15、-absolute的containing-block计算方式跟正常流有什么不同？" class="headerlink" title="15、 absolute的containing block计算方式跟正常流有什么不同？"></a>15、 absolute的containing block计算方式跟正常流有什么不同？</h3><p>无论属于哪种，都要先找到其祖先元素中最近的 position 值不为 static 的元素，然后再判断：</p><p>➤若此元素为 inline 元素，则 containing block 为能够包含这个元素生成的第一个和最后一个 inline box 的 padding box (除 margin, border 外的区域) 的最小矩形；</p><p>➤否则,则由这个祖先元素的 padding box 构成。</p><p>如果都找不到，则为 initial containing block。</p><h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><p>➤static(默认的)/relative：简单说就是它的父元素的内容框（即去掉padding的部分）</p><p>➤absolute: 向上找最近的定位为absolute/relative的元素</p><p>➤fixed: 它的containing block一律为根元素(html/body)</p><h3 id="16、-CSS里的visibility属性有个collapse属性值？在不同浏览器下以后什么区别？"><a href="#16、-CSS里的visibility属性有个collapse属性值？在不同浏览器下以后什么区别？" class="headerlink" title="16、 CSS里的visibility属性有个collapse属性值？在不同浏览器下以后什么区别？"></a>16、 CSS里的visibility属性有个collapse属性值？在不同浏览器下以后什么区别？</h3><p>当一个元素的visibility属性被设置成collapse值后，对于一般的元素，它的表现跟hidden是一样的。、<br>➤chrome中，使用collapse值和使用hidden没有区别。</p><p>➤firefox，opera和IE，使用collapse值和使用display：none没有什么区别。</p><h3 id="17、-display-none与visibility：hidden的区别？"><a href="#17、-display-none与visibility：hidden的区别？" class="headerlink" title="17、 display:none与visibility：hidden的区别？"></a>17、 display:none与visibility：hidden的区别？</h3><p>display：none 不显示对应的元素，在文档布局中不再分配空间（回流+重绘）<br>visibility：hidden 隐藏对应元素，在文档布局中仍保留原来的空间（重绘）</p><h3 id="18、-position跟display、overflow、float这些特性相互叠加后会怎么样？"><a href="#18、-position跟display、overflow、float这些特性相互叠加后会怎么样？" class="headerlink" title="18、 position跟display、overflow、float这些特性相互叠加后会怎么样？"></a>18、 position跟display、overflow、float这些特性相互叠加后会怎么样？</h3><p>display属性规定元素应该生成的框的类型；position属性规定元素的定位类型；float属性是一种布局方式，定义元素在哪个方向浮动。</p><p>类似于优先级机制：position：absolute/fixed优先级最高，有他们在时，float不起作用，display值需要调整。float 或者absolute定位的元素，只能是块元素或表格。</p><p>19、 对BFC规范(块级格式化上下文：block formatting context)的理解？</p><p>BFC规定了内部的Block Box如何布局。<br>定位方案：</p><p>➤内部的Box会在垂直方向上一个接一个放置。</p><p>➤Box垂直方向的距离由margin决定，属于同一个BFC的两个相邻Box的margin会发生重叠。</p><p>➤每个元素的margin box 的左边，与包含块border box的左边相接触。</p><p>➤BFC的区域不会与float box重叠。</p><p>➤BFC是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。</p><p>➤计算BFC的高度时，浮动元素也会参与计算。</p><p>满足下列条件之一就可触发BFC</p><p>➤根元素，即html</p><p>➤float的值不为none（默认）</p><p>➤overflow的值不为visible（默认）</p><p>➤display的值为inline-block、table-cell、table-caption</p><p>➤position的值为absolute或fixed</p><h3 id="20、-为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式？"><a href="#20、-为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式？" class="headerlink" title="20、 为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式？"></a>20、 为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式？</h3><p>浮动元素碰到包含它的边框或者浮动元素的边框停留。由于浮动元素不在文档流中，所以文档流的块框表现得就像浮动框不存在一样。</p><p>浮动元素会漂浮在文档流的块框上。<br><strong>浮动带来的问题：</strong><br>➤父元素的高度无法被撑开，影响与父元素同级的元素</p><p>➤与浮动元素同级的非浮动元素（内联元素）会跟随其后</p><p>➤若非第一个元素浮动，则该元素之前的元素也需要浮动，否则会影响页面显示的结构。<br><strong>清除浮动的方式：</strong><br>➤父级div定义height</p><p>➤最后一个浮动元素后加空div标签 并添加样式clear:both。</p><p>➤包含浮动元素的父标签添加样式overflow为hidden或auto。</p><p>➤父级div定义zoom</p><h3 id="21、-上下margin重合的问题"><a href="#21、-上下margin重合的问题" class="headerlink" title="21、 上下margin重合的问题"></a>21、 上下margin重合的问题</h3><p>在重合元素外包裹一层容器，并触发该容器生成一个BFC。<br>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;aside&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;text&quot;&gt;</span><br><span class="line"> &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!<span class="selector-tag">--</span>下面是<span class="selector-tag">css</span>代码<span class="selector-tag">--</span>&gt; </span><br><span class="line"><span class="selector-class">.aside</span> &#123;            </span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;  </span><br><span class="line"> <span class="attribute">width</span>: <span class="number">100px</span>;            </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;            </span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f66</span>;</span><br><span class="line">        &#125;        </span><br><span class="line"><span class="selector-class">.main</span> &#123;           </span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">100px</span>;            </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;            </span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fcc</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="selector-class">.text</span>&#123;            </span><br><span class="line"><span class="comment">/*盒子main的外面包一个div，</span></span><br><span class="line"><span class="comment">通过改变此div的属性使两个</span></span><br><span class="line"><span class="comment">盒子分属于两个不同的BFC，</span></span><br><span class="line"><span class="comment">以此来阻止margin重叠*/</span><span class="attribute">overflow</span>: hidden;  </span><br><span class="line">//此时已经触发了BFC属性。</span><br><span class="line">        &#125;</span><br><span class="line">1234567891011121314151617181920212223</span><br></pre></td></tr></table></figure><h3 id="22、设置元素浮动后，该元素的display值是多少？"><a href="#22、设置元素浮动后，该元素的display值是多少？" class="headerlink" title="22、设置元素浮动后，该元素的display值是多少？"></a>22、设置元素浮动后，该元素的display值是多少？</h3><p>自动变成display:block</p><h3 id="23-、移动端的布局用过媒体查询吗？"><a href="#23-、移动端的布局用过媒体查询吗？" class="headerlink" title="23 、移动端的布局用过媒体查询吗？"></a>23 、移动端的布局用过媒体查询吗？</h3><p>通过媒体查询可以为不同大小和尺寸的媒体定义不同的css，适应相应的设备的显示。<br>➤里边</p><p>➤CSS : @media only screen and (max-device-width:480px) {/css样式/}、</p><h3 id="24-、使用-CSS-预处理器吗？"><a href="#24-、使用-CSS-预处理器吗？" class="headerlink" title="24 、使用 CSS 预处理器吗？"></a>24 、使用 CSS 预处理器吗？</h3><p><strong>Less sass</strong></p><h3 id="25、-CSS优化、提高性能的方法有哪些？"><a href="#25、-CSS优化、提高性能的方法有哪些？" class="headerlink" title="25、 CSS优化、提高性能的方法有哪些？"></a>25、 CSS优化、提高性能的方法有哪些？</h3><p>➤避免过度约束</p><p>➤避免后代选择符</p><p>➤避免链式选择符</p><p>➤使用紧凑的语法</p><p>➤避免不必要的命名空间</p><p>➤避免不必要的重复</p><p>➤最好使用表示语义的名字。一个好的类名应该是描述他是什么而不是像什么</p><p>➤避免！important，可以选择其他选择器</p><p>➤尽可能的精简规则，你可以合并不同类里的重复规则</p><h3 id="26-、浏览器是怎样解析CSS选择器的？"><a href="#26-、浏览器是怎样解析CSS选择器的？" class="headerlink" title="26 、浏览器是怎样解析CSS选择器的？"></a>26 、浏览器是怎样解析CSS选择器的？</h3><p>CSS选择器的解析是从右向左解析的。若从左向右的匹配，发现不符合规则，需要进行回溯，会损失很多性能。</p><p>若从右向左匹配，先找到所有的最右节点，对于每一个节点，向上寻找其父节点直到找到根元素或满足条件的匹配规则，则结束这个分支的遍历。</p><p>两种匹配规则的性能差别很大，是因为从右向左的匹配在第一步就筛选掉了大量的不符合条件的最右节点（叶子节点），而从左向右的匹配规则的性能都浪费在了失败的查找上面。</p><p>而在 CSS 解析完毕后，需要将解析的结果与 DOM Tree 的内容一起进行分析建立一棵 Render Tree，最终用来进行绘图。</p><p>在建立 Render Tree 时（WebKit 中的「Attachment」过程），浏览器就要为每个 DOM Tree 中的元素根据 CSS 的解析结果（Style Rules）来确定生成怎样的 Render Tree。</p><h3 id="27、-在网页中的应该使用奇数还是偶数的字体？为什么呢？"><a href="#27、-在网页中的应该使用奇数还是偶数的字体？为什么呢？" class="headerlink" title="27、 在网页中的应该使用奇数还是偶数的字体？为什么呢？"></a>27、 在网页中的应该使用奇数还是偶数的字体？为什么呢？</h3><p>使用偶数字体。偶数字号相对更容易和 web 设计的其他部分构成比例关系。Windows 自带的点阵宋体（中易宋体）从 Vista 开始只提供 12、14、16 px 这三个大小的点阵，而 13、15、17 px时用的是小一号的点。（即每个字占的空间大了 1 px，但点阵没变），于是略显稀疏。</p><h3 id="28、-margin和padding分别适合什么场景使用？"><a href="#28、-margin和padding分别适合什么场景使用？" class="headerlink" title="28、 margin和padding分别适合什么场景使用？"></a>28、 margin和padding分别适合什么场景使用？</h3><p><strong>何时使用margin：</strong></p><p>➤需要在border外侧添加空白</p><p>➤空白处不需要背景色</p><p>➤上下相连的两个盒子之间的空白，需要相互抵消时。</p><p><strong>何时使用padding：</strong></p><p>➤需要在border内侧添加空白</p><p>➤空白处需要背景颜色</p><p>➤上下相连的两个盒子的空白，希望为两者之和。</p><p>兼容性的问题：在IE5 IE6中，为float的盒子指定margin时，左侧的margin可能会变成两倍的宽度。通过改变padding或者指定盒子的display：inline解决。</p><h3 id="29、-元素竖向的百分比设定是相对于容器的高度吗？"><a href="#29、-元素竖向的百分比设定是相对于容器的高度吗？" class="headerlink" title="29、 元素竖向的百分比设定是相对于容器的高度吗？"></a>29、 元素竖向的百分比设定是相对于容器的高度吗？</h3><p>当按百分比设定一个元素的宽度时，它是相对于父容器的宽度计算的，但是，对于一些表示竖向距离的属性，例如 padding-top , padding-bottom , margin-top , margin-bottom 等，当按百分比设定它们时，依据的也是父容器的宽度，而不是高度。</p><h3 id="30、-全屏滚动的原理是什么？用到了CSS的哪些属性？"><a href="#30、-全屏滚动的原理是什么？用到了CSS的哪些属性？" class="headerlink" title="30、 全屏滚动的原理是什么？用到了CSS的哪些属性？"></a>30、 全屏滚动的原理是什么？用到了CSS的哪些属性？</h3><p>➤原理：有点类似于轮播，整体的元素一直排列下去，假设有5个需要展示的全屏页面，那么高度是500%，只是展示100%，剩下的可以通过transform进行y轴定位，也可以通过margin-top实现</p><p>➤overflow：hidden；transition：all 1000ms ease；</p><h3 id="31、-什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？"><a href="#31、-什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？" class="headerlink" title="31、 什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？"></a>31、 什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？</h3><p>响应式网站设计(Responsive Web design)是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本。<br>基本原理是通过媒体查询检测不同的设备屏幕尺寸做处理。<br>页面头部必须有meta声明的viewport。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=’viewport’ </span><br><span class="line">content=”width=device-width, </span><br><span class="line">initial-scale=1. maximum-scale=1,</span><br><span class="line">user-scalable=no”&gt;</span><br><span class="line">1234</span><br></pre></td></tr></table></figure><h3 id="32、-视差滚动效果？"><a href="#32、-视差滚动效果？" class="headerlink" title="32、 视差滚动效果？"></a>32、 视差滚动效果？</h3><p>视差滚动（Parallax Scrolling）通过在网页向下滚动的时候，控制背景的移动速度比前景的移动速度慢来创建出令人惊叹的3D效果。</p><p>➤CSS3实现<br>优点：开发时间短、性能和开发效率比较好，缺点是不能兼容到低版本的浏览器</p><p>➤jQuery实现<br>通过控制不同层滚动速度，计算每一层的时间，控制滚动效果。<br>优点：能兼容到各个版本的，效果可控性好<br>缺点：开发起来对制作者要求高</p><p>➤插件实现方式<br>例如：parallax-scrolling，兼容性十分好</p><h3 id="33、-before-和-after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用"><a href="#33、-before-和-after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用" class="headerlink" title="33、 ::before 和 :after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用"></a>33、 ::before 和 :after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用</h3><p>➤单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。</p><p>➤::before就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于dom之中，只存在在页面之中。</p><p>:before 和 :after 这两个伪元素，是在CSS2.1里新出现的。起初，伪元素的前缀使用的是单冒号语法，但随着Web的进化，在CSS3的规范里，伪元素的语法被修改成使用双冒号，成为::before ::after</p><h3 id="34-、你对line-height是如何理解的？"><a href="#34-、你对line-height是如何理解的？" class="headerlink" title="34 、你对line-height是如何理解的？"></a>34 、你对line-height是如何理解的？</h3><p>行高是指一行文字的高度，具体说是两行文字间基线的距离。CSS中起高度作用的是height和line-height，没有定义height属性，最终其表现作用一定是line-height。</p><p>单行文本垂直居中：把line-height值设置为height一样大小的值可以实现单行文字的垂直居中，其实也可以把height删除。<br>多行文本垂直居中：需要设置display属性为inline-block。</p><h3 id="35-、怎么让Chrome支持小于12px-的文字？"><a href="#35-、怎么让Chrome支持小于12px-的文字？" class="headerlink" title="35 、怎么让Chrome支持小于12px 的文字？"></a>35 、怎么让Chrome支持小于12px 的文字？</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">10px</span>;</span><br><span class="line"><span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(<span class="number">0.8</span>);</span><br><span class="line">&#125; </span><br><span class="line">//0.8是缩放比例</span><br><span class="line">12345</span><br></pre></td></tr></table></figure><h2 id="36、让页面里的字体变清晰，变细用CSS怎么做？"><a href="#36、让页面里的字体变清晰，变细用CSS怎么做？" class="headerlink" title="36、让页面里的字体变清晰，变细用CSS怎么做？"></a>36、让页面里的字体变清晰，变细用CSS怎么做？</h2><p>-webkit-font-smoothing在window系统下没有起作用，但是在IOS设备上起作用-webkit-font-smoothing：antialiased是最佳的，灰度平滑。</p><h3 id="37、position-fixed-在android下无效怎么处理？"><a href="#37、position-fixed-在android下无效怎么处理？" class="headerlink" title="37、position:fixed;在android下无效怎么处理？"></a>37、position:fixed;在android下无效怎么处理？</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; </span><br><span class="line">content=&quot;width=device-width, </span><br><span class="line">initial-scale=1.0, </span><br><span class="line">maximum-scale=1.0, </span><br><span class="line">minimum-scale=1.0, </span><br><span class="line">user-scalable=no&quot;/&gt;</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><h3 id="38、如果需要手动写动画，你认为最小时间间隔是多久，为什么？"><a href="#38、如果需要手动写动画，你认为最小时间间隔是多久，为什么？" class="headerlink" title="38、如果需要手动写动画，你认为最小时间间隔是多久，为什么？"></a>38、如果需要手动写动画，你认为最小时间间隔是多久，为什么？</h3><p>多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms。</p><h3 id="39、-li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？"><a href="#39、-li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？" class="headerlink" title="39、 li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？"></a>39、 li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</h3><p>➤可以将</p><p>代码全部写在一排</p><p>➤浮动li中float：left</p><p>➤在ul中用font-size：0（谷歌不支持）；可以使用letter-space：-3px</p><h3 id="40、-display-inline-block-什么时候会显示间隙？"><a href="#40、-display-inline-block-什么时候会显示间隙？" class="headerlink" title="40、 display:inline-block 什么时候会显示间隙？"></a>40、 display:inline-block 什么时候会显示间隙？</h3><p>➤有空格时候会有间隙 解决：移除空格</p><p>➤margin正值的时候 解决：margin使用负值</p><p>➤使用font-size时候 解决：font-size:0、letter-spacing、word-spacing</p><h3 id="41、-有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度"><a href="#41、-有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度" class="headerlink" title="41、 有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度"></a>41、 有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度</h3><p>外层div使用position：relative；高度要求自适应的div使用position: absolute; top: 100px; bottom: 0; left: 0</p><h3 id="42、-png、jpg、gif-这些图片格式解释一下，分别什么时候用。有没有了解过webp？"><a href="#42、-png、jpg、gif-这些图片格式解释一下，分别什么时候用。有没有了解过webp？" class="headerlink" title="42、 png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？"></a>42、 png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？</h3><p>➤png是便携式网络图片（Portable Network Graphics）是一种无损数据压缩位图文件格式.优点是：压缩比高，色彩好。 大多数地方都可以用。</p><p>➤jpg是一种针对相片使用的一种失真压缩方法，是一种破坏性的压缩，在色调及颜色平滑变化做的不错。在www上，被用来储存和传输照片的格式。</p><p>➤gif是一种位图文件格式，以8位色重现真色彩的图像。可以实现动画效果.</p><p>➤webp格式是谷歌在2010年推出的图片格式，压缩率只有jpg的2/3，大小比png小了45%。缺点是压缩的时间更久了，兼容性不好，目前谷歌和opera支持。</p><h3 id="43、-style标签写在body后与body前有什么区别？"><a href="#43、-style标签写在body后与body前有什么区别？" class="headerlink" title="43、 style标签写在body后与body前有什么区别？"></a>43、 style标签写在body后与body前有什么区别？</h3><p>页面加载自上而下 当然是先加载样式。<br>写在body标签后由于浏览器以逐行方式对HTML文档进行解析，当解析到写在尾部的样式表（外联或写在style标签）会导致浏览器停止之前的渲染，等待加载且解析样式表完成之后重新渲染，在windows的IE下可能会出现FOUC现象（即样式失效导致的页面闪烁问题）</p><h3 id="44-、CSS属性overflow属性定义溢出元素内容区的内容会如何处理"><a href="#44-、CSS属性overflow属性定义溢出元素内容区的内容会如何处理" class="headerlink" title="44 、CSS属性overflow属性定义溢出元素内容区的内容会如何处理?"></a>44 、CSS属性overflow属性定义溢出元素内容区的内容会如何处理?</h3><p>参数是scroll时候，必会出现滚动条。<br>参数是auto时候，子元素内容大于父元素时出现滚动条。<br>参数是visible时候，溢出的内容出现在父元素之外。<br>参数是hidden时候，溢出隐藏。</p><h3 id="45-、阐述一下CSS-Sprites"><a href="#45-、阐述一下CSS-Sprites" class="headerlink" title="45 、阐述一下CSS Sprites"></a>45 、阐述一下CSS Sprites</h3><p>将一个页面涉及到的所有图片都包含到一张大图中去，然后利用CSS的 background-image，background- repeat，background-position 的组合进行背景定位。利用CSS Sprites能很好地减少网页的http请求，从而大大的提高页面的性能；CSS Sprites能减少图片的字节。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> 面试 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js面试题</title>
      <link href="/bubble/2020/07/23/js2020ms/"/>
      <url>/bubble/2020/07/23/js2020ms/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\bubble\css\APlayer.min.css"><script src="\bubble\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\bubble\js\Meting.min.js"></script><h3 id="1-javascript的typeof返回哪些数据类型"><a href="#1-javascript的typeof返回哪些数据类型" class="headerlink" title="1. javascript的typeof返回哪些数据类型."></a>1. javascript的typeof返回哪些数据类型.</h3><p>答案：string,boolean,number,undefined,function,object</p><h3 id="2-例举3种强制类型转换和2种隐式类型转换"><a href="#2-例举3种强制类型转换和2种隐式类型转换" class="headerlink" title="2. 例举3种强制类型转换和2种隐式类型转换?"></a>2. 例举3种强制类型转换和2种隐式类型转换?</h3><p>答案：强制（parseInt,parseFloat,number）<br> 隐式（==  ===）</p><a id="more"></a><h3 id="3-split-join-的区别"><a href="#3-split-join-的区别" class="headerlink" title="3. split() join() 的区别"></a>3. split() join() 的区别</h3><p>答案：前者是将字符串切割成数组的形式，后者是将数组转换成字符串</p><h3 id="4-数组方法pop-push-unshift-shift"><a href="#4-数组方法pop-push-unshift-shift" class="headerlink" title="4. 数组方法pop() push() unshift() shift()"></a>4. 数组方法pop() push() unshift() shift()</h3><p>答案：push()尾部添加 pop()尾部删除<br> unshift()头部添加 shift()头部删除</p><h3 id="5-IE和标准下有哪些兼容性的写法"><a href="#5-IE和标准下有哪些兼容性的写法" class="headerlink" title="5. IE和标准下有哪些兼容性的写法"></a>5. IE和标准下有哪些兼容性的写法</h3><p>答案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event</span><br><span class="line"><span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth</span><br><span class="line">Var target = ev.srcElement||ev.target</span><br></pre></td></tr></table></figure><h3 id="6-ajax请求的时候get-和post方式的区别"><a href="#6-ajax请求的时候get-和post方式的区别" class="headerlink" title="6. ajax请求的时候get 和post方式的区别"></a>6. ajax请求的时候get 和post方式的区别</h3><p>答案：<br> 一个在url后面 ，一个放在虚拟载体里面<br> get有大小限制(只能提交少量参数)<br> 安全问题<br> 应用不同 ，请求数据和提交数据</p><h3 id="7-call和apply的区别"><a href="#7-call和apply的区别" class="headerlink" title="7. call和apply的区别"></a>7. call和apply的区别</h3><p>答案：<br> Object.call(this,obj1,obj2,obj3)<br> Object.apply(this,arguments)</p><h3 id="8-ajax请求时，如何解析json数据"><a href="#8-ajax请求时，如何解析json数据" class="headerlink" title="8. ajax请求时，如何解析json数据"></a>8. ajax请求时，如何解析json数据</h3><p>答案：使用JSON.parse</p><h3 id="9-事件委托是什么"><a href="#9-事件委托是什么" class="headerlink" title="9. 事件委托是什么"></a>9. 事件委托是什么</h3><p>答案: 利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！</p><h3 id="10-闭包是什么，有什么特性，对页面有什么影响"><a href="#10-闭包是什么，有什么特性，对页面有什么影响" class="headerlink" title="10. 闭包是什么，有什么特性，对页面有什么影响"></a>10. 闭包是什么，有什么特性，对页面有什么影响</h3><p>答案：闭包就是能够读取其他函数内部变量的函数,使得函数不被GC回收，如果过多使用闭包，容易导致内存泄露</p><h3 id="11-如何阻止事件冒泡"><a href="#11-如何阻止事件冒泡" class="headerlink" title="11. 如何阻止事件冒泡"></a>11. 如何阻止事件冒泡</h3><p>答案：ie:阻止冒泡ev.cancelBubble = true;非IE ev.stopPropagation();</p><h3 id="12-如何阻止默认事件"><a href="#12-如何阻止默认事件" class="headerlink" title="12. 如何阻止默认事件"></a>12. 如何阻止默认事件</h3><p>答案：(1)return false；(2) ev.preventDefault();</p><h3 id="13-添加-删除-替换-插入到某个接点的方法"><a href="#13-添加-删除-替换-插入到某个接点的方法" class="headerlink" title="13. 添加 删除 替换 插入到某个接点的方法"></a>13. 添加 删除 替换 插入到某个接点的方法</h3><p>答案：</p><p>1）创建新节点<br> createElement()   //创建一个具体的元素<br> createTextNode()   //创建一个文本节点</p><p>2）添加、移除、替换、插入<br> appendChild()      //添加<br> removeChild()      //移除<br> replaceChild()      //替换<br> insertBefore()      //插入</p><p>3）查找<br> getElementsByTagName()    //通过标签名称<br> getElementsByName()     //通过元素的Name属性的值<br> getElementById()        //通过元素Id，唯一性</p><h3 id="14-解释jsonp的原理，以及为什么不是真正的ajax"><a href="#14-解释jsonp的原理，以及为什么不是真正的ajax" class="headerlink" title="14. 解释jsonp的原理，以及为什么不是真正的ajax"></a>14. 解释jsonp的原理，以及为什么不是真正的ajax</h3><p>答案：动态创建script标签，回调函数<br> Ajax是页面无刷新请求数据操作</p><h3 id="15-document-load-和document-ready的区别"><a href="#15-document-load-和document-ready的区别" class="headerlink" title="15. document load 和document ready的区别"></a>15. document load 和document ready的区别</h3><p>答案：document.onload 是在结构和样式,外部js以及图片加载完才执行js<br> document.ready是dom树创建完成就执行的方法，原生种没有这个方法，jquery中有 $().ready(function)</p><h3 id="16-”-”和“-”的不同"><a href="#16-”-”和“-”的不同" class="headerlink" title="16. ”==”和“===”的不同"></a>16. ”==”和“===”的不同</h3><p>答案：前者会自动转换类型,再判断是否相等<br> 后者不会自动类型转换，直接去比较</p><h3 id="17-函数声明与函数表达式的区别？"><a href="#17-函数声明与函数表达式的区别？" class="headerlink" title="17. 函数声明与函数表达式的区别？"></a>17. 函数声明与函数表达式的区别？</h3><p>在Javscript中，解析器在向执行环境中加载数据时，对函数声明和函数表达式并非是一视同仁的，解析器会率先读取函数声明，并使其在执行任何代码之前可用（可以访问），至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解析执行。</p><h3 id="18-对作用域上下文和this的理解，看下列代码："><a href="#18-对作用域上下文和this的理解，看下列代码：" class="headerlink" title="18. 对作用域上下文和this的理解，看下列代码："></a>18. 对作用域上下文和this的理解，看下列代码：</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> User = &#123;</span><br><span class="line"> count: <span class="number">1</span>,</span><br><span class="line"> getCount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(User.getCount()); <span class="comment">// what?</span></span><br><span class="line"><span class="keyword">var</span> func = User.getCount;</span><br><span class="line"><span class="built_in">console</span>.log(func()); <span class="comment">// what?</span></span><br><span class="line">问两处<span class="built_in">console</span>输出什么？为什么？</span><br><span class="line">答案:是<span class="number">1</span>和<span class="literal">undefined</span>。</span><br><span class="line">　　func是在<span class="built_in">window</span>的上下文中被执行的，所以不会访问到count属性。</span><br></pre></td></tr></table></figure><h3 id="19-看下面代码，给出输出结果。"><a href="#19-看下面代码，给出输出结果。" class="headerlink" title="19. 看下面代码，给出输出结果。"></a>19. 看下面代码，给出输出结果。</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)&#123;  <span class="comment">//建议使用let 可正常输出i的值</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);   </span><br><span class="line">  &#125;,<span class="number">0</span>); </span><br><span class="line">&#125;;</span><br><span class="line">答案：<span class="number">4</span> <span class="number">4</span> <span class="number">4</span>。</span><br><span class="line">原因：Javascript事件处理器在线程空闲之前不会运行。</span><br></pre></td></tr></table></figure><h3 id="20-当一个DOM节点被点击时候，我们希望能够执行一个函数，应该怎么做"><a href="#20-当一个DOM节点被点击时候，我们希望能够执行一个函数，应该怎么做" class="headerlink" title="20. 当一个DOM节点被点击时候，我们希望能够执行一个函数，应该怎么做?"></a>20. 当一个DOM节点被点击时候，我们希望能够执行一个函数，应该怎么做?</h3><p>box.onlick= function(){}<br> box.addEventListener(“click”,function(){},false);<br> <button onclick="xxx()"></button></p><h3 id="21-Javascript的事件流模型都有什么"><a href="#21-Javascript的事件流模型都有什么" class="headerlink" title="21. Javascript的事件流模型都有什么?"></a>21. Javascript的事件流模型都有什么?</h3><p>“事件冒泡”：事件开始由最具体的元素接受，然后逐级向上传播</p><p>“事件捕捉”：事件由最不具体的节点先接收，然后逐级向下，一直到最具体的</p><p>“DOM事件流”：三个阶段：事件捕捉，目标阶段，事件冒泡</p><h3 id="22-看下列代码-输出什么-解释原因。"><a href="#22-看下列代码-输出什么-解释原因。" class="headerlink" title="22. 看下列代码,输出什么?解释原因。"></a>22. 看下列代码,输出什么?解释原因。</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line">alert(<span class="keyword">typeof</span> a);</span><br><span class="line">答案：<span class="keyword">object</span></span><br><span class="line">解释：<span class="literal">null</span>是一个只有一个值的数据类型，这个值就是<span class="literal">null</span>。表示一个空指针对象，所以用<span class="keyword">typeof</span>检测会返回”<span class="keyword">object</span>”。</span><br></pre></td></tr></table></figure><h3 id="23-判断字符串以字母开头，后面可以是数字，下划线，字母，长度为6-30"><a href="#23-判断字符串以字母开头，后面可以是数字，下划线，字母，长度为6-30" class="headerlink" title="23. 判断字符串以字母开头，后面可以是数字，下划线，字母，长度为6-30"></a>23. 判断字符串以字母开头，后面可以是数字，下划线，字母，长度为6-30</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^[a-zA-Z]\w&#123;5,29&#125;$/</span>;</span><br></pre></td></tr></table></figure><h3 id="24-回答以下代码，alert的值分别是多少？"><a href="#24-回答以下代码，alert的值分别是多少？" class="headerlink" title="24. 回答以下代码，alert的值分别是多少？"></a>24. 回答以下代码，alert的值分别是多少？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">     <span class="keyword">var</span> a = <span class="number">100</span>;  </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        alert(a);  </span><br><span class="line">     a = <span class="number">10</span>;  <span class="comment">//去掉了var 就变成定义了全局变量了</span></span><br><span class="line">        alert(a);  </span><br><span class="line">&#125;  </span><br><span class="line">test();</span><br><span class="line">alert(a);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">正确答案是： <span class="number">100</span>， <span class="number">10</span>， <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="25-javaScript的2种变量范围有什么不同？"><a href="#25-javaScript的2种变量范围有什么不同？" class="headerlink" title="25. javaScript的2种变量范围有什么不同？"></a>25. javaScript的2种变量范围有什么不同？</h3><p>全局变量：当前页面内有效</p><p>局部变量：函数方法内有效</p><h3 id="26-null和undefined的区别？"><a href="#26-null和undefined的区别？" class="headerlink" title="26. null和undefined的区别？"></a>26. null和undefined的区别？</h3><p>null是一个表示”无”的对象，转为数值时为0；undefined是一个表示”无”的原始值，转为数值时为NaN。</p><p>当声明的变量还未被初始化时，变量的默认值为undefined。 null用来表示尚未存在的对象</p><p>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：</p><p>（1）变量被声明了，但没有赋值时，就等于undefined。</p><p>（2）调用函数时，应该提供的参数没有提供，该参数等于undefined。</p><p>（3）对象没有赋值的属性，该属性的值为undefined。</p><p>（4）函数没有返回值时，默认返回undefined。</p><p>null表示”没有对象”，即该处不应该有值。典型用法是：</p><p>（1） 作为函数的参数，表示该函数的参数不是对象。</p><p>（2） 作为对象原型链的终点。</p><h3 id="27-new操作符具体干了什么呢"><a href="#27-new操作符具体干了什么呢" class="headerlink" title="27. new操作符具体干了什么呢?"></a>27. new操作符具体干了什么呢?</h3><p>1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。</p><p>2、属性和方法被加入到 this 引用的对象中。</p><p>3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。</p><h3 id="28-js延迟加载的方式有哪些？"><a href="#28-js延迟加载的方式有哪些？" class="headerlink" title="28. js延迟加载的方式有哪些？"></a>28. js延迟加载的方式有哪些？</h3><p>defer和async、动态创建DOM方式（创建script，插入到DOM中，加载完毕后callBack）、按需异步载入js</p><h3 id="29-Flash、Ajax各自的优缺点，在使用中如何取舍？"><a href="#29-Flash、Ajax各自的优缺点，在使用中如何取舍？" class="headerlink" title="29. Flash、Ajax各自的优缺点，在使用中如何取舍？"></a>29. Flash、Ajax各自的优缺点，在使用中如何取舍？</h3><p>Flash ajax对比</p><p>(1)Flash适合处理多媒体、矢量图形、访问机器；对CSS、处理文本上不足，不容易被搜索。</p><p>(2)ajax对CSS、文本支持很好，支持搜索；多媒体、矢量图形、机器访问不足。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">共同点：与服务器的无刷新传递消息、用户离线和在线状态、操作DOM</span><br></pre></td></tr></table></figure><h3 id="30-写一个获取非行间样式的函数"><a href="#30-写一个获取非行间样式的函数" class="headerlink" title="30. 写一个获取非行间样式的函数"></a>30. 写一个获取非行间样式的函数</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(obj.currentStyle) &#123;</span><br><span class="line"><span class="keyword">return</span> obj.currentStyle[attr];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">getComputedStyle(obi,<span class="literal">false</span>)[attr] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="31-希望获取到页面中所有的checkbox怎么做？-不使用第三方框架"><a href="#31-希望获取到页面中所有的checkbox怎么做？-不使用第三方框架" class="headerlink" title="31. 希望获取到页面中所有的checkbox怎么做？(不使用第三方框架)"></a>31. 希望获取到页面中所有的checkbox怎么做？(不使用第三方框架)</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inputs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;input&quot;</span>);<span class="comment">//获取所有的input标签对象</span></span><br><span class="line"><span class="keyword">var</span> checkboxArray = [];<span class="comment">//初始化空数组，用来存放checkbox对象。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;inputs.length;i++)&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = inputs[i];</span><br><span class="line">  <span class="keyword">if</span>(obj.type==<span class="string">&#x27;checkbox&#x27;</span>)&#123;</span><br><span class="line">     checkboxArray.push(obj);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="32-写一个function，清除字符串前后的空格。（兼容所有浏览器）"><a href="#32-写一个function，清除字符串前后的空格。（兼容所有浏览器）" class="headerlink" title="32. 写一个function，清除字符串前后的空格。（兼容所有浏览器）"></a>32. 写一个function，清除字符串前后的空格。（兼容所有浏览器）</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.trim= <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.replace(<span class="regexp">/^\s+/</span>,<span class="string">&quot;&quot;</span>).replace(<span class="regexp">/\s+$/</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="33-javascript语言特性中，有很多方面和我们接触的其他编程语言不太一样-请举例"><a href="#33-javascript语言特性中，有很多方面和我们接触的其他编程语言不太一样-请举例" class="headerlink" title="33. javascript语言特性中，有很多方面和我们接触的其他编程语言不太一样,请举例"></a>33. javascript语言特性中，有很多方面和我们接触的其他编程语言不太一样,请举例</h3><p>javascript语言实现继承机制的核心就是  1  (原型)，而不是Java语言那样的类式继承。Javascript解析引擎在读取一个Object的属性的值时，会沿着  2  (原型链)向上寻找，如果最终没有找到，则该属性值为  3  undefined；如果最终找到该属性的值，则返回结果。与这个过程不同的是，当javascript解析引擎执行“给一个Object的某个属性赋值”的时候，如果当前Object存在该属性，则改写该属性的值，如果当前的Object本身并不存在该属性，则赋值该属性的值。</p><h3 id="34-Cookie在客户机上是如何存储的"><a href="#34-Cookie在客户机上是如何存储的" class="headerlink" title="34. Cookie在客户机上是如何存储的"></a>34. Cookie在客户机上是如何存储的</h3><p>Cookies就是服务器暂存放在你的电脑里的文本文件，好让服务器用来辨认你的计算机。当你在浏览网站的时候，Web服务器会先送一小小资料放在你的计算机上，Cookies 会帮你在网站上所打的文字或是一些选择都记录下来。当下次你再访问同一个网站，Web服务器会先看看有没有它上次留下的Cookies资料，有的话，就会依据Cookie里的内容来判断使用者，送出特定的网页内容给你。</p><h3 id="35-如何获取javascript三个数中的最大值和最小值？"><a href="#35-如何获取javascript三个数中的最大值和最小值？" class="headerlink" title="35. 如何获取javascript三个数中的最大值和最小值？"></a>35. 如何获取javascript三个数中的最大值和最小值？</h3><p>Math.max(a,b,c);//最大值</p><p>Math.min(a,b,c)//最小值</p><h3 id="36-javascript是面向对象的，怎么体现javascript的继承关系？"><a href="#36-javascript是面向对象的，怎么体现javascript的继承关系？" class="headerlink" title="36. javascript是面向对象的，怎么体现javascript的继承关系？"></a>36. javascript是面向对象的，怎么体现javascript的继承关系？</h3><p>使用prototype原型来实现。</p><h3 id="37-form中的input可以设置为readonly和disable，请问2者有什么区别？"><a href="#37-form中的input可以设置为readonly和disable，请问2者有什么区别？" class="headerlink" title="37. .form中的input可以设置为readonly和disable，请问2者有什么区别？"></a>37. .form中的input可以设置为readonly和disable，请问2者有什么区别？</h3><p>readonly不可编辑，但可以选择和复制；值可以传递到后台<br> disabled不能编辑，不能复制，不能选择；值不可以传递到后台</p><h3 id="38-列举javaScript的3种主要数据类型，2种复合数据类型和2种特殊数据类型。"><a href="#38-列举javaScript的3种主要数据类型，2种复合数据类型和2种特殊数据类型。" class="headerlink" title="38. 列举javaScript的3种主要数据类型，2种复合数据类型和2种特殊数据类型。"></a>38. 列举javaScript的3种主要数据类型，2种复合数据类型和2种特殊数据类型。</h3><p>主要数据类型：string, boolean, number</p><p>复合数据类型：function, object</p><p>特殊类型：undefined，null</p><h3 id="39-程序中捕获异常的方法？"><a href="#39-程序中捕获异常的方法？" class="headerlink" title="39. 程序中捕获异常的方法？"></a>39. 程序中捕获异常的方法？</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line"> </span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="40-Ajax原理"><a href="#40-Ajax原理" class="headerlink" title="40. Ajax原理"></a>40. Ajax原理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)创建对象</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)打开请求</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;example.txt&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>)发送请求</span><br><span class="line"></span><br><span class="line">xhr.send(); 发送请求到服务器</span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>)接收响应</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>)当readystate值从一个值变为另一个值时，都会触发readystatechange事件。</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)当readystate==<span class="number">4</span>时，表示已经接收到全部响应数据。</span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>)当status ==<span class="number">200</span>时，表示服务器成功返回页面和数据。</span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>)如果(<span class="number">2</span>)和(<span class="number">3</span>)内容同时满足，则可以通过xhr.responseText，获得服务器返回的内容。</span><br></pre></td></tr></table></figure><h3 id="41-解释什么是Json"><a href="#41-解释什么是Json" class="headerlink" title="41. 解释什么是Json:"></a>41. 解释什么是Json:</h3><p>(1)JSON 是一种轻量级的数据交换格式。</p><p>(2)JSON 独立于语言和平台，JSON 解析器和 JSON 库支持许多不同的编程语言。</p><p>(3)JSON的语法表示三种类型值，简单值(字符串，数值，布尔值，null),数组，对象</p><h3 id="42-js中的3种弹出式消息提醒（警告窗口，确认窗口，信息输入窗口）的命令式什么？"><a href="#42-js中的3种弹出式消息提醒（警告窗口，确认窗口，信息输入窗口）的命令式什么？" class="headerlink" title="42. js中的3种弹出式消息提醒（警告窗口，确认窗口，信息输入窗口）的命令式什么？"></a>42. js中的3种弹出式消息提醒（警告窗口，确认窗口，信息输入窗口）的命令式什么？</h3><p>alert<br> confirm<br> prompt</p><h3 id="43-以下代码执行结果"><a href="#43-以下代码执行结果" class="headerlink" title="43. 以下代码执行结果"></a>43. 以下代码执行结果</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uname = <span class="string">&#x27;jack&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(uname) <span class="comment">// ?</span></span><br><span class="line">    <span class="keyword">var</span> uname = <span class="string">&#x27;lily&#x27;</span></span><br><span class="line">    alert(uname)  <span class="comment">//?</span></span><br><span class="line">&#125;</span><br><span class="line">change()</span><br><span class="line">分别alert出 <span class="literal">undefined</span>，lily，（变量声明提前问题）</span><br></pre></td></tr></table></figure><h3 id="44-浏览器的滚动距离："><a href="#44-浏览器的滚动距离：" class="headerlink" title="44. 浏览器的滚动距离："></a>44. 浏览器的滚动距离：</h3><p>可视区域距离页面顶部的距离</p><p>scrollTop=document.documentElement.scrollTop||document.body.scrollTop</p><h3 id="45-可视区的大小："><a href="#45-可视区的大小：" class="headerlink" title="45. 可视区的大小："></a>45. 可视区的大小：</h3><p>(1)innerXXX（不兼容ie）</p><p>window.innerHeight 可视区高度，包含滚动条宽度</p><p>window.innerWidth  可视区宽度，包含滚动条宽度</p><p>(2)document.documentElement.clientXXX(兼容ie)</p><p>document.documentElement.clientWidth可视区宽度，不包含滚动条宽度</p><p>document.documentElement.clientHeight可视区高度，不包含滚动条宽度</p><h3 id="46-节点的种类有几种，分别是什么？"><a href="#46-节点的种类有几种，分别是什么？" class="headerlink" title="46. 节点的种类有几种，分别是什么？"></a>46. 节点的种类有几种，分别是什么？</h3><p>(1)元素节点：nodeType ===1;</p><p>(2)文本节点：nodeType ===3;</p><p>(3)属性节点：nodeType ===2;</p><h3 id="47-innerHTML和outerHTML的区别"><a href="#47-innerHTML和outerHTML的区别" class="headerlink" title="47. innerHTML和outerHTML的区别"></a>47. innerHTML和outerHTML的区别</h3><p>innerHTML(元素内包含的内容）</p><p>outerHTML(自己以及元素内的内容）</p><h3 id="48-offsetWidth-offsetHeight和clientWidth-clientHeight的区别"><a href="#48-offsetWidth-offsetHeight和clientWidth-clientHeight的区别" class="headerlink" title="48. offsetWidth offsetHeight和clientWidth clientHeight的区别"></a>48. offsetWidth offsetHeight和clientWidth clientHeight的区别</h3><p>(1)offsetWidth （content宽度+padding宽度+border宽度）</p><p>(2)offsetHeight（content高度+padding高度+border高度）</p><p>(3)clientWidth（content宽度+padding宽度）</p><p>(4)clientHeight（content高度+padding高度）</p><h3 id="49-闭包的好处"><a href="#49-闭包的好处" class="headerlink" title="49. 闭包的好处"></a>49. 闭包的好处</h3><p>(1)希望一个变量长期驻扎在内存当中(不被垃圾回收机制回收)</p><p>(2)避免全局变量的污染</p><p>(3)私有成员的存在</p><p>(4)安全性提高</p><h3 id="50-冒泡排序算法"><a href="#50-冒泡排序算法" class="headerlink" title="50. 冒泡排序算法"></a>50. 冒泡排序算法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">冒泡排序</span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;array.length; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;array.length - i; j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>])&#123;</span><br><span class="line">temp = array[j + <span class="number">1</span>];</span><br><span class="line">array[j + <span class="number">1</span>] = array[j];</span><br><span class="line">array[j] = temp;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="51、js-实现一个函数对javascript中json-对象进行克隆"><a href="#51、js-实现一个函数对javascript中json-对象进行克隆" class="headerlink" title="51、js 实现一个函数对javascript中json 对象进行克隆"></a>51、js 实现一个函数对javascript中json 对象进行克隆</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oldObject =<span class="string">&quot;sdf&quot;</span>;</span><br><span class="line">   <span class="keyword">var</span> newObject = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(oldObject));</span><br><span class="line">   <span class="built_in">console</span>.log(newObject);</span><br><span class="line">或者</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&#x27;dddd&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cp</span>(<span class="params">a</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a))&#125;</span><br><span class="line">    <span class="built_in">console</span>.log(cp(a));</span><br></pre></td></tr></table></figure><h3 id="52、js-实现-ajax-请求或者submit请求时-锁屏功能以及开锁功能（请求时界面Loading以及元素不能点击，请求完成即消除Loading）"><a href="#52、js-实现-ajax-请求或者submit请求时-锁屏功能以及开锁功能（请求时界面Loading以及元素不能点击，请求完成即消除Loading）" class="headerlink" title="52、js 实现 ajax 请求或者submit请求时 锁屏功能以及开锁功能（请求时界面Loading以及元素不能点击，请求完成即消除Loading）"></a>52、js 实现 ajax 请求或者submit请求时 锁屏功能以及开锁功能（请求时界面Loading以及元素不能点击，请求完成即消除Loading）</h3><p>function(url, fn) {<br> var obj = new XMLHttpRequest(); // XMLHttpRequest对象用于在后台与服务器交换数据<br> obj.open(‘GET’, url, true);<br> obj.onreadystatechange = function() {<br> if(obj.readyState == 4 &amp;&amp; obj.status == 200||obj.status == 304) {</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">            loading.style.display = <span class="string">&quot;none&quot;</span></span><br><span class="line"></span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            alert(<span class="string">&quot;不能点击,哈哈哈!&quot;</span>);</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>obj.send(null);<br> }</p><h3 id="53、js-实现一个函数-获得url参数的值"><a href="#53、js-实现一个函数-获得url参数的值" class="headerlink" title="53、js 实现一个函数 获得url参数的值"></a>53、js 实现一个函数 获得url参数的值</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryString</span>(<span class="params">name</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;(^|&amp;)&quot;</span> + name + <span class="string">&quot;=([^&amp;]*)(&amp;|$)&quot;</span>, <span class="string">&quot;i&quot;</span>); </span><br><span class="line">  <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg); </span><br><span class="line">  <span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]); <span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="54、请用js计算1-10000中出现的0-的次数"><a href="#54、请用js计算1-10000中出现的0-的次数" class="headerlink" title="54、请用js计算1-10000中出现的0 的次数"></a>54、请用js计算1-10000中出现的0 的次数</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10000</span>).fill(<span class="string">&#x27;&#x27;</span>).map(<span class="function">(<span class="params">_, index</span>) =&gt;</span> index + <span class="number">1</span>).filter(<span class="function"><span class="params">item</span> =&gt;</span> <span class="regexp">/0/</span>.test(item)).reduce(<span class="function">(<span class="params">count, item</span>) =&gt;</span> &#123; <span class="keyword">return</span> count + (<span class="built_in">String</span>(item).match(<span class="regexp">/0/g</span>) || []).length&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="55、写一个function，清除字符串前后的空格。（兼容所有浏览器）"><a href="#55、写一个function，清除字符串前后的空格。（兼容所有浏览器）" class="headerlink" title="55、写一个function，清除字符串前后的空格。（兼容所有浏览器）"></a>55、写一个function，清除字符串前后的空格。（兼容所有浏览器）</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str &amp; <span class="keyword">typeof</span> str === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> str.replace(<span class="regexp">/(^s*)|(s*)$/g</span>,<span class="string">&quot;&quot;</span>); <span class="comment">//去除前后空白符</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="56、降维数组"><a href="#56、降维数组" class="headerlink" title="56、降维数组"></a>56、降维数组</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jw</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.concat.apply([],obj);</span><br><span class="line">&#125;</span><br><span class="line">Jw(arr);</span><br></pre></td></tr></table></figure><h3 id="57、将url的查询参数解析成字典对象"><a href="#57、将url的查询参数解析成字典对象" class="headerlink" title="57、将url的查询参数解析成字典对象"></a>57、将url的查询参数解析成字典对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryObject</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">url = url == <span class="literal">null</span> ? <span class="built_in">window</span>.location.href : url;</span><br><span class="line"><span class="keyword">var</span> search = url.substring(url.lastIndexOf(<span class="string">&quot;?&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/([?&amp;=]+)=([?&amp;=]*)/g</span>;</span><br><span class="line">search.replace(reg, <span class="function"><span class="keyword">function</span> (<span class="params">rs, <span class="number">2</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> name = <span class="built_in">decodeURIComponent</span>(%<span class="number">3</span>B%<span class="number">20</span><span class="keyword">var</span>%<span class="number">20</span>val%<span class="number">20</span>%<span class="number">3</span>D%<span class="number">20</span><span class="built_in">decodeURIComponent</span>()<span class="number">2</span>);</span><br><span class="line">val = <span class="built_in">String</span>(val);</span><br><span class="line">obj[name] = val;</span><br><span class="line"><span class="keyword">return</span> rs;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="58、判断一个字符串中出现次数最多的字符，统计这个次数"><a href="#58、判断一个字符串中出现次数最多的字符，统计这个次数" class="headerlink" title="58、判断一个字符串中出现次数最多的字符，统计这个次数"></a>58、判断一个字符串中出现次数最多的字符，统计这个次数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> str = <span class="string">&#x27;asdfssaaasasasasaa&#x27;</span>;</span><br><span class="line"> <span class="keyword">var</span> json = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line"> <span class="keyword">if</span>(!json[str.charAt(i)])&#123;</span><br><span class="line"> json[str.charAt(i)] = <span class="number">1</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> json[str.charAt(i)]++;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="keyword">var</span> iMax = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">var</span> iIndex = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> json)&#123;</span><br><span class="line"> <span class="keyword">if</span>(json[i]&gt;iMax)&#123;</span><br><span class="line"> iMax = json[i];</span><br><span class="line"> iIndex = i;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> alert(<span class="string">&#x27;出现次数最多的是:&#x27;</span>+iIndex+<span class="string">&#x27;出现&#x27;</span>+iMax+<span class="string">&#x27;次&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="59、编写一个方法-求一个字符串的字节长度"><a href="#59、编写一个方法-求一个字符串的字节长度" class="headerlink" title="59、编写一个方法 求一个字符串的字节长度;"></a>59、编写一个方法 求一个字符串的字节长度;</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//假设一个中文占两个字节</span></span><br><span class="line"> <span class="keyword">var</span> str = <span class="string">&#x27;22两是&#x27;</span>;</span><br><span class="line"></span><br><span class="line">alert(getStrlen(str))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStrlen</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> json = &#123;<span class="attr">len</span>:<span class="number">0</span>&#125;;</span><br><span class="line"> <span class="keyword">var</span> re = <span class="regexp">/[\u4e00-\u9fa5]/</span>;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line"> <span class="keyword">if</span>(re.test(str.charAt(i)))&#123;</span><br><span class="line"> json[<span class="string">&#x27;len&#x27;</span>]++;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="keyword">return</span> json[<span class="string">&#x27;len&#x27;</span>]+str.length;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="60、编写一个方法-去掉一个数组的重复元素"><a href="#60、编写一个方法-去掉一个数组的重复元素" class="headerlink" title="60、编写一个方法 去掉一个数组的重复元素"></a>60、编写一个方法 去掉一个数组的重复元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">43</span>,<span class="number">12</span>,<span class="number">12</span>,<span class="number">1</span>];</span><br><span class="line"> <span class="keyword">var</span> json = &#123;&#125;;</span><br><span class="line"> <span class="keyword">var</span> arr2 = [];</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"> <span class="keyword">if</span>(!json[arr[i]])&#123;</span><br><span class="line"> json[arr[i]] = <span class="literal">true</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> json[arr[i]] = <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line">      <span class="keyword">if</span>(json[arr[i]])&#123;</span><br><span class="line">            arr2.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">     &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"> <span class="keyword">if</span>(!aa(arr[i], arr2))&#123;</span><br><span class="line"> arr2.push(arr[i])</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params">obj, arr</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"> <span class="keyword">if</span>(arr[i] == obj) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;;</span><br><span class="line"> &#125;</span><br><span class="line"> alert(arr2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="61、写出3个使用this的典型应用"><a href="#61、写出3个使用this的典型应用" class="headerlink" title="61、写出3个使用this的典型应用"></a>61、写出3个使用this的典型应用</h3><p>事件： 如onclick  this-&gt;发生事件的对象<br> 构造函数          this-&gt;new 出来的object<br> call/apply        改变this</p><h3 id="62、如何深度克隆"><a href="#62、如何深度克隆" class="headerlink" title="62、如何深度克隆"></a>62、如何深度克隆</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">43</span>];</span><br><span class="line"> <span class="keyword">var</span> json = &#123;<span class="attr">a</span>:<span class="number">6</span>,<span class="attr">b</span>:<span class="number">4</span>,<span class="attr">c</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;;</span><br><span class="line"> <span class="keyword">var</span> str = <span class="string">&#x27;sdfsdf&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> json2 = clone(json);</span><br><span class="line"></span><br><span class="line">alert(json[<span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> oNew = <span class="keyword">new</span> obj.constructor(obj.valueOf());</span><br><span class="line"> <span class="keyword">if</span>(obj.constructor == <span class="built_in">Object</span>)&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line"> oNew[i] = obj[i];</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">typeof</span>(oNew[i]) == <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line"> clone(oNew[i]);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> oNew;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="63、JavaScript中如何检测一个变量是一个String类型？请写出函数实现"><a href="#63、JavaScript中如何检测一个变量是一个String类型？请写出函数实现" class="headerlink" title="63、JavaScript中如何检测一个变量是一个String类型？请写出函数实现"></a>63、JavaScript中如何检测一个变量是一个String类型？请写出函数实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span>(obj) == <span class="string">&#x27;string&#x27;</span></span><br><span class="line">obj.constructor == <span class="built_in">String</span>;</span><br></pre></td></tr></table></figure><h3 id="64、网页中实现一个计算当年还剩多少时间的倒数计时程序，要求网页上实时动态显示“××年还剩××天××时××分××秒”"><a href="#64、网页中实现一个计算当年还剩多少时间的倒数计时程序，要求网页上实时动态显示“××年还剩××天××时××分××秒”" class="headerlink" title="64、网页中实现一个计算当年还剩多少时间的倒数计时程序，要求网页上实时动态显示“××年还剩××天××时××分××秒”"></a>64、网页中实现一个计算当年还剩多少时间的倒数计时程序，要求网页上实时动态显示“××年还剩××天××时××分××秒”</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"> <span class="keyword">var</span> oYear = oDate.getFullYear();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oNewDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"> oNewDate.setFullYear(oYear, <span class="number">11</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);</span><br><span class="line"> <span class="keyword">var</span> iTime = oNewDate.getTime()-oDate.getTime();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iS = iTime/<span class="number">1000</span>;</span><br><span class="line"> <span class="keyword">var</span> iM = oNewDate.getMonth()-oDate.getMonth();</span><br><span class="line"> <span class="keyword">var</span> iDate =iS</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="65、请解释一下什么是语义化的HTML。"><a href="#65、请解释一下什么是语义化的HTML。" class="headerlink" title="65、请解释一下什么是语义化的HTML。"></a>65、请解释一下什么是语义化的HTML。</h3><p>内容使用特定标签，通过标签就能大概了解整体页面的布局分布</p><h3 id="66、为什么利用多个域名来存储网站资源会更有效？"><a href="#66、为什么利用多个域名来存储网站资源会更有效？" class="headerlink" title="66、为什么利用多个域名来存储网站资源会更有效？"></a>66、为什么利用多个域名来存储网站资源会更有效？</h3><p>确保用户在不同地区能用最快的速度打开网站，其中某个域名崩溃用户也能通过其他郁闷访问网站</p><h3 id="67、请说出三种减低页面加载时间的方法"><a href="#67、请说出三种减低页面加载时间的方法" class="headerlink" title="67、请说出三种减低页面加载时间的方法"></a>67、请说出三种减低页面加载时间的方法</h3><p>1、压缩css、js文件<br> 2、合并js、css文件，减少http请求<br> 3、外部js、css文件放在最底下<br> 4、减少dom操作，尽可能用变量替代不必要的dom操作</p><h3 id="68、什么是FOUC？你如何来避免FOUC？"><a href="#68、什么是FOUC？你如何来避免FOUC？" class="headerlink" title="68、什么是FOUC？你如何来避免FOUC？"></a>68、什么是FOUC？你如何来避免FOUC？</h3><p>由于css引入使用了@import 或者存在多个style标签以及css文件在页面底部引入使得css文件加载在html之后导致页面闪烁、花屏<br> 用link加载css文件，放在head标签里面</p><h3 id="69、文档类型的作用是什么？你知道多少种文档类型？"><a href="#69、文档类型的作用是什么？你知道多少种文档类型？" class="headerlink" title="69、文档类型的作用是什么？你知道多少种文档类型？"></a>69、文档类型的作用是什么？你知道多少种文档类型？</h3><p>影响浏览器对html代码的编译渲染<br> html2.0<br> xHtml<br> html5</p><h3 id="70、浏览器标准模式和怪异模式之间的区别是什么？"><a href="#70、浏览器标准模式和怪异模式之间的区别是什么？" class="headerlink" title="70、浏览器标准模式和怪异模式之间的区别是什么？"></a>70、浏览器标准模式和怪异模式之间的区别是什么？</h3><p>盒模型解释不同</p><h3 id="71、闭包"><a href="#71、闭包" class="headerlink" title="71、闭包"></a>71、闭包</h3><p>子函数能被外部调用到，则该作用连上的所有变量都会被保存下来。</p><h3 id="72、请解释什么是Javascript的模块模式，并举出实用实例。"><a href="#72、请解释什么是Javascript的模块模式，并举出实用实例。" class="headerlink" title="72、请解释什么是Javascript的模块模式，并举出实用实例。"></a>72、请解释什么是Javascript的模块模式，并举出实用实例。</h3><p>js模块化mvc（数据层、表现层、控制层）<br> seajs<br> 命名空间</p><h3 id="73、你如何组织自己的代码？是使用模块模式，还是使用经典继承的方法？"><a href="#73、你如何组织自己的代码？是使用模块模式，还是使用经典继承的方法？" class="headerlink" title="73、你如何组织自己的代码？是使用模块模式，还是使用经典继承的方法？"></a>73、你如何组织自己的代码？是使用模块模式，还是使用经典继承的方法？</h3><p>对内：模块模式<br> 对外：继承</p><h3 id="74、你如何优化自己的代码？"><a href="#74、你如何优化自己的代码？" class="headerlink" title="74、你如何优化自己的代码？"></a>74、你如何优化自己的代码？</h3><p>代码重用<br> 避免全局变量（命名空间，封闭空间，模块化mvc..）<br> 拆分函数避免函数过于臃肿<br> 注释</p><h3 id="75、你能解释一下JavaScript中的继承是如何工作的吗？"><a href="#75、你能解释一下JavaScript中的继承是如何工作的吗？" class="headerlink" title="75、你能解释一下JavaScript中的继承是如何工作的吗？"></a>75、你能解释一下JavaScript中的继承是如何工作的吗？</h3><p>子构造函数中执行父构造函数，并用call\apply改变this<br> 克隆父构造函数原型上的方法</p><h3 id="76、请尽可能详尽的解释AJAX的工作原理。"><a href="#76、请尽可能详尽的解释AJAX的工作原理。" class="headerlink" title="76、请尽可能详尽的解释AJAX的工作原理。"></a>76、请尽可能详尽的解释AJAX的工作原理。</h3><p>创建ajax对象（XMLHttpRequest/ActiveXObject(Microsoft.XMLHttp)）<br> 判断数据传输方式(GET/POST)<br> 打开链接 open()<br> 发送 send()<br> 当ajax对象完成第四步（onreadystatechange）数据接收完成，判断http响应状态（status）200-300之间或者304（缓存）执行回调函数</p><h3 id="77、最简单的一道题"><a href="#77、最简单的一道题" class="headerlink" title="77、最简单的一道题"></a>77、最简单的一道题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>, b = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> c = a+++b; <span class="comment">// c = 5</span></span><br></pre></td></tr></table></figure><h3 id="78、var和function的预解析问题-以及变量和function的先后顺序的问题"><a href="#78、var和function的预解析问题-以及变量和function的先后顺序的问题" class="headerlink" title="78、var和function的预解析问题,以及变量和function的先后顺序的问题"></a>78、var和function的预解析问题,以及变量和function的先后顺序的问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 以下代码执行输出结果是什么</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">b</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(a);</span><br><span class="line"> <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"> a = <span class="number">100</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(a);</span><br><span class="line"> &#125;</span><br><span class="line"> b();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">    a = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">c();</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">d</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">&#125;(<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">e</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">num</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">&#125;(<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">num</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">    <span class="keyword">var</span> num =<span class="number">10</span></span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;(<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//仍然是预解析(在与解析过程中还要考虑一下当前变量的作用于)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a1); <span class="comment">// underfined</span></span><br><span class="line">    <span class="built_in">console</span>.log(a2); <span class="comment">// underfined</span></span><br><span class="line">    <span class="built_in">console</span>.log(b1); <span class="comment">// underfined</span></span><br><span class="line">    <span class="built_in">console</span>.log(b2); <span class="comment">// underfined</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">b1</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">        <span class="keyword">var</span> a1 = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">b2</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">        <span class="keyword">var</span> a2 = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(a1); <span class="comment">// underfined</span></span><br><span class="line">    <span class="built_in">console</span>.log(a2); <span class="comment">// 10</span></span><br><span class="line">    <span class="built_in">console</span>.log(b1); <span class="comment">// underfined</span></span><br><span class="line">    <span class="built_in">console</span>.log(b2); <span class="comment">// function</span></span><br><span class="line">&#125;</span><br><span class="line">m();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">2</span>&gt;<span class="number">1</span>) &#123;</span><br><span class="line">        arr = <span class="number">10</span>;</span><br><span class="line">        brr = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">let</span> arr;</span><br><span class="line">        <span class="keyword">var</span> brr;</span><br><span class="line">        <span class="built_in">console</span>.log(arr);</span><br><span class="line">        <span class="built_in">console</span>.log(brr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">n(); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure><p>···</p><h3 id="79、dom事件委托什么原理，有什么优缺点"><a href="#79、dom事件委托什么原理，有什么优缺点" class="headerlink" title="79、dom事件委托什么原理，有什么优缺点"></a>79、dom事件委托什么原理，有什么优缺点</h3><h4 id="事件委托原理-事件冒泡机制"><a href="#事件委托原理-事件冒泡机制" class="headerlink" title="事件委托原理:事件冒泡机制"></a>事件委托原理:事件冒泡机制</h4><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>1.可以大量节省内存占用，减少事件注册。比如ul上代理所有li的click事件就很不错。<br> 2.可以实现当新增子对象时，无需再对其进行事件绑定，对于动态内容部分尤为合适</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>事件代理的常用应用应该仅限于上述需求，如果把所有事件都用事件代理，可能会出现事件误判。即本不该被触发的事件被绑定上了事件。</p><h3 id="80、http的cache机制，以及200状态下怎么实现-from-cache（表示接触最多的就是304的from-cache）（用于优化，没有接触过，需要理解）"><a href="#80、http的cache机制，以及200状态下怎么实现-from-cache（表示接触最多的就是304的from-cache）（用于优化，没有接触过，需要理解）" class="headerlink" title="80、http的cache机制，以及200状态下怎么实现 from cache（表示接触最多的就是304的from cache）（用于优化，没有接触过，需要理解）"></a>80、http的cache机制，以及200状态下怎么实现 from cache（表示接触最多的就是304的from cache）（用于优化，没有接触过，需要理解）</h3><h4 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h4><p>定义：浏览器缓存（Browser Caching）是为了加速浏览，浏览器在用户磁盘上对最近请求过的文档进行存储，当访问者再次请求这个页面时，浏览器就可以从本地磁盘显示文档，这样就可以加速页面的阅览。</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>cache的作用：<br> 1、减少延迟，让你的网站更快，提高用户体验。<br> 2、避免网络拥塞，减少请求量，减少输出带宽。</p><h4 id="实现手段"><a href="#实现手段" class="headerlink" title="实现手段"></a>实现手段</h4><p>Cache-Control中的max-age是实现内容cache的主要手段，共有3种常用策略：max-age和Last-Modified（If-Modified-Since）的组合、仅max-age、max-age和ETag的组合。</p><p>对于强制缓存，服务器通知浏览器一个缓存时间，在缓存时间内，下次请求，直接用缓存，不在时间内，执行比较缓存策略。<br> 对于比较缓存，将缓存信息中的Etag和Last-Modified通过请求发送给服务器，由服务器校验，返回304状态码时，浏览器直接使用缓存。</p><h3 id="81、一个原型链继承的问题"><a href="#81、一个原型链继承的问题" class="headerlink" title="81、一个原型链继承的问题"></a>81、一个原型链继承的问题</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有一个构造函数A，写一个函数B，继承A</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    this.titileName = num;</span><br><span class="line">&#125;</span><br><span class="line">A.prototype = &#123;</span><br><span class="line">    fn1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    fn2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个问题的关注点是B继承的A的静态属性，同时B的原型链中不存在A实例的titleName属性</p><h3 id="82、什么是虚拟dom"><a href="#82、什么是虚拟dom" class="headerlink" title="82、什么是虚拟dom"></a>82、什么是虚拟dom</h3><p>React为啥这么大？因为它实现了一个虚拟DOM（Virtual DOM）。虚拟DOM是干什么的？这就要从浏览器本身讲起</p><p>如我们所知，在浏览器渲染网页的过程中，加载到HTML文档后，会将文档解析并构建DOM树，然后将其与解析CSS生成的CSSOM树一起结合产生爱的结晶——RenderObject树，然后将RenderObject树渲染成页面（当然中间可能会有一些优化，比如RenderLayer树）。这些过程都存在与渲染引擎之中，渲染引擎在浏览器中是于JavaScript引擎（JavaScriptCore也好V8也好）分离开的，但为了方便JS操作DOM结构，渲染引擎会暴露一些接口供JavaScript调用。由于这两块相互分离，通信是需要付出代价的，因此JavaScript调用DOM提供的接口性能不咋地。各种性能优化的最佳实践也都在尽可能的减少DOM操作次数。</p><p>而虚拟DOM干了什么？它直接用JavaScript实现了DOM树（大致上）。组件的HTML结构并不会直接生成DOM，而是映射生成虚拟的JavaScript DOM结构，React又通过在这个虚拟DOM上实现了一个 diff 算法找出最小变更，再把这些变更写入实际的DOM中。这个虚拟DOM以JS结构的形式存在，计算性能会比较好，而且由于减少了实际DOM操作次数，性能会有较大提升</p><h3 id="83、js基础数据类型和引用类型分别是什么？这个前提条件下写一个getType，返回相应的类型"><a href="#83、js基础数据类型和引用类型分别是什么？这个前提条件下写一个getType，返回相应的类型" class="headerlink" title="83、js基础数据类型和引用类型分别是什么？这个前提条件下写一个getType，返回相应的类型"></a>83、js基础数据类型和引用类型分别是什么？这个前提条件下写一个getType，返回相应的类型</h3><p>1.基本数据类型（自身不可拆分的）：Undefined、Null、Boolean、Number、String<br> 2.引用数据类型（对象）：Object （Array，Date，RegExp，Function）<br> ES6基本数据类型多了个symbol 据说这道题刷了百分之二十的人 感谢Abbyshen提出</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gettype</span>(<span class="params">nm</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(nm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="84、-dom选择器优先级是什么，以及权重值计算（一道老问题了）"><a href="#84、-dom选择器优先级是什么，以及权重值计算（一道老问题了）" class="headerlink" title="84、 dom选择器优先级是什么，以及权重值计算（一道老问题了）"></a>84、 dom选择器优先级是什么，以及权重值计算（一道老问题了）</h3><p>1.行内样式 1000<br> 2.id 0100<br> 3.类选择器、伪类选择器、属性选择器[type=”text”] 0010<br> 4.标签选择器、伪元素选择器(::first-line) 0001<br> 5.通配符*、子选择器、相邻选择器 0000</p><h3 id="85、vue双向数据绑定的原理是什么"><a href="#85、vue双向数据绑定的原理是什么" class="headerlink" title="85、vue双向数据绑定的原理是什么"></a>85、vue双向数据绑定的原理是什么</h3><p>首先传输对象的双向数据绑定 Object.defineProperty(target, key, decription),在decription中设置get和set属性（此时应注意description中get和set不能与描述属性共存）<br> 数组的实现与对象不同。<br> 同时运用观察者模式实现wather，用户数据和view视图的更新</p><h3 id="86、-react和vue比较来说有什么区别"><a href="#86、-react和vue比较来说有什么区别" class="headerlink" title="86、 react和vue比较来说有什么区别"></a>86、 react和vue比较来说有什么区别</h3><p>1 component层面，web component和virtual dom<br> 2 数据绑定（vue双向，react的单向）等好多<br> 3 计算属性 vue 有，提供方便；而 react 不行<br> 4 vue 可以 watch 一个数据项；而 react 不行<br> 5 vue 由于提供的 direct 特别是预置的 directive 因为场景场景开发更容易；react 没有<br> 6 生命周期函数名太长 directive</p><h3 id="87、git使用过程中，如果你在开发着业务，突然另一个分支有一个bug要改，你怎么办"><a href="#87、git使用过程中，如果你在开发着业务，突然另一个分支有一个bug要改，你怎么办" class="headerlink" title="87、git使用过程中，如果你在开发着业务，突然另一个分支有一个bug要改，你怎么办"></a>87、git使用过程中，如果你在开发着业务，突然另一个分支有一个bug要改，你怎么办</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git stash       <span class="comment">//将本次修改存到暂存区（紧急切换分支时）</span></span><br><span class="line">git stash pop   <span class="comment">//将所有暂存区的内容取出来</span></span><br></pre></td></tr></table></figure><h3 id="88、-网页布局有哪几种，有什么区别"><a href="#88、-网页布局有哪几种，有什么区别" class="headerlink" title="88、 网页布局有哪几种，有什么区别"></a>88、 网页布局有哪几种，有什么区别</h3><p>静态、自适应、流式、响应式四种网页布局<br> 静态布局：意思就是不管浏览器尺寸具体是多少，网页布局就按照当时写代码的布局来布置；<br> 自适应布局：就是说你看到的页面，里面元素的位置会变化而大小不会变化；<br> 流式布局：你看到的页面，元素的大小会变化而位置不会变化——这就导致如果屏幕太大或者太小都会导致元素无法正常显示。<br> 自适应布局：每个屏幕分辨率下面会有一个布局样式，同时位置会变而且大小也会变。</p><h3 id="89、执行下面代码"><a href="#89、执行下面代码" class="headerlink" title="89、执行下面代码"></a>89、执行下面代码</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> b = &#123;<span class="attr">key</span>: <span class="string">&#x27;b&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> c = &#123;<span class="attr">key</span>: <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> d = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">a[b] = <span class="number">123</span>;</span><br><span class="line">a[c] = <span class="number">345</span>;</span><br><span class="line">a[d] = <span class="number">333</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a[b]);  <span class="comment">// 345</span></span><br><span class="line"><span class="built_in">console</span>.log(a[c]);  <span class="comment">// 345</span></span><br><span class="line"><span class="built_in">console</span>.log(a[d]);  <span class="comment">// 333</span></span><br></pre></td></tr></table></figure><h3 id="90、"><a href="#90、" class="headerlink" title="90、"></a>90、</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> R = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> u = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">var</span> r = &#123;</span><br><span class="line">        fn: <span class="function"><span class="keyword">function</span>(<span class="params">k</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> u[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;());</span><br><span class="line">R.fn(<span class="string">&#x27;a&#x27;</span>);  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>上述代码中如何获取匿名函数中的u</p><h3 id="91、不适用循环语句（包括map、forEach方法）实现一个100长度的数组，索引值和值相同的数组-0-1-2-3-4-5……-99"><a href="#91、不适用循环语句（包括map、forEach方法）实现一个100长度的数组，索引值和值相同的数组-0-1-2-3-4-5……-99" class="headerlink" title="91、不适用循环语句（包括map、forEach方法）实现一个100长度的数组，索引值和值相同的数组[0,1,2,3,4,5……..99]"></a>91、不适用循环语句（包括map、forEach方法）实现一个100长度的数组，索引值和值相同的数组[0,1,2,3,4,5……..99]</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">100</span>);</span><br><span class="line"><span class="comment">//方法1</span></span><br><span class="line">[...arr.keys()];</span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="built_in">Array</span>.from(arr.keys());</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三</span></span><br><span class="line"><span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>: <span class="number">100</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法四 借助string</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">101</span>);</span><br><span class="line"><span class="keyword">var</span> str = arr1.join(<span class="string">&#x27;1,&#x27;</span>);</span><br><span class="line">str = str.replace(<span class="regexp">/(1\,)/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$<span class="number">0</span>, $<span class="number">1</span>, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> start = <span class="string">&#x27;&#x27;</span> + <span class="built_in">Math</span>.ceil(index/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(index &lt; str.length - <span class="number">2</span>) &#123;</span><br><span class="line">        start += <span class="string">&#x27;,&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> str.split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法五（函数式，参考网络）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">arr, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.apply(val))&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(val &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    arr.push(val);</span><br><span class="line">    <span class="keyword">return</span> reduce(arr, val+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res = reduce([], <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="92、下面语句执行结果输出"><a href="#92、下面语句执行结果输出" class="headerlink" title="92、下面语句执行结果输出"></a>92、下面语句执行结果输出</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params">val, index</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        fn: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a(name, val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = a(<span class="number">0</span>); <span class="comment">// underfined</span></span><br><span class="line">b.fn(<span class="number">1</span>); <span class="comment">// 0</span></span><br><span class="line">b.fn(<span class="number">2</span>); <span class="comment">// 0</span></span><br><span class="line">b.fn(<span class="number">3</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="93、科普"><a href="#93、科普" class="headerlink" title="93、科普"></a>93、科普</h3><ol><li>dom节点的根节点是不是body<br> 回答： 不是，dom节点的根节点是html(包含head和body，head中分为meta、title等。body又分为一组)</li></ol><p>2）dom元素都会有offsetParent吗<br> 回答： offsetParent属性返回一个对象的引用，这个对象是距离调用offsetParent的元素最近的（在包含层次中最靠近的），并且是已进行过CSS定位的容器元素。 如果这个容器元素未进行CSS定位, 则offsetParent属性的取值为根元素(在标准兼容模式下为html元素；在怪异呈现模式下为body元素)的引用。 当容器元素的style.display 被设置为 “none”时（译注：IE和Opera除外），offsetParent属性 返回 null。</p><ol><li>[1,3,5]转译成字符串是什么<br> 回答： ‘1,3,5’<br> 调用toString方法，生成该字符串</li></ol><p>4）li标签的祖级元素可以为li，父级元素也可以为例<br> 回答： 错误</p><h3 id="94、-jsonp原理，jquery是怎么实现的，这样实现有什么好处和坏处"><a href="#94、-jsonp原理，jquery是怎么实现的，这样实现有什么好处和坏处" class="headerlink" title="94、 jsonp原理，jquery是怎么实现的，这样实现有什么好处和坏处"></a>94、 jsonp原理，jquery是怎么实现的，这样实现有什么好处和坏处</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>在同源策略下;在某个服务器下的页面是无法获取到该服务器以外的数据的;Jquery中ajax 的核心是通过 XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加 <script>标签来调用服务器提供的 js脚本<br> 当我们正常地请求一个JSON数据的时候，服务端返回的是一串 JSON类型的数据，而我们使用 JSONP模式来请求数据的时候服务端返回的是一段可执行的 JavaScript代码。因为jsonp 跨域的原理就是用的动态加载 script的src ，所以我们只能把参数通过 url的方式传递, 所以jsonp的 type类型只能是get ！</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="symbol">url:</span> <span class="string">&#x27;http://192.168.1.114/yii/demos/test.php&#x27;</span>, <span class="regexp">//</span>不同的域</span><br><span class="line">    <span class="symbol">type:</span> <span class="string">&#x27;GET&#x27;</span>, <span class="regexp">//</span> jsonp模式只有GET 是合法的</span><br><span class="line">    <span class="symbol">data:</span> &#123;</span><br><span class="line">        <span class="string">&#x27;action&#x27;</span>: <span class="string">&#x27;aaron&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="symbol">dataType:</span> <span class="string">&#x27;jsonp&#x27;</span>, <span class="regexp">//</span> 数据类型</span><br><span class="line">    <span class="symbol">jsonp:</span> <span class="string">&#x27;backfunc&#x27;</span>, <span class="regexp">//</span> 指定回调函数名，与服务器端接收的一致，并回传回来</span><br><span class="line">&#125;)</span><br><span class="line">其实jquery 内部会转化成</span><br><span class="line"><span class="symbol">http:</span>/<span class="regexp">/192.168.1.114/yii</span><span class="regexp">/demos/test</span>.php?backfunc=jQuery2030038573939353227615_1402643146875&amp;action=aaron</span><br><span class="line">然后动态加载</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>src=<span class="string">&quot;http://192.168.1.114/yii/demos/test.php?backfunc=&gt;</span></span><br><span class="line"><span class="string">然后后端就会执行backfunc(传递参数 )，把数据通过实参的形式发送出去。</span></span><br></pre></td></tr></table></figure><p>在jquery 源码中， jsonp的实现方式是动态添加<script>标签来调用服务器提供的 js脚本。jquery 会在window对象中加载一个全局的函数，当 <script>代码插入时函数执行，执行完毕后就 <script>会被移除。同时jquery还对非跨域的请求进行了优化，如果这个请求是在同一个域名下那么他就会像正常的 Ajax请求一样工作。</p><h3 id="95、-http协议属于七层协议中的哪一层，下一层是什么"><a href="#95、-http协议属于七层协议中的哪一层，下一层是什么" class="headerlink" title="95、 http协议属于七层协议中的哪一层，下一层是什么"></a>95、 http协议属于七层协议中的哪一层，下一层是什么</h3><p>七层结构：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层<br> tcp属于传输层；http属于应用层。<br> 表现层</p><h3 id="96、-js垃圾回收机制知道哪些，v8引擎使用的哪一种"><a href="#96、-js垃圾回收机制知道哪些，v8引擎使用的哪一种" class="headerlink" title="96、 js垃圾回收机制知道哪些，v8引擎使用的哪一种"></a>96、 js垃圾回收机制知道哪些，v8引擎使用的哪一种</h3><h4 id="js的两种回收机制"><a href="#js的两种回收机制" class="headerlink" title="js的两种回收机制"></a>js的两种回收机制</h4><p>1 标记清除（mark and sweep）<br> 2 引用计数（reference counting）</p><h4 id="javascript与V8引擎"><a href="#javascript与V8引擎" class="headerlink" title="javascript与V8引擎"></a>javascript与V8引擎</h4><p>垃圾回收机制的好处和坏处</p><p>好处：大幅简化程序的内存管理代码，减轻程序猿负担，并且减少因为长时间运转而带来的内存泄露问题。</p><p>坏处：自动回收意味着程序猿无法掌控内存。ECMAScript中没有暴露垃圾回收的借口，我们无法强迫其进行垃圾回收，更加无法干预内存管理。</p><p>V8 自动垃圾回收算法<br> <a href="https://segmentfault.com/a/1190000000440270">https://segmentfault.com/a/11…</a></p><h3 id="97、-作用域什么时候生成的？"><a href="#97、-作用域什么时候生成的？" class="headerlink" title="97、 作用域什么时候生成的？"></a>97、 作用域什么时候生成的？</h3><p>页面加载–&gt;创建window全局对象，并生成全局作用域–&gt;然后生成执行上下文，预解析变量(变量提升)，生成全局变量对象；<br> $scope</p><h3 id="98、-websocket长连接原理是什么"><a href="#98、-websocket长连接原理是什么" class="headerlink" title="98、 websocket长连接原理是什么"></a>98、 websocket长连接原理是什么</h3><h4 id="含义-1"><a href="#含义-1" class="headerlink" title="含义"></a>含义</h4><p>Websocket是一个持久化的协议，相对于HTTP这种非持久的协议来说。</p><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>类似长轮循长连接 ; 发送一次请求 ; 源源不断的得到信息</p><h3 id="28-http缓存知道哪些"><a href="#28-http缓存知道哪些" class="headerlink" title="28. http缓存知道哪些"></a>28. http缓存知道哪些</h3><p><a href="http://blog.csdn.net/yzf913214/article/details/52268651">http://blog.csdn.net/yzf91321…</a></p><h3 id="99、-讲一下事件循环机制"><a href="#99、-讲一下事件循环机制" class="headerlink" title="99、 讲一下事件循环机制"></a>99、 讲一下事件循环机制</h3><p>执行上下文(Execution context)<br> 函数调用栈(call stack)<br> 队列数据结构(queue)<br> Promise</p><p><a href="https://zhuanlan.zhihu.com/p/25407758">https://zhuanlan.zhihu.com/p/…</a></p><h3 id="100、-理解web安全吗？都有哪几种，介绍以及如何预防"><a href="#100、-理解web安全吗？都有哪几种，介绍以及如何预防" class="headerlink" title="100、 理解web安全吗？都有哪几种，介绍以及如何预防"></a>100、 理解web安全吗？都有哪几种，介绍以及如何预防</h3><p>1.XSS，也就是跨站脚本注入</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">攻击方法：</span><br><span class="line"><span class="number">1</span>\. 手动攻击:</span><br><span class="line">编写注入脚本，比如”/&gt;<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">document</span>.cookie());</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>&lt;!--等，</span><br><span class="line">手动测试目标网站上有的input, textarea等所有可能输入文本信息的区域</span><br><span class="line"><span class="number">2</span>\. 自动攻击</span><br><span class="line">利用工具扫描目标网站所有的网页并自动测试写好的注入脚本，比如：Burpsuite等</span><br><span class="line">防御方法：</span><br><span class="line"><span class="number">1</span>\. 将cookie等敏感信息设置为httponly，禁止Javascript通过<span class="built_in">document</span>.cookie获得</span><br><span class="line"><span class="number">2</span>\. 对所有的输入做严格的校验尤其是在服务器端，过滤掉任何不合法的输入，比如手机号必须是数字，通常可以采用正则表达式</span><br><span class="line"><span class="number">3</span>\. 净化和过滤掉不必要的html标签，比如：&lt;iframe&gt;, alt,<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span> 等</span></span><br><span class="line"><span class="xml">4\. 净化和过滤掉不必要的Javascript的事件标签，比如：onclick, onfocus等</span></span><br><span class="line"><span class="xml">5\. 转义单引号，双引号，尖括号等特殊字符，可以采用htmlencode编码 或者过滤掉这些特殊字符</span></span><br><span class="line"><span class="xml">6\. 设置浏览器的安全设置来防范典型的XSS注入</span></span><br></pre></td></tr></table></figure><p>2.SQL注入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">攻击方法：</span><br><span class="line">编写恶意字符串，比如‘ or  1=1--等，</span><br><span class="line">手动测试目标网站上所有涉及数据库操作的地方</span><br><span class="line">防御方法：</span><br><span class="line">1\. 禁止目标网站利用动态拼接字符串的方式访问数据库</span><br><span class="line">2\. 减少不必要的数据库抛出的错误信息</span><br><span class="line">3\. 对数据库的操作赋予严格的权限控制</span><br><span class="line">4\. 净化和过滤掉不必要的SQL保留字，比如：<span class="built_in">where</span>, or, <span class="built_in">exec</span> 等</span><br><span class="line">5\. 转义单引号，上引号，尖括号等特殊字符，可以采用htmlencode编码 或者过滤掉这些特殊字符</span><br></pre></td></tr></table></figure><p>3.CSRF，也就是跨站请求伪造</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">就是攻击者冒用用户的名义，向目标站点发送请求</span><br><span class="line">防范方法：</span><br><span class="line">1\. 在客户端进行cookie的hashing，并在服务端进行<span class="built_in">hash</span>认证</span><br><span class="line">2\. 提交请求是需要填写验证码</span><br><span class="line">3\. 使用One-Time Tokens为不同的表单创建不同的伪随机值  </span><br></pre></td></tr></table></figure><h3 id="101、-sessionStorage和localstorage能跨域拿到吗？比如我在www-baidu-com设置的值能在m-baidu-com能拿到吗？为什么"><a href="#101、-sessionStorage和localstorage能跨域拿到吗？比如我在www-baidu-com设置的值能在m-baidu-com能拿到吗？为什么" class="headerlink" title="101、 sessionStorage和localstorage能跨域拿到吗？比如我在www.baidu.com设置的值能在m.baidu.com能拿到吗？为什么"></a>101、 sessionStorage和localstorage能跨域拿到吗？比如我在<a href="http://www.baidu.com/">www.baidu.com</a>设置的值能在<a href="http://m.baidu.com/">m.baidu.com</a>能拿到吗？为什么</h3><p>localStorage会跟cookie一样受到跨域的限制，会被document.domain影响</p><h3 id="102、-localstorage不能手动删除的时候，什么时候过期"><a href="#102、-localstorage不能手动删除的时候，什么时候过期" class="headerlink" title="102、 localstorage不能手动删除的时候，什么时候过期"></a>102、 localstorage不能手动删除的时候，什么时候过期</h3><p>除非被清除，否则永久保存 clear()可清楚<br> sessionStorage 仅在当前会话下有效，关闭页面或浏览器后被清除</p><h3 id="103、cookie可以设置什么域？可以设置-com吗"><a href="#103、cookie可以设置什么域？可以设置-com吗" class="headerlink" title="103、cookie可以设置什么域？可以设置.com吗"></a>103、cookie可以设置什么域？可以设置.com吗</h3><p>可以通过设置domin来实现</p><h3 id="104、登录状态的保存你认为可以保存在sessionstorage或者localstorage或者cookie或者你知道的哪种方式，存在了哪里？？为什么保存在那里"><a href="#104、登录状态的保存你认为可以保存在sessionstorage或者localstorage或者cookie或者你知道的哪种方式，存在了哪里？？为什么保存在那里" class="headerlink" title="104、登录状态的保存你认为可以保存在sessionstorage或者localstorage或者cookie或者你知道的哪种方式，存在了哪里？？为什么保存在那里"></a>104、登录状态的保存你认为可以保存在sessionstorage或者localstorage或者cookie或者你知道的哪种方式，存在了哪里？？为什么保存在那里</h3><h3 id="105、-flux-gt-redux-gt-mobx-变化的本质是什么"><a href="#105、-flux-gt-redux-gt-mobx-变化的本质是什么" class="headerlink" title="105、 flux -&gt; redux -&gt; mobx 变化的本质是什么"></a>105、 flux -&gt; redux -&gt; mobx 变化的本质是什么</h3><p>存储结构 将对象加工可观察 函数式 vs 面向对象<br> <a href="https://zhuanlan.zhihu.com/p/25585910?refer=purerender">https://zhuanlan.zhihu.com/p/…</a></p><h3 id="106、-按需加载路由怎么加载对应的chunk文件的？换句话说浏览器怎么知道什么时候加载这个chunk，以及webpack是怎么识别那个多个经过hash过的chunk文件"><a href="#106、-按需加载路由怎么加载对应的chunk文件的？换句话说浏览器怎么知道什么时候加载这个chunk，以及webpack是怎么识别那个多个经过hash过的chunk文件" class="headerlink" title="106、 按需加载路由怎么加载对应的chunk文件的？换句话说浏览器怎么知道什么时候加载这个chunk，以及webpack是怎么识别那个多个经过hash过的chunk文件"></a>106、 按需加载路由怎么加载对应的chunk文件的？换句话说浏览器怎么知道什么时候加载这个chunk，以及webpack是怎么识别那个多个经过hash过的chunk文件</h3><h3 id="107、get和post有什么区别？get可以通过body传递数据吗"><a href="#107、get和post有什么区别？get可以通过body传递数据吗" class="headerlink" title="107、get和post有什么区别？get可以通过body传递数据吗"></a>107、get和post有什么区别？get可以通过body传递数据吗</h3><p>把数据放到 body 里面，必须用 POST 方式取，这是 HTTP 协议限制的。</p><h3 id="108、右边宽度固定，左边自适应"><a href="#108、右边宽度固定，左边自适应" class="headerlink" title="108、右边宽度固定，左边自适应"></a>108、右边宽度固定，左边自适应</h3><p>第一种：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">body&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.left</span>&#123;</span></span><br><span class="line">    background-color: rebeccapurple;</span><br><span class="line">    height: 200px;</span><br><span class="line">    flex: 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.right</span>&#123;</span></span><br><span class="line">    background-color: red;</span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 100px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二种</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">        height: 200px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">        float: right;</span><br><span class="line">        width: 200px;</span><br><span class="line">        background-color: rebeccapurple;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">        margin-right: 200px;</span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="109、水平垂直居中"><a href="#109、水平垂直居中" class="headerlink" title="109、水平垂直居中"></a>109、水平垂直居中</h3><p>第一种</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#center</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#center</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>:-<span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三种</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#center</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">margin</span>:auto;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四种 flex</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:flex;</span><br><span class="line">    <span class="attribute">justify-content</span>:center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="109、-四种定位的区别"><a href="#109、-四种定位的区别" class="headerlink" title="109、.四种定位的区别"></a>109、.四种定位的区别</h3><p><code>static</code> 是默认值<br> <code>relative</code> 相对定位 相对于自身原有位置进行偏移，仍处于标准文档流中<br> <code>absolute</code> 绝对定位 相对于最近的已定位的祖先元素, 有已定位(指<code>position</code>不是<code>static</code>的元素)祖先元素, 以最近的祖先元素为参考标准。如果无已定位祖先元素, 以<code>body</code>元素为偏移参照基准, 完全脱离了标准文档流。<br> <code>fixed</code> 固定定位的元素会相对于视窗来定位,这意味着即便页面滚动，它还是会停留在相同的位置。一个固定定位元素不会保留它原本在页面应有的空隙。</p><h3 id="110、封装一个函数，参数是定时器的时间，-then执行回调函数。"><a href="#110、封装一个函数，参数是定时器的时间，-then执行回调函数。" class="headerlink" title="110、封装一个函数，参数是定时器的时间，.then执行回调函数。"></a>110、封装一个函数，参数是定时器的时间，.then执行回调函数。</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span> (<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, time));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="111、一行代码实现数组去重？"><a href="#111、一行代码实现数组去重？" class="headerlink" title="111、一行代码实现数组去重？"></a>111、一行代码实现数组去重？</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...new Set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,&#x27;a&#x27;,<span class="number">1</span>,&#x27;a&#x27;])]</span><br></pre></td></tr></table></figure><h3 id="112、使用addEventListener点击li弹出内容，并且动态添加li之后有效"><a href="#112、使用addEventListener点击li弹出内容，并且动态添加li之后有效" class="headerlink" title="112、使用addEventListener点击li弹出内容，并且动态添加li之后有效"></a>112、使用addEventListener点击li弹出内容，并且动态添加li之后有效</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">1</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">2</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">3</span>&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">4</span>&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="keyword">var</span> ulNode = <span class="built_in">document</span>.getElementById(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line">    ulNode.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e.target &amp;&amp; e.target.nodeName.toUpperCase() == <span class="string">&quot;LI&quot;</span>) &#123;</span><br><span class="line">            alert(e.target.innerHTML);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="113、怎么判断两个对象相等"><a href="#113、怎么判断两个对象相等" class="headerlink" title="113、怎么判断两个对象相等"></a>113、怎么判断两个对象相等</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(obj)==<span class="built_in">JSON</span>.stringify(obj);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="114、Vue-router-除了-router-link-怎么实现跳转"><a href="#114、Vue-router-除了-router-link-怎么实现跳转" class="headerlink" title="114、Vue router 除了 router-link 怎么实现跳转?"></a>114、Vue router 除了 router-link 怎么实现跳转?</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="keyword">go</span>(<span class="number">1</span>)</span><br><span class="line">router.push(<span class="string">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="115、Vue-router-跳转和-location-href-有什么区别？"><a href="#115、Vue-router-跳转和-location-href-有什么区别？" class="headerlink" title="115、Vue router 跳转和 location.href 有什么区别？"></a>115、Vue router 跳转和 location.href 有什么区别？</h3><p><code>router</code> 是 <code>hash</code> 改变<br> <code>location.href</code> 是页面跳转，刷新页面</p><h3 id="116、重排和重绘"><a href="#116、重排和重绘" class="headerlink" title="116、重排和重绘"></a>116、重排和重绘</h3><p>部分渲染树（或者整个渲染树）需要重新分析并且节点尺寸需要重新计算。这被称为重排。注意这里至少会有一次重排-初始化页面布局。<br> 由于节点的几何属性发生改变或者由于样式发生改变，例如改变元素背景色时，屏幕上的部分内容需要更新。这样的更新被称为重绘。</p><h3 id="117、什么情况会触发重排和重绘"><a href="#117、什么情况会触发重排和重绘" class="headerlink" title="117、什么情况会触发重排和重绘"></a>117、什么情况会触发重排和重绘</h3><p>添加、删除、更新 DOM 节点<br> 通过 display: none 隐藏一个 DOM 节点-触发重排和重绘<br> 通过 visibility: hidden 隐藏一个 DOM 节点-只触发重绘，因为没有几何变化<br> 移动或者给页面中的 DOM 节点添加动画<br> 添加一个样式表，调整样式属性<br> 用户行为，例如调整窗口大小，改变字号，或者滚动。</p><h3 id="118、js-bind-实现机制？手写一个-bind-方法？"><a href="#118、js-bind-实现机制？手写一个-bind-方法？" class="headerlink" title="118、js bind 实现机制？手写一个 bind 方法？"></a>118、js bind 实现机制？手写一个 bind 方法？</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">fn, context</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> fn.apply(context, <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 柯理化函数思想   感谢pursuitTom的提出</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> thisArgs = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> _this.apply(context, args.concat(thisArgs))</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ES6写法 感谢waterc的提出</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params">context, ...res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> self.apply(context, [...res,...arg])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="119、多个函数"><a href="#119、多个函数" class="headerlink" title="119、多个函数"></a>119、多个函数</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="string">&#x27;1&#x27;</span>;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">//number</span></span><br></pre></td></tr></table></figure><h3 id="120、proto、prototype、Object-getPrototypeOf"><a href="#120、proto、prototype、Object-getPrototypeOf" class="headerlink" title="120、proto、prototype、Object.getPrototypeOf()"></a>120、<strong>proto</strong>、prototype、Object.getPrototypeOf()</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__proto__是指内部原型，和<span class="built_in">Object</span>.getPrototypeOf()结果等价</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">f.__proto__ === <span class="built_in">Object</span>.getPrototypeOf(f); <span class="comment">//true</span></span><br><span class="line">f.prototype === <span class="built_in">Object</span>.getPrototypeOf(f); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="121、浏览记录前后跳转（尚未试验）"><a href="#121、浏览记录前后跳转（尚未试验）" class="headerlink" title="121、浏览记录前后跳转（尚未试验）"></a>121、浏览记录前后跳转（尚未试验）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:history.go(-1)&quot;</span>&gt;</span>backward<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:history.go(1)&quot;</span>&gt;</span>forward<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="122、setTimeout-和-setInterval-细谈"><a href="#122、setTimeout-和-setInterval-细谈" class="headerlink" title="122、setTimeout 和 setInterval 细谈"></a>122、setTimeout 和 setInterval 细谈</h3><p>常问的点，前者是在一定时间过后将函数添加至执行队列，执行时间=延迟时间+之前函数代码执行时间+执行函数时间。<br> 后者是不管前一次是否执行完毕，每隔一定时间重复执行，用于精准执行互相没有影响的重复操作。<br> 如果需要控制前后执行顺序，最好使用setTimeout模拟setInterval</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="number">400</span>, times = <span class="number">0</span>, max = <span class="number">10</span>;</span><br><span class="line">function <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">  times++;</span><br><span class="line">  <span class="keyword">if</span>(times &lt; max)&#123;</span><br><span class="line">    <span class="comment">//code here</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">func</span>, <span class="title">time</span>);</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    console.log(<span class="string">&quot;finished&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">func</span>, <span class="title">time</span>);</span></span><br></pre></td></tr></table></figure><h3 id="123、判断多图片加载完毕"><a href="#123、判断多图片加载完毕" class="headerlink" title="123、判断多图片加载完毕"></a>123、判断多图片加载完毕</h3><p>注：用jQueryObject.ready()只能判断dom结构加载完毕<br> 好像描述的不是很清楚，这里写一下代码。<br> 方法1：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> queryInterval = <span class="number">30</span>; <span class="comment">//ms</span></span><br><span class="line"><span class="keyword">var</span> pics = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;pics&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">singleQuery</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(pics[i].complete)&#123;</span><br><span class="line">    counter++;</span><br><span class="line">    <span class="built_in">console</span>.log(i + <span class="string">&quot; is loaded&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(singleQuery, queryInterval, i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">allQuery</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(counter &lt; pics.length)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;current number of loaded pics: &quot;</span> + counter);</span><br><span class="line">    <span class="built_in">setTimeout</span>(allQuery, queryInterval, callback);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;All pics are loaded.&quot;</span>);</span><br><span class="line">    callback();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; pics.length; i++)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(singleQuery, queryInterval, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(allQuery, queryInterval, callback);</span><br></pre></td></tr></table></figure><p>主要也是采用setTimeout模拟轮询，判断方式是img标签dom的complete属性（布尔值），缺点是定时器太多。</p><p>方法2：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = <span class="number">0</span>, queryInterval = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">var</span> pics = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;pics&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; pics.length; i++)&#123;</span><br><span class="line">  pics[i].onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    counter++;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.id + <span class="string">&quot; is loaded&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryPictures</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(counter &lt; pics.length)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;current number of loaded pics: &quot;</span> + counter);</span><br><span class="line">    <span class="built_in">setTimeout</span>(queryPictures, queryInterval, callback);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;All pics are loaded&quot;</span>);</span><br><span class="line">    callback();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(queryPictures, queryInterval, callback);</span><br></pre></td></tr></table></figure><p>利用onload绑定图片加载成功后的回调，通过计数器判断是否加载完毕。</p><h3 id="124、CSS-margin重叠问题"><a href="#124、CSS-margin重叠问题" class="headerlink" title="124、CSS margin重叠问题"></a>124、CSS margin重叠问题</h3><p>块元素在垂直方向上的margin是很奇怪的，会有重叠现象。<br> 如果display都是block，有三种情况：<br> 外间距均为正数，竖直方向上会选择最大的外边距作为间隔<br> 一正一负，间距 = 正 - |负|<br> 两个负，间距 = 0 - 绝对值最大的那个<br> 设置display: inline-block的盒子不会有margin重叠，position: absolute的也不会出现。</p><h3 id="125、CSS选择器优先级-amp-amp-CSS选择器效率"><a href="#125、CSS选择器优先级-amp-amp-CSS选择器效率" class="headerlink" title="125、CSS选择器优先级 &amp;&amp; CSS选择器效率"></a>125、CSS选择器优先级 &amp;&amp; CSS选择器效率</h3><p>ID &gt; 类 &gt; 标签 &gt; 相邻 &gt; 子选择器 &gt; 后代选择器 &gt; * &gt; 属性 &gt; 伪类</p><h3 id="object-propertyIsEnumerable-xxx"><a href="#object-propertyIsEnumerable-xxx" class="headerlink" title="object.propertyIsEnumerable(xxx)"></a>object.propertyIsEnumerable(xxx)</h3><p>判断对象中是否有xxx属性，并且能通过for in枚举，如Array对象的length是不可枚举的</p><h3 id="126、判断数组"><a href="#126、判断数组" class="headerlink" title="126、判断数组"></a>126、判断数组</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arr) === <span class="string">&#x27;[Object Array]&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="127、git-fetch-amp-amp-git-pull"><a href="#127、git-fetch-amp-amp-git-pull" class="headerlink" title="127、git fetch &amp;&amp; git pull"></a>127、git fetch &amp;&amp; git pull</h3><p>git pull自动完成了fetch最新远程版本，并且和本地进行merge<br> git fetch获得远程分支，要继续手动merge合并</p><h3 id="128、WebSocket"><a href="#128、WebSocket" class="headerlink" title="128、WebSocket"></a>128、WebSocket</h3><p>HTML5带来的新协议，通过类似HTTP的请求建立连接。主要目的是可以获取服务端的推送。<br> 原来的方式可能是使用long poll（即不中断连接一直等待数据），或者是ajax轮询的方式（每隔一段时间发送请求，建立连接，询问是否有新的数据）。这两种方式的缺点在于long poll的阻塞，以及ajax轮询的冗余连接。<br> WebSocket的设计思想有点类似于回调，在发送请求升级服务端的协议并收到确认信息后，服务端一有新的信息/数据就会主动推送给客户端，至于要一次HTTP握手便可以建立持久连接</p><h3 id="129、跨域相关"><a href="#129、跨域相关" class="headerlink" title="129、跨域相关"></a>129、跨域相关</h3><p>只要协议、域名、端口有不同，则视为不同的域。（域名和域名对应的IP也是跨域）</p><h4 id="1-CORS-Cross-Origin-Resource-Sharing"><a href="#1-CORS-Cross-Origin-Resource-Sharing" class="headerlink" title="1.CORS: Cross-Origin Resource Sharing"></a>1.CORS: Cross-Origin Resource Sharing</h4><p>基于服务器支持的跨域，服务器设置Access-Control-Allow-Origin响应头，浏览器可允许跨域</p><h4 id="2-设置domain"><a href="#2-设置domain" class="headerlink" title="2.设置domain"></a>2.设置domain</h4><p>能从子域设到主域，如a.b.c.com—&gt;b.c.com—&gt;c.com<br> 具体情况：在页面中用iframe打开了另一个页面（前提：两个页面主域是相同的）<br> 利用frameElement.contentWindow.document.domain设置frame子页面的主域，document.domain设置主页面的主域，之后就能互相获取dom中的数据。<br> 缺点是只能用于不同子域间的交互。</p><h4 id="3-例如拥有src属性的img标签，每次改变src属性，都会发起http请求。"><a href="#3-例如拥有src属性的img标签，每次改变src属性，都会发起http请求。" class="headerlink" title="3.例如拥有src属性的img标签，每次改变src属性，都会发起http请求。"></a>3.例如拥有src属性的img标签，每次改变src属性，都会发起http请求。</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//code here</span></span><br><span class="line">&#125;;</span><br><span class="line">img.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//code here</span></span><br><span class="line">&#125;;</span><br><span class="line">img.src=<span class="string">&quot;http://server.com/data?query=3&quot;</span>;</span><br></pre></td></tr></table></figure><p>缺点是只能使用GET请求，不能获取数据，一般用于提交统计信息什么的。<br> script、link、iframe只有在添加到DOM中才会发起请求</p><h4 id="4-HTML5-postMessage"><a href="#4-HTML5-postMessage" class="headerlink" title="4.HTML5 postMessage"></a>4.HTML5 postMessage</h4><p>支持IE8+和主流浏览器，写法也简单..</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//source: http://test.org:4000</span></span><br><span class="line"><span class="comment">//get the window object of target origin</span></span><br><span class="line"><span class="keyword">var</span> win = <span class="built_in">window</span>.open(<span class="string">&quot;http://target.com&quot;</span>);</span><br><span class="line"><span class="comment">//or this, when a frame is used</span></span><br><span class="line"><span class="keyword">var</span> win = <span class="built_in">document</span>.getElementById(<span class="string">&quot;targetId&quot;</span>).contentWindow;</span><br><span class="line">win.postMessage(<span class="string">&quot;data here&quot;</span>, <span class="string">&quot;http://target.com/rest&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//target: http://target.com/tiny</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleMessage</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(event.orgin!=<span class="string">&quot;http://test.org:4000&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">var</span> data = event.data;</span><br><span class="line">  <span class="comment">//code here</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//event.source is window.opener</span></span><br><span class="line">  event.source.postMessage(<span class="string">&quot;response data here&quot;</span>, event.origin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;message&quot;</span>, handleMessage, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h4 id="5-window-name"><a href="#5-window-name" class="headerlink" title="5.window.name"></a>5.window.name</h4><p>即使在页面打开多层iframe后，每个iframe中window.name 属性值都是相同的，以此用作数据传输的工具。<br> 但由于跨域的限制，是无法获取另一个frame中的window.name数据，所以要使用一个同域的代理(proxy.html)：</p><h4 id="6-jsonp"><a href="#6-jsonp" class="headerlink" title="6. jsonp"></a>6. jsonp</h4><p>目前主流跨域方法<br> 调用其他域的脚本获取数据，前提是另一个域能知道回调函数名，这个可以通过请求发送给目标域。<br> 直接写jQuery封的jsonp</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.getJSON(<span class="string">&quot;http://target.com/data?callback=callbackFunctionName&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure><p>$.getJSON会把获取的responseText转为json，如果url中有callback参数，数据会以script标签形式获取。</p><h3 id="130、闭包相关"><a href="#130、闭包相关" class="headerlink" title="130、闭包相关"></a>130、闭包相关</h3><h4 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h4><blockquote><p>闭包是指有权访问另一个函数作用域中变量的函数</p></blockquote><h4 id="怎么创建闭包"><a href="#怎么创建闭包" class="headerlink" title="怎么创建闭包"></a>怎么创建闭包</h4><blockquote><p>在函数内部嵌套使用函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">               (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                   <span class="keyword">var</span> variate = i;</span><br><span class="line">                   <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                       <span class="built_in">console</span>.log(<span class="string">&quot;setTimeout执行后:&quot;</span>+variate);</span><br><span class="line">                   &#125;, <span class="number">1000</span>);</span><br><span class="line">               &#125;)();<span class="comment">//闭包,立即执行函数,匿名函数</span></span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">          <span class="built_in">console</span>.log(i);<span class="comment">//2</span></span><br><span class="line">          <span class="built_in">console</span>.log(variate);<span class="comment">//variate is not defined</span></span><br><span class="line">       &#125;</span><br><span class="line">       fn();</span><br></pre></td></tr></table></figure><h4 id="为什么用闭包"><a href="#为什么用闭包" class="headerlink" title="为什么用闭包"></a>为什么用闭包</h4><ul><li>因为在闭包内部保持了对外部活动对象的访问,但外部的变量却无法直接访问内部,避免了全局污染;</li><li>可以当做私有成员,弥补了因js语法带来的面向对象编程的不足;</li><li>可以长久的在内存中保存一个自己想要保存的变量.</li></ul><h4 id="闭包的缺点"><a href="#闭包的缺点" class="headerlink" title="闭包的缺点"></a>闭包的缺点</h4><ul><li>可能导致内存占用过多,因为闭包携带了自身的函数作用域</li><li>闭包只能取得外部包含函数中得最后一个值</li></ul><p>详见<a href="https://segmentfault.com/a/1190000014540734?utm_source=channel-hottest">https://segmentfault.com/a/11…</a></p><h3 id="131、a-active-移动端实现"><a href="#131、a-active-移动端实现" class="headerlink" title="131、a:active 移动端实现"></a>131、a:active 移动端实现</h3><p>有时候一些按钮的简单点击交互可以通过css伪类来实现；必须点击了更改颜色；松开恢复；IOS手机会出现伪类无效的情况；iOS系统的移动设备中，需要在按钮元素或body/html上绑定一个touchstart事件才能激活:active状态。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">&#x27;touchstart&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//...空函数即可&#125;);</span></span><br></pre></td></tr></table></figure><h3 id="132、ios滑动卡顿"><a href="#132、ios滑动卡顿" class="headerlink" title="132、ios滑动卡顿"></a>132、ios滑动卡顿</h3><p>-webkit-overflow-scrolling:touch 可能会在IOS系统低的情况出现滚动条；尝试溢出解决</p><h3 id="133、forEach和map的区别"><a href="#133、forEach和map的区别" class="headerlink" title="133、forEach和map的区别"></a>133、forEach和map的区别</h3><p>相同点</p><ul><li>都是循环遍历数组中的每一项</li><li>forEach和map方法里每次执行匿名函数都支持3个参数，参数分别是item（当前每一项）、index（索引值）、arr（原数组）</li><li>匿名函数中的this都是指向window</li><li>只能遍历数组</li><li>都有兼容问题</li></ul><p>不同点</p><ul><li>map速度比foreach快</li><li>map会返回一个新数组，不对原数组产生影响,foreach不会产生新数组，</li><li>map因为返回数组所以可以链式操作，foreach不能</li></ul><h3 id="134、浅拷贝和深拷贝"><a href="#134、浅拷贝和深拷贝" class="headerlink" title="134、浅拷贝和深拷贝"></a>134、浅拷贝和深拷贝</h3><p>jQuery.extend第一个参数可以是布尔值，用来设置是否深度拷贝的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">jQuery</span><span class="selector-class">.extend</span>(<span class="selector-tag">true</span>, &#123; <span class="attribute">a </span>: &#123; a : <span class="string">&quot;a&quot;</span> &#125; &#125;, &#123; <span class="attribute">a </span>: &#123; b : <span class="string">&quot;b&quot;</span> &#125; &#125; );</span><br><span class="line"><span class="selector-tag">jQuery</span><span class="selector-class">.extend</span>( &#123; <span class="attribute">a </span>: &#123; a : <span class="string">&quot;a&quot;</span> &#125; &#125;, &#123; <span class="attribute">a </span>: &#123; b : <span class="string">&quot;b&quot;</span> &#125; &#125; ); </span><br></pre></td></tr></table></figure><p>最简单的深拷贝</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aa = <span class="built_in">JSON</span>.parse( <span class="built_in">JSON</span>.stringify(a) )</span><br></pre></td></tr></table></figure><p>浅复制—&gt;就是将一个对象的内存地址的“”编号“”复制给另一个对象。深复制—&gt;实现原理，先新建一个空对象，内存中新开辟一块地址，把被复制对象的所有可枚举的(注意可枚举的对象)属性方法一一复制过来，注意要用递归来复制子对象里面的所有属性和方法，直到子子…..属性为基本数据类型。总结，深复制理解两点，1,新开辟内存地址，2,递归来刨根复制。</p><h3 id="135、外边距合并"><a href="#135、外边距合并" class="headerlink" title="135、外边距合并"></a>135、外边距合并</h3><blockquote><p>外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。<br> 合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</p></blockquote><h3 id="136、js加载位置区别优缺点"><a href="#136、js加载位置区别优缺点" class="headerlink" title="136、js加载位置区别优缺点"></a>136、js加载位置区别优缺点</h3><p>html文件是自上而下的执行方式，但引入的css和javascript的顺序有所不同，css引入执行加载时，程序仍然往下执行，而执行到<script>脚本是则中断线程，待该script脚本执行结束之后程序才继续往下执行。<br> 所以，大部分网上讨论是将script脚本放在<body>之后，那样dom的生成就不会因为长时间执行script脚本而延迟阻塞，加快了页面的加载速度。</p><p>但又不能将所有的script放在body之后，因为有一些页面的效果的实现，是需要预先动态的加载一些js脚本。所以这些脚本应该放在<body>之前。</p><p>其次，不能将需要访问dom元素的js放在body之前，因为此时还没有开始生成dom，所以在body之前的访问dom元素的js会出错，或者无效</p><p><strong>script放置位置的原则“页面效果实现类的js应该放在body之前，动作，交互，事件驱动，需要访问dom属性的js都可以放在body之后</strong></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript高级</title>
      <link href="/bubble/2020/07/18/JS%20advanced/"/>
      <url>/bubble/2020/07/18/JS%20advanced/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\bubble\css\APlayer.min.css"><script src="\bubble\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\bubble\js\Meting.min.js"></script><h1 id="javaScripr高级"><a href="#javaScripr高级" class="headerlink" title="javaScripr高级"></a>javaScripr高级</h1><h2 id="javaScript"><a href="#javaScript" class="headerlink" title="javaScript"></a>javaScript</h2><h3 id="javascript是什么？"><a href="#javascript是什么？" class="headerlink" title="javascript是什么？"></a>javascript是什么？</h3><ul><li><p>解析执行：轻量级解释型的</p><p>解释执行 JavaScript PHP 每一行代码都要先解释再执行 – 慢，灵活</p><a id="more"></a><p> var a = 10;</p><p> var b = 20;</p><p> console.log(a, b);</p><p>编译执行 C# Java 一次性编译，然后再一行一行执行 – 快</p></li><li><p>语言特点：动态，头等函数 (First-class Function)</p></li></ul><ul><li>又称函数是 JavaScript 中的一等公民</li></ul><ul><li><p>执行环境：在宿主环境（host environment）下运行，浏览器是最常见的 JavaScript 宿主环境</p><ul><li>但是在很多非浏览器环境中也使用 JavaScript ，例如 node.js</li></ul></li></ul><h3 id="javascript组成"><a href="#javascript组成" class="headerlink" title="javascript组成"></a>javascript组成</h3><ul><li>ECMAScript - 语法规范<ul><li>变量、数据类型、类型转换、操作符</li><li>流程控制语句：判断、循环语句</li><li>数组、函数、作用域、预解析</li><li>对象、属性、方法、简单类型和复杂类型的区别</li><li>内置对象：Math、Date、Array，基本包装类型String、Number、Boolean</li></ul></li><li>Web APIs<ul><li>BOM<ul><li>onload页面加载事件，window顶级对象</li><li>定时器</li><li>location、history</li></ul></li><li>DOM<ul><li>获取页面元素，注册事件</li><li>属性操作，样式操作</li><li>节点属性，节点层级</li><li>动态创建元素</li><li>事件：注册事件的方式、事件的三个阶段、事件对象</li></ul></li></ul></li></ul><h3 id="浏览器是如何工作的"><a href="#浏览器是如何工作的" class="headerlink" title="浏览器是如何工作的"></a>浏览器是如何工作的</h3><p>![浏览器是如何工作的](D:\cheng\myBlog\source_posts\img\浏览器工作 .png)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">User Interface  用户界面，我们所看到的浏览器</span><br><span class="line">Browser engine  浏览器引擎，用来查询和操作渲染引擎</span><br><span class="line">*Rendering engine 用来显示请求的内容，负责解析HTML、CSS，并把解析的内容显示出来。</span><br><span class="line">                负责把HTML文档解释成DOM树</span><br><span class="line">Networking   网络，负责发送网络请求</span><br><span class="line">*JavaScript Interpreter(解析者)   JavaScript解析器，负责执行JavaScript的代码</span><br><span class="line">UI Backend   UI后端，用来绘制类似组合框和弹出窗口</span><br><span class="line">Data Persistence(持久化)  数据持久化，数据存储  cookie、HTML5中的sessionStorage</span><br></pre></td></tr></table></figure><h2 id="javaScipt面向对象编程"><a href="#javaScipt面向对象编程" class="headerlink" title="javaScipt面向对象编程"></a>javaScipt面向对象编程</h2><h3 id="面向对象介绍"><a href="#面向对象介绍" class="headerlink" title="面向对象介绍"></a>面向对象介绍</h3><h4 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a><strong>什么是对象</strong></h4><ul><li><p><strong>现实世界中的对象</strong></p><p>对象是单个事 物的抽象。</p><p>一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。</p></li><li><p><strong>程序世界中的对象</strong></p><p>对象是一个容器，封装了属性（property）和方法（method）。</p><ul><li>属性是对象的状态，方法是对象的行为（完成某种任务）。<ul><li>比如：我们可以把动物抽象为animal对象，使用“属性”记录具体是那一种动物，使用“方法”表示动物的某种行为（奔跑、捕猎、休息等等）。</li></ul></li><li>对象是一个抽象的概念，可以将其简单理解为：<strong>数据集或功能集</strong>。</li><li>ECMAScript-262 把对象定义为：<strong>无序属性的集合，其属性可以包含基本值、对象或者函数</strong>。</li></ul><blockquote><p>提示：每个对象都是基于一个引用类型创建的，这些类型可以是系统内置的原生类型，也可以是开发人员自定义的类型。</p><p>Array 类型 构造函数</p><p>var arr = new Array();</p></blockquote><p>Student 一类事物 类型</p><p>var s = new Student(); 通过类型，创建了一个具体的对象</p></li></ul><h4 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h4><blockquote><p>面向对象不是新的东西，它只是过程式代码的一种高度封装，目的在于<strong>提高</strong>代码的<strong>开发效率</strong>和<strong>可维护性</strong>。</p></blockquote><ul><li><p>面向对象编程</p><p>Object Oriented Programming，简称 OOP ，是一种编程开发思想。它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。</p></li><li><p>在面向对象程序开发思想中，每一个对象都是功能中心，具有<strong>明确分工</strong>，可以完成接受信息、处理数据、发出信息等任务。对象要<strong>职责分明</strong></p></li></ul><blockquote><p>因此，面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一系列函数或指令组成的传统的过程式编程（procedural programming），更适合多人合作的大型软件项目。</p></blockquote><p>面向对象与面向过程：</p><ul><li>面向过程就是亲力亲为，事无巨细，面面俱到，步步紧跟，有条不紊</li><li>面向对象就是找一个对象，指挥得结果</li><li>面向对象将执行者转变成指挥者</li><li><strong>面向对象不是面向过程的替代，而是面向过程的封装</strong></li></ul><p><strong>面向对象的特性</strong>：</p><ul><li>封装性</li><li>继承性</li><li>[多态性]抽象</li></ul><h4 id="程序中面向对象的基本体现"><a href="#程序中面向对象的基本体现" class="headerlink" title="程序中面向对象的基本体现"></a>程序中面向对象的基本体现</h4><p>在 JavaScript 中，所有数据类型都可以视为对象，当然也可以自定义对象。 自定义的对象数据类型就是面向对象中的类（ Class ）的概念。</p><p>我们以一个例子来说明面向过程和面向对象在程序流程上的不同之处。</p><p>假设我们要处理学生的成绩表，为了表示一个学生的成绩，面向过程的程序可以用一个对象表示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> std1 = &#123; <span class="attr">name</span>: <span class="string">&#x27;Michael&#x27;</span>, <span class="attr">score</span>: <span class="number">98</span> &#125;</span><br><span class="line"><span class="keyword">var</span> std2 = &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">score</span>: <span class="number">81</span> &#125;</span><br></pre></td></tr></table></figure><p>而处理学生成绩可以通过函数实现，比如打印学生的成绩：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printScore</span> (<span class="params">student</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;姓名：&#x27;</span> + student.name + <span class="string">&#x27;  &#x27;</span> + <span class="string">&#x27;成绩：&#x27;</span> + student.score)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果采用面向对象的程序设计思想，我们首选思考的不是程序的执行流程， 而是 <code>Student</code> 这种数据类型应该被视为一个对象，这个对象拥有 <code>name</code> 和 <code>score</code> 这两个属性（Property）。 如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个 <code>printScore</code> 消息，让对象自己把自己的数据打印出来。</p><p>抽象数据行为模板（Class）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, score</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.score = score;</span><br><span class="line">  <span class="built_in">this</span>.printScore = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;姓名：&#x27;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27;  &#x27;</span> + <span class="string">&#x27;成绩：&#x27;</span> + <span class="built_in">this</span>.score);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据模板创建具体实例对象（Instance）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> std1 = <span class="keyword">new</span> Student(<span class="string">&#x27;Michael&#x27;</span>, <span class="number">98</span>)</span><br><span class="line"><span class="keyword">var</span> std2 = <span class="keyword">new</span> Student(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">81</span>)</span><br></pre></td></tr></table></figure><p>实例对象具有自己的具体行为（给对象发消息）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std1.printScore() <span class="comment">// =&gt; 姓名：Michael  成绩：98</span></span><br><span class="line">std2.printScore() <span class="comment">// =&gt; 姓名：Bob  成绩 81</span></span><br></pre></td></tr></table></figure><p>面向对象的设计思想是从自然界中来的，因为在自然界中，类（Class）和实例（Instance）的概念是很自然的。 Class 是一种抽象概念，比如我们定义的 Class——Student ，是指学生这个概念， 而实例（Instance）则是一个个具体的 Student ，比如， Michael 和 Bob 是两个具体的 Student 。</p><p>所以，面向对象的设计思想是：</p><ul><li>抽象出 Class(构造函数)</li><li>根据 Class(构造函数) 创建 Instance</li><li>指挥 Instance 得结果</li></ul><p>面向对象的抽象程度又比函数要高，因为一个 Class 既包含数据，又包含操作数据的方法。</p><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><h4 id="简单方式"><a href="#简单方式" class="headerlink" title="简单方式"></a>简单方式</h4><p>我们可以直接通过 <code>new Object()</code> 创建：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">person.name = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">person.age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">person.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次创建通过 <code>new Object()</code> 比较麻烦，所以可以通过它的简写形式对象字面量来创建：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上面的写法固然没有问题，但是假如我们要生成两个 <code>person</code> 实例对象呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Mike&#x27;</span>,</span><br><span class="line">  age: <span class="number">16</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码我们不难看出，这样写的代码太过冗余，重复性太高。</p><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>内容引导：</p><ul><li>构造函数语法</li><li>分析构造函数</li><li>构造函数和实例对象的关系<ul><li>实例的 constructor 属性</li><li>instanceof 操作符</li></ul></li><li>普通函数调用和构造函数调用的区别</li><li>构造函数的问题</li></ul><h4 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h4><p>构造函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p1.sayName(); <span class="comment">// =&gt; Jack</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">&#x27;Mike&#x27;</span>, <span class="number">23</span>)</span><br><span class="line">p2.sayName(); <span class="comment">// =&gt; Mike</span></span><br></pre></td></tr></table></figure><h4 id="解析构造函数代码的执行"><a href="#解析构造函数代码的执行" class="headerlink" title="解析构造函数代码的执行"></a>解析构造函数代码的执行</h4><p>而要创建 <code>Person</code> 实例，则必须使用 <code>new</code> 操作符。 以这种方式调用构造函数会经历以下 4 个步骤：</p><ol><li>创建一个新对象</li><li>将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）</li><li>执行构造函数中的代码</li><li>返回新对象</li></ol><p>下面是具体的伪代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当使用 new 操作符调用 Person() 的时候，实际上这里会先创建一个对象</span></span><br><span class="line">  <span class="comment">// var instance = &#123;&#125;</span></span><br><span class="line">  <span class="comment">// 然后让内部的 this 指向 instance 对象</span></span><br><span class="line">  <span class="comment">// this = instance</span></span><br><span class="line">  <span class="comment">// 接下来所有针对 this 的操作实际上操作的就是 instance</span></span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 在函数的结尾处会将 this 返回，也就是 instance</span></span><br><span class="line">  <span class="comment">// return this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造函数和对象-实例-的关系"><a href="#构造函数和对象-实例-的关系" class="headerlink" title="构造函数和对象(实例)的关系"></a>构造函数和对象(实例)的关系</h4><p>在每一个实例对象中同时有一个 <code>constructor</code> 属性，该属性指向创建该实例的构造函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p1.constructor === Person); <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(p2.constructor === Person); <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.constructor === p2.constructor); <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>对象的 <code>constructor</code> 属性最初是用来标识对象类型的， 但是，如果要检测对象的类型，还是使用 <code>instanceof</code> 操作符更可靠一些：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person); <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(p2 <span class="keyword">instanceof</span> Person); <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li><p>构造函数是根据具体的事物抽象出来的抽象<strong>模板</strong></p></li><li><p>实例对象是根据抽象的构造函数模板得到的具体实例对象</p></li><li><p>每一个实例对象都具有一个</p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">constructor</span><br></pre></td></tr></table></figure><p>  属性，指向创建该实例的构造函数</p><ul><li>注意： <code>constructor</code> 是实例的属性的说法不严谨，具体后面的原型会讲到</li></ul><ul><li>可以通过实例的</li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">constructor</span><br></pre></td></tr></table></figure><p>  属性判断实例和构造函数之间的关系</p><ul><li>注意：这种方式不严谨，推荐使用 <code>instanceof</code> 操作符，后面学原型会解释为什么</li></ul><h4 id="实例成员和静态成员"><a href="#实例成员和静态成员" class="headerlink" title="实例成员和静态成员"></a>实例成员和静态成员</h4><ul><li><p>实例成员</p><p>属于对象的成员，每一个对象都具有的成员，但是每个对象具有的这个成员的值是不同的。</p><p>例如：p.name。通过Person构造函数创建的对象的name属性的值是不同的</p></li><li><p>静态成员</p><p>属于构造函数的成员，所有对象都共享</p><p>Person.verson = ‘1.0’;</p></li></ul><h4 id="构造函数的问题"><a href="#构造函数的问题" class="headerlink" title="构造函数的问题"></a>构造函数的问题</h4><p>使用构造函数带来的最大的好处就是创建对象更方便了，但是其本身也存在一个浪费内存的问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.type = <span class="string">&#x27;human&#x27;</span>;</span><br><span class="line">  <span class="built_in">this</span>.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello &#x27;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">16</span>);</span><br></pre></td></tr></table></figure><p>在该示例中，从表面上好像没什么问题，但是实际上这样做，有一个很大的弊端。 那就是对于每一个实例对象，<code>type</code> 和 <code>sayHello</code> 都是一模一样的内容， 每一次生成一个实例，都必须为重复的内容，多占用一些内存，如果实例对象很多，会造成极大的内存浪费。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p1.sayHello === p2.sayHello); <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><p>对于这种问题我们可以把需要共享的函数定义到构造函数外部：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span> = <span class="title">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;hello &#x27;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.type = <span class="string">&#x27;human&#x27;</span>;</span><br><span class="line">  <span class="built_in">this</span>.sayHello = sayHello;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;Top&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayHello === p2.sayHello) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>这样确实可以了，但是如果有多个需要共享的函数的话就会造成全局命名空间冲突的问题。</p><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><ul><li><strong>构造函数的原型</strong></li></ul><p>更好的解决对象中方法占用内容的方式的方案： <strong>prototype</strong></p><p>JavaScript 规定，每一个**(构造)函数<strong>都有一个 **prototype</strong> 属性，指向另一个对象。 <strong>这个对象的所有属性和方法，都会被构造函数的对象所拥有</strong>。</p><p>这也就意味着，我们可以把所有对象实例需要共享的属性和方法直接定义在 <code>prototype</code> 对象上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype)</span><br><span class="line"></span><br><span class="line">Person.prototype.type = <span class="string">&#x27;human&#x27;</span></span><br><span class="line"></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(...)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(...)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayName === p2.sayName) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>这时所有实例的 <code>type</code> 属性和 <code>sayName()</code> 方法， 其实都是同一个内存地址，指向 <strong>prototype</strong> 对象，因此就提高了运行效率。</p><ul><li><p><strong>对象的原型</strong></p><p>每一个对象都有一个<strong><strong>proto</strong></strong>的属性，此属性指向构造函数的<strong>prototype</strong></p><blockquote><p><strong>注意</strong>：<code>__proto__</code> 是非标准属性。</p></blockquote></li></ul><h4 id="构造函数、实例、原型三者之间的关系"><a href="#构造函数、实例、原型三者之间的关系" class="headerlink" title="构造函数、实例、原型三者之间的关系"></a>构造函数、实例、原型三者之间的关系</h4><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://lixiaohui100200.github.io/assets/img/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E5%AE%9E%E4%BE%8B-%E5%8E%9F%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="img"></p><p>任何函数都具有一个 <strong>prototype</strong> 属性，该属性是一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(F.prototype) <span class="comment">// =&gt; object</span></span><br><span class="line"></span><br><span class="line">F.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;hi!&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数的 <code>prototype</code> 对象默认都有一个 <strong>constructor</strong> 属性，指向 <strong>prototype</strong> 对象所在函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(F.prototype.constructor === F) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>通过构造函数得到的实例对象内部会包含一个指向构造函数的 <code>prototype</code> 对象的指针 <code>__proto__</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> F()</span><br><span class="line"><span class="built_in">console</span>.log(instance.__proto__ === F.prototype) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p>实例对象可以直接访问原型对象成员。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">instance.sayHi() <span class="comment">// =&gt; hi!</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>任何函数都具有一个 <code>prototype</code> 属性，该属性是一个对象</li><li><code>prototype</code> 对象默认都有一个 <code>constructor</code> 属性，指向 <code>prototype</code> 对象所在函数</li><li>通过构造函数得到的实例对象内部会包含一个指向构造函数的 <code>prototype</code> 对象的指针 <code>__proto__</code></li><li>所有实例都直接或间接继承了原型对象的成员</li></ul><h4 id="属性成员的搜索原则：原型链"><a href="#属性成员的搜索原则：原型链" class="headerlink" title="属性成员的搜索原则：原型链"></a>属性成员的搜索原则：原型链</h4><p>了解了 <strong>构造函数-实例-原型对象</strong> 三者之间的关系后，接下来我们来解释一下为什么实例对象可以访问原型对象中的成员。</p><p>每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性</p><ul><li>搜索首先从对象实例本身开始</li><li>如果在实例中找到了具有给定名字的属性，则返回该属性的值</li><li>如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性</li><li>如果在原型对象中找到了这个属性，则返回该属性的值</li></ul><p>也就是说，在我们调用 <code>person1.sayName()</code> 的时候，会先后执行两次搜索：</p><ul><li>首先，解析器会问：“实例 person1 有 sayName 属性吗？”答：“没有。</li><li>”然后，它继续搜索，再问：“ person1 的原型有 sayName 属性吗？”答：“有。</li><li>”于是，它就读取那个保存在原型对象中的函数。</li><li>当我们调用 person2.sayName() 时，将会重现相同的搜索过程，得到相同的结果。</li></ul><p>而这正是多个对象实例共享原型所保存的属性和方法的基本原理。</p><p>总结：</p><ul><li>先在自己身上找，找到即返回</li><li>自己身上找不到，则沿着原型链向上查找，找到即返回</li><li>如果一直到原型链的末端还没有找到<ul><li>如果是属性则返回 <code>undefined</code></li><li>如果是方法会报错</li></ul></li></ul><h4 id="实例对象读写原型对象成员"><a href="#实例对象读写原型对象成员" class="headerlink" title="实例对象读写原型对象成员"></a>实例对象读写原型对象成员</h4><p>读取：</p><ul><li>先在自己身上找，找到即返回</li><li>自己身上找不到，则沿着原型链向上查找，找到即返回</li><li>如果一直到原型链的末端还没有找到<ul><li>如果是属性则返回 <code>undefined</code></li><li>如果是方法会报错</li></ul></li></ul><p>写入：</p><ul><li>当实例期望重写原型对象中的某个普通数据成员时实际上会把该成员添加到自己身上</li><li>也就是说该行为实际上会屏蔽掉对原型对象成员的访问</li></ul><h4 id="更简单的原型语法"><a href="#更简单的原型语法" class="headerlink" title="更简单的原型语法"></a>更简单的原型语法</h4><p>我们注意到，前面例子中每添加一个属性和方法就要敲一遍 <code>Person.prototype</code> 。 为减少不必要的输入，更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  type: <span class="string">&#x27;human&#x27;</span>,</span><br><span class="line">  sayHello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我叫&#x27;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27;，我今年&#x27;</span> + <span class="built_in">this</span>.age + <span class="string">&#x27;岁了&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该示例中，我们将 <code>Person.prototype</code> 重置到了一个新的对象。 这样做的好处就是为 <code>Person.prototype</code> 添加成员简单了，但是也会带来一个问题，那就是原型对象丢失了 <code>constructor</code> 成员。</p><p>所以，我们为了保持 <code>constructor</code> 的指向正确，建议的写法是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Person, // =&gt; 手动将 <span class="keyword">constructor</span> 指向正确的构造函数</span><br><span class="line">  type: &#x27;human&#x27;,</span><br><span class="line">  sayHello: function () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我叫&#x27;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27;，我今年&#x27;</span> + <span class="built_in">this</span>.age + <span class="string">&#x27;岁了&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="原生对象的原型"><a href="#原生对象的原型" class="headerlink" title="原生对象的原型"></a>原生对象的原型</h4><p>所有函数都有 prototype 属性对象。</p><ul><li>Object.prototype</li><li>Function.prototype</li><li>Array.prototype</li><li>String.prototype</li><li>Number.prototype</li><li>Date.prototype</li><li>…</li></ul><blockquote><p><strong>注意</strong>：内置对象的<strong>prototype</strong>属性(只读属性)不能够直接复制</p></blockquote><h4 id="原型对象使用建议"><a href="#原型对象使用建议" class="headerlink" title="原型对象使用建议"></a>原型对象使用建议</h4><ul><li>属性（一般就是非函数成员）放到构造函数中</li><li>方法（一般就是函数）放到原型对象中</li><li>如果重置了 <code>prototype</code> 记得修正 <code>constructor</code> 的指向</li></ul><h3 id="案例：随机方块游戏"><a href="#案例：随机方块游戏" class="headerlink" title="案例：随机方块游戏"></a>案例：随机方块游戏</h3><ul><li><p>分析对象：方块对象 Box</p></li><li><p>分析属性和方法</p><ul><li>属性<ul><li>left、top 方块的坐标</li><li>size 方块的大小（方块是正方形的）</li><li>color 方块的颜色</li><li>_div 方块对应的div</li></ul></li><li>方法<ul><li>random 随机生成位置</li></ul></li></ul></li><li><p>构造函数</p><p>构造函数中设置方块的属性，创建div</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Box</span>(<span class="params">map</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.left = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">this</span>.top = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">this</span>.size = <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">this</span>.color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  map.appendChild(<span class="built_in">this</span>.div);</span><br><span class="line">  <span class="built_in">this</span>.div.className = <span class="string">&#x27;box&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>随机方块的位置</p><ol><li>随机生成方块的坐标，范围在map中</li><li>随机生成方块的颜色</li><li>设置div的样式属性</li><li>构造函数中调用random</li><li>新建app.js创建方块进行测试</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Box.prototype.random = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 随机生成坐标</span></span><br><span class="line">  <span class="keyword">var</span> maxX = <span class="number">800</span> / <span class="built_in">this</span>.size - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> maxY = <span class="number">600</span> / <span class="built_in">this</span>.size - <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">this</span>.left = getRandom(<span class="number">0</span>, maxX) * <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">this</span>.top = getRandom(<span class="number">0</span>, maxY) * <span class="number">20</span>;</span><br><span class="line">  <span class="comment">// 2. 随机生成颜色</span></span><br><span class="line">  <span class="keyword">var</span> r = getRandom(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">  <span class="keyword">var</span> g = getRandom(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">  <span class="keyword">var</span> b = getRandom(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">  <span class="built_in">this</span>.color = <span class="string">&#x27;rgb(&#x27;</span>+ r +<span class="string">&#x27;, &#x27;</span>+ g +<span class="string">&#x27;, &#x27;</span>+ b +<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">  <span class="comment">// 3. 设置div的样式属性</span></span><br><span class="line">  <span class="built_in">this</span>.div.style.left = <span class="built_in">this</span>.left + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  <span class="built_in">this</span>.div.style.top = <span class="built_in">this</span>.top + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  <span class="built_in">this</span>.div.style.width = <span class="built_in">this</span>.size + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  <span class="built_in">this</span>.div.style.height = <span class="built_in">this</span>.size + <span class="string">&#x27;px&#x27;</span>;  </span><br><span class="line">  <span class="built_in">this</span>.div.style.backgroundColor = <span class="built_in">this</span>.color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>随机生成[min, max]之间的整数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>游戏主逻辑</p><ol><li><p>创建方块对象</p></li><li><p>开启定时器，定时随机方块的位置</p></li><li><p>点击map，判断鼠标的位置是否在方块上</p><p>3.1 获取鼠标在map中的坐标</p><p>3.2 判断鼠标的位置是否在方块上，如果赢了，停止定时器</p></li></ol></li></ul><hr><h3 id="自调用函数"><a href="#自调用函数" class="headerlink" title="自调用函数"></a>自调用函数</h3><ul><li><p>自调用函数</p><ul><li><p>解决变量冲突的问题</p></li><li><p>问题：演示不加分号的问题</p></li><li><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> msg = <span class="string">&#x27;你猜谁能访问我&#x27;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(msg);</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>函数要使用()包含起来，把函数变成表达式</li><li>后面的小括号是函数调用</li></ul></blockquote></li><li><p>问题</p><ul><li><p>问题1：如果存在多个自调用函数要用分号分割，否则语法错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li><li><p>问题2：当自调用函数 前面有函数声明时，会出错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所以建议自调用函数前，加上;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&#x27;11&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&#x27;22&#x27;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>bind改变函数中的this</p><ul><li><p>定时器中的this指向谁？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li><li><p>如何把定时器中的this改变成其它对象？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;.bind(obj), <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>bind() 可以改变函数内部的this的指向，并返回一个新的函数</p></blockquote></li></ul><h3 id="什么是继承"><a href="#什么是继承" class="headerlink" title="什么是继承"></a>什么是继承</h3><ul><li>现实生活中的继承</li><li>程序中的继承<ul><li>子类型继承父类型的成员，让代码重用</li></ul></li></ul><h3 id="对象的”继承”"><a href="#对象的”继承”" class="headerlink" title="对象的”继承”"></a>对象的”继承”</h3><p>通过遍历把一个对象的所有成员拷贝给另一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象的拷贝</span></span><br><span class="line"><span class="comment">// 复制对象的成员给另一个对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">parent, child</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> parent) &#123;</span><br><span class="line">    <span class="comment">// 不复制同名的属性</span></span><br><span class="line">    <span class="keyword">if</span> (child[key]) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    child[key] = parent[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><ul><li>继承：类型和类型之间的关系</li><li>学生类型 老师类型 -&gt; Person类型</li><li>继承目的： 把子类型中共同的成员提取到父类型中，代码重用</li><li>可以方便的基础父类型的原型中的方法，但是属性的继承无意义</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line">  <span class="built_in">this</span>.age = <span class="number">18</span>;</span><br><span class="line">  <span class="built_in">this</span>.sex = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;大家好，我是&#x27;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.score = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person();</span><br><span class="line">Student.prototype.constructor = Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="built_in">console</span>.log(s1.constructor);</span><br></pre></td></tr></table></figure><blockquote><p>注意：当设置了构造函数的prototype之后，别忘记设置constructor</p><p>问题：原型继承，无法设置构造函数的参数**Student.prototype = new Person();**只执行一次，无法给属性传值</p></blockquote><h3 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h3><ul><li><p>前置知识 call</p><p>使用call可以改变函数中的this，并且可以立即调用函数</p><p>和bind不同的是，bind会返回一个新函数，而call是直接调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(x + y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  name: <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// call()  改变函数中的this，直接调用函数</span></span><br><span class="line">fn.call(o, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li><li><p>借用构造函数</p><p>可以方便的继承父类型的属性，但是无法继承原型中的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, sex, score</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="built_in">this</span>, name, age, sex);</span><br><span class="line">  <span class="built_in">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Student(<span class="string">&#x27;zs&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(s1);</span><br></pre></td></tr></table></figure><blockquote><p>借用构造函数继承的问题：无法继承方法</p></blockquote></li></ul><h3 id="组合继承：原型继承-借用构造函数继承"><a href="#组合继承：原型继承-借用构造函数继承" class="headerlink" title="组合继承：原型继承+借用构造函数继承"></a>组合继承：原型继承+借用构造函数继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;大家好，我是&#x27;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, sex, score</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 借用构造函数</span></span><br><span class="line">  Person.call(<span class="built_in">this</span>, name, age, sex);</span><br><span class="line">  <span class="built_in">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person();</span><br><span class="line">Student.prototype.constructor = Student;</span><br><span class="line"><span class="comment">// 学生特有的方法</span></span><br><span class="line">Student.prototype.exam = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;考试&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>小结</strong>：</p><p>继承：子类型所有对象具有父类型的成员</p><p>关于继承要记住下面两句代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student.prototype = <span class="keyword">new</span> Person();</span><br><span class="line">Student.prototype.constructor = Student;</span><br></pre></td></tr></table></figure><hr><h2 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h2><h3 id="函数的定义方式"><a href="#函数的定义方式" class="headerlink" title="函数的定义方式"></a>函数的定义方式</h3><ul><li>函数声明</li><li>函数表达式</li><li><code>new Function</code></li></ul><h4 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="new-Function"><a href="#new-Function" class="headerlink" title="new Function"></a><strong>new Function</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;return a + b;&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> sum = fn(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><h4 id="函数声明与函数表达式的区别"><a href="#函数声明与函数表达式的区别" class="headerlink" title="函数声明与函数表达式的区别"></a>函数声明与函数表达式的区别</h4><ul><li>函数声明必须有名字</li><li><strong>函数声明会函数提升</strong>，在预解析阶段就已创建，声明前后都可以调用</li><li>函数表达式类似于变量赋值，提升的仅仅是变量声明</li><li>函数表达式可以没有名字，例如匿名函数</li><li>函数表达式没有变量提升，在执行阶段创建，必须在表达式执行之后才可以调用</li></ul><p>下面是一个根据条件定义函数的例子(了解)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码执行结果在不同浏览器中结果不一致。有些浏览器里不会进行函数提升(Chrome)，有些浏览器中会函数提升。</p><p>不过我们可以使用函数表达式解决上面的问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的调用方式"><a href="#函数的调用方式" class="headerlink" title="函数的调用方式"></a>函数的调用方式</h3><ul><li>普通函数</li><li>构造函数</li><li>对象方法</li></ul><h3 id="函数内-this-指向的不同场景"><a href="#函数内-this-指向的不同场景" class="headerlink" title="函数内 this 指向的不同场景"></a>函数内 <code>this</code> 指向的不同场景</h3><p>函数的调用方式决定了 <code>this</code> 指向的不同：</p><table><thead><tr><th>调用方式</th><th>非严格模式</th><th>备注</th></tr></thead><tbody><tr><td>普通函数调用</td><td>window</td><td>严格模式下是 undefined</td></tr><tr><td>构造函数调用</td><td>实例对象</td><td>原型方法中 this 也是实例对象</td></tr><tr><td>对象方法调用</td><td>该方法所属对象</td><td>紧挨着的对象</td></tr><tr><td>事件绑定方法</td><td>绑定事件对象</td><td></td></tr><tr><td>定时器函数</td><td>window</td><td></td></tr></tbody></table><p>这就是对函数内部 this 指向的基本整理，写代码写多了自然而然就熟悉了。</p><blockquote><p><strong>注意</strong>：<strong>函数内部的this，是由函数的调用方式决定的。</strong></p></blockquote><h3 id="函数也是对象"><a href="#函数也是对象" class="headerlink" title="函数也是对象"></a>函数也是对象</h3><ul><li>所有函数都是 <code>Function</code> 的实例</li></ul><h3 id="改变函数中的this"><a href="#改变函数中的this" class="headerlink" title="改变函数中的this"></a>改变函数中的this</h3><ul><li><p>为什么要改变函数内部的this</p><p>例如：我们经常在定时器外部备份 this 引用，然后在定时器函数内部使用外部 this 的引用。</p></li><li><p>函数有三个方法可以改变内部的this：call、apply、bind。</p></li></ul><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><p><code>call()</code> 方法调用一个函数, 其具有一个指定的 <code>this</code> 值和分别地提供的参数(参数的列表)。</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.call(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li><code>thisArg</code><ul><li>在 fun 函数运行时指定的 this 值</li><li>如果指定了 null 或者 undefined 则内部 this 指向 window</li></ul></li><li><code>arg1, arg2, ...</code><ul><li>指定的参数列表</li></ul></li></ul><p>应用：</p><ol><li><p>借用构造函数</p></li><li><p>借用其他对象的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪数组</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="number">11</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="number">20</span>,</span><br><span class="line">  length: <span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.call(obj, <span class="number">30</span>);</span><br><span class="line"><span class="built_in">Array</span>.prototype.splice.call(obj, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 借用Object的toString()</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(arr));</span><br></pre></td></tr></table></figure></li></ol><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><p><code>apply()</code> 方法调用一个函数, 其具有一个指定的 <code>this</code> 值，以及作为一个数组（或类似数组的对象）提供的参数。</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.apply(thisArg, [argsArray])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li><code>thisArg</code></li><li><code>argsArray</code></li></ul><p><code>apply()</code> 与 <code>call()</code> 非常相似，不同之处在于提供参数的方式。 <code>apply()</code> 使用参数数组而不是一组参数列表。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.apply(<span class="built_in">this</span>, [<span class="string">&#x27;eat&#x27;</span>, <span class="string">&#x27;bananas&#x27;</span>])</span><br></pre></td></tr></table></figure><p>应用：把数组展开</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Math.max(3, 5, 6);</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>];</span><br><span class="line"><span class="comment">// Math.max不能求数组中的最大值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, arr));</span><br><span class="line"><span class="comment">// console.log(1, 2, 3);</span></span><br><span class="line"><span class="comment">// console.log(arr);</span></span><br><span class="line"><span class="built_in">console</span>.log.apply(<span class="literal">null</span>, arr);</span><br><span class="line"><span class="built_in">console</span>.log.apply(<span class="built_in">console</span>, arr);</span><br></pre></td></tr></table></figure><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><ul><li>bind不会调用函数，会返回一个新的函数</li><li>新函数内部的this是bind的第一个参数</li><li>原函数中的参数，通过第二个参数传递</li></ul><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.bind(thisArg[, arg1[, arg2[, ...]]])</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>thisArg<ul><li>当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。当使用new 操作符调用绑定函数时，该参数无效。</li></ul></li><li>arg1, arg2, …<ul><li>当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。</li></ul></li></ul><p>返回值：</p><p>返回由指定的this值和初始化参数改造的原函数拷贝。</p><p>示例1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  fun: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;.bind(<span class="built_in">this</span>), <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.fun();</span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 事件处理函数中的this  是触发该事件的对象</span></span><br><span class="line">  <span class="comment">// 通过bind 改变事件处理函数中this的指向</span></span><br><span class="line">&#125;.bind(obj);</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>call 和 apply 特性一样<ul><li>都是用来调用函数，而且是立即调用</li><li>但是可以在调用函数的同时，通过第一个参数指定函数内部 <code>this</code> 的指向</li><li>call 调用的时候，参数必须以参数列表的形式进行传递，也就是以逗号分隔的方式依次传递即可</li><li>apply 调用的时候，参数必须是一个数组，然后在执行的时候，会将数组内部的元素一个一个拿出来，与形参一一对应进行传递</li><li>如果第一个参数指定了 <code>null</code> 或者 <code>undefined</code> 则内部 this 指向 window</li></ul></li><li>bind<ul><li>可以用来指定内部 this 的指向，然后生成一个改变了 this 指向的新的函数</li><li>它和 call、apply 最大的区别是：bind 不会调用</li><li>bind 支持传递参数，它的传参方式比较特殊，一共有两个位置可以传递<ul><li><ol><li>在 bind 的同时，以参数列表的形式进行传递</li></ol></li><li><ol><li>在调用的时候，以参数列表的形式进行传递</li></ol></li><li>那到底以谁 bind 的时候传递的参数为准呢还是以调用的时候传递的参数为准</li><li>两者合并：bind 的时候传递的参数和调用的时候传递的参数会合并到一起，传递到函数内部</li></ul></li></ul></li></ul><h3 id="函数的其它成员"><a href="#函数的其它成员" class="headerlink" title="函数的其它成员"></a>函数的其它成员</h3><ul><li><ul><li>实参集合</li></ul></li><li>caller<ul><li>函数的调用者</li></ul></li><li>length<ul><li>形参的个数</li></ul></li><li>name<ul><li>函数的名称</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(fn.length) <span class="comment">// =&gt; 形参的个数</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>) <span class="comment">// 伪数组实参参数集合</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee === fn) <span class="comment">// 函数本身</span></span><br><span class="line">  <span class="built_in">console</span>.log(fn.caller) <span class="comment">// 函数的调用者</span></span><br><span class="line">  <span class="built_in">console</span>.log(fn.name) <span class="comment">// =&gt; 函数的名字</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fn(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f()</span><br></pre></td></tr></table></figure><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><ul><li>函数可以作为参数</li><li>函数可以作为返回值</li></ul><h4 id="作为参数"><a href="#作为参数" class="headerlink" title="作为参数"></a>作为参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eat</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;吃完了&#x27;</span>)</span><br><span class="line">    callback();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eat(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;去唱歌&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="作为返回值"><a href="#作为返回值" class="headerlink" title="作为返回值"></a>作为返回值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genFun</span> (<span class="params">type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === type;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isArray = genFun(<span class="string">&#x27;[object Array]&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> isObject = genFun(<span class="string">&#x27;[object Object]&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isArray([])); <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(isArray(&#123;&#125;)); <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><h3 id="作用域、作用域链、预解析"><a href="#作用域、作用域链、预解析" class="headerlink" title="作用域、作用域链、预解析"></a>作用域、作用域链、预解析</h3><ul><li>函数作用域</li><li><strong>没有块级作用域</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> foo = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>作用域链示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">30</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b + c);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="number">40</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(c + d);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn1();</span><br><span class="line">  fn2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>内层作用域可以访问外层作用域，反之不行</li></ul><h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><p><strong>闭包</strong>：闭包是函数和声明该函数的词法环境的组合。</p><ul><li>闭包就是能够读取其他函数内部变量的函数，</li><li>闭包就是将函数内部和函数外部连接起来的一座桥梁。</li></ul><p>闭包的用途：</p><ul><li>可以在函数外部读取函数内部成员</li><li>让函数内成员始终存活在内存中</li></ul><h4 id="一些关于闭包的例子"><a href="#一些关于闭包的例子" class="headerlink" title="一些关于闭包的例子"></a>一些关于闭包的例子</h4><p>闭包演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fn();</span><br><span class="line"><span class="built_in">console</span>.log(f());</span><br></pre></td></tr></table></figure><p>案例1：第一次调用生成一个随机数，以后每次调用都返回这个随机数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> random = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">10</span>) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> random; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn = getRandom();</span><br><span class="line"><span class="built_in">console</span>.log(fn());</span><br><span class="line"><span class="built_in">console</span>.log(fn());</span><br></pre></td></tr></table></figure><p>案例2：写一个函数返回一个返回，返回的函数可以实现1+m, 100+m, 1000+m</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFun</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">m</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n + m;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 求 100 + m</span></span><br><span class="line"><span class="keyword">var</span> fn100 = getFun(<span class="number">100</span>);</span><br><span class="line"><span class="comment">// 求 1000 + m</span></span><br><span class="line"><span class="keyword">var</span> fn1000 = getFun(<span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fn100(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(fn1000(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>案例3：闭包的经典案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> heroes = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;heroes&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> list = heroes.children;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> li = list[i];</span><br><span class="line"></span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    li.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 点击li的时候输出当前li对应的索引</span></span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例4：点击按钮设置文档字体大小</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个函数，设置body的字体大小</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFun</span>(<span class="params">size</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.body.style.fontSize = size + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">btn1.onclick = makeFun(<span class="number">12</span>);</span><br><span class="line">btn2.onclick = makeFun(<span class="number">14</span>);</span><br><span class="line">btn3.onclick = makeFun(<span class="number">16</span>);</span><br></pre></td></tr></table></figure><p>案例5：定时器输出循环变量i</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;end&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li><p>setTimeout的执行原理</p><p>所有的js代码都在执行栈上执行，定时器和注册事件的函数会放到一个任务队列上。</p><p>当执行栈上的代码执行完毕后，才会执行任务队列上的任务。</p></li></ul><h4 id="闭包的思考题"><a href="#闭包的思考题" class="headerlink" title="闭包的思考题"></a>闭包的思考题</h4><p>思考题 1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;The Window&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  name: <span class="string">&quot;My Object&quot;</span>,</span><br><span class="line">  getNameFunc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</span><br></pre></td></tr></table></figure><p>思考题 2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;The Window&quot;</span>;　　</span><br><span class="line"><span class="keyword">var</span> object = &#123;　　　　</span><br><span class="line">  name: <span class="string">&quot;My Object&quot;</span>,</span><br><span class="line">  getNameFunc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> that.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><ul><li>什么是递归<ul><li>函数自己调用自己</li><li>递归需要有结束的条件</li></ul></li></ul><h4 id="递归执行模型"><a href="#递归执行模型" class="headerlink" title="递归执行模型"></a>递归执行模型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">111</span>)</span><br><span class="line">  fn2()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;fn1&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">222</span>)</span><br><span class="line">  fn3()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;fn2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">333</span>)</span><br><span class="line">  fn4()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;fn3&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn4</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">444</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;fn4&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1()</span><br></pre></td></tr></table></figure><h4 id="举个栗子：计算阶乘的递归函数"><a href="#举个栗子：计算阶乘的递归函数" class="headerlink" title="举个栗子：计算阶乘的递归函数"></a>举个栗子：计算阶乘的递归函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * factorial(num - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归应用场景"><a href="#递归应用场景" class="headerlink" title="递归应用场景"></a>递归应用场景</h4><ul><li><p>深拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">o1, o2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> o1) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o1[key] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果key是数组类型 Array？   []</span></span><br><span class="line">      o2[key] = [];</span><br><span class="line">      deepCopy(o1[key], o2[key]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o1[key] <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果key是复杂类型 Object？  &#123;&#125;</span></span><br><span class="line">      o2[key] = &#123;&#125;;</span><br><span class="line">      deepCopy(o1[key], o2[key]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果key这个属性 是基本类型</span></span><br><span class="line">      o2[key] = o1[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>遍历 DOM 树</li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dom/bom操作</title>
      <link href="/bubble/2020/07/18/dom%20bom/"/>
      <url>/bubble/2020/07/18/dom%20bom/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\bubble\css\APlayer.min.css"><script src="\bubble\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\bubble\js\Meting.min.js"></script><h2 id="原生dom操作"><a href="#原生dom操作" class="headerlink" title="原生dom操作"></a>原生dom操作</h2><h3 id="JavaScript组成部分"><a href="#JavaScript组成部分" class="headerlink" title="JavaScript组成部分"></a>JavaScript组成部分</h3><ul><li>ECMAScript 核心语法</li><li>BOM 浏览器对象模型</li><li>DOM 文档对象模型<a id="more"></a></li></ul><p><strong>注意：</strong></p><blockquote><p>① ECMAScript是独立于浏览器平台的。还可以运行在NodeJS平台</p><p>② DOM其实是属于BOM的一部分。DOM在BOM占的比重大，而且是重点。</p><p>③ DOM和BOM是浏览器提供的，只有在浏览器上才可以操作DOM和BOM。</p></blockquote><h3 id="webAPI介绍"><a href="#webAPI介绍" class="headerlink" title="webAPI介绍"></a>webAPI介绍</h3><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://lixiaohui100200.github.io/book/list/Dom/media/box.jpg" alt="img"></p><ul><li>API：（Application Programming Interface,应用程序编程接口）， <strong>工具</strong>。</li><li>web API：操作浏览器 和 网页的一套*<em>==工具库== *</em> （ **BOM 和 DOM** ）。</li></ul><h3 id="文档树"><a href="#文档树" class="headerlink" title="文档树"></a>文档树</h3><p>DOM，文档对象模型，又称为<strong>文档树模型</strong>。</p><p>浏览器在加载页面时， <strong>会把html文档解析成一系列的对象</strong>。再由这些对象组成 <strong>树状结构</strong>。存入内存。</p><p>这些对象对外都提供了 <strong>属性和方法</strong>。我们可以 <strong>通过调用对象的属性和方法来操作网页</strong>。</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://lixiaohui100200.github.io/book/list/Dom/assets/img/02.jpg" alt="img"></p><p><strong>注意</strong>： 树状结构上的每一个都是对象，也可叫做==节点对象==。</p><p><strong>节点对象的分类：</strong> ==文档对象==、==元素对象==、属性对象、文本对象</p><p><strong>小结：</strong></p><blockquote><p>文档树：本质就是浏览器把<strong>文档</strong>、<strong>文档中标签</strong>、标签属性以及标签文本转换成对象，按照嵌套关系以<strong>树状结构</strong> 存放这一组对象，并放入内存中。</p></blockquote><h3 id="获取元素的方式"><a href="#获取元素的方式" class="headerlink" title="获取元素的方式"></a>获取元素的方式</h3><ul><li><p>获取方式</p><ul><li><p>1 document.getElementById(‘标签的id值’);</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据标签的id值，获取【单个节点对象】。 返回单个节点对象</span></span><br><span class="line"><span class="keyword">var</span> mainNode = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;main&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(mainNode);  <span class="comment">// 找到返回一个节点对象，找不到返回null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：标签的id值，一般都是唯一的。若有重复的id值，则仅仅获取第一个。</span></span><br><span class="line"><span class="comment">// id值的命名规范：由数字、字母、_、$组合，不可以数字开头。</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>2 document.getElementsByTagName(‘标签名’); 【推荐使用】**</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据标签名获取【一组节点对象】。返回一个伪数组</span></span><br><span class="line"><span class="keyword">var</span> liNodes = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(liNodes);  <span class="comment">// 找到返回一个伪数组，伪数组中存放了多个节点对象。找不到返回空的伪数组</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>3 document.querySelector(‘选择器’); 【不考虑IE低版本，移动端，推荐使用】**</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据选择器获取【单个节点对象】。返回一个节点对象</span></span><br><span class="line"><span class="keyword">var</span> zzNodes = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul li.active&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(zzNodes);  <span class="comment">//找到返回一个节点对象，找不到返回null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：该方式有兼容性问题。在IE低版本（IE8以下有兼容性问题）</span></span><br></pre></td></tr></table></figure></li><li><p>4 document.querySelectorAll(‘选择器’); 【不考虑IE低版本，移动端，推荐使用】**</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据标签的name值获取【一组节点对象】。返回一个伪数组</span></span><br><span class="line"><span class="keyword">var</span> zzNodes = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;ul li.active&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zzNodes);  <span class="comment">//找到返回一个伪数组，伪数组中存放了多个节点对象。找不到返回空伪数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：该方式有兼容性问题。在IE低版本（IE8以下有兼容性问题）</span></span><br></pre></td></tr></table></figure></li><li><p>5 document.getElementsByClassName(‘标签的类名’);【了解】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据标签的类名获取一组节点对象。返回一个伪数组</span></span><br><span class="line"><span class="keyword">var</span> boxNodes = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(liNodes);  <span class="comment">// 找到返回一个伪数组，伪数组中存放了多个节点对象。找不到返回空伪数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：该方式有兼容性问题。在IE低版本（IE8及以下有兼容性问题）会报错</span></span><br></pre></td></tr></table></figure></li><li><p>6 document.getElementsByName(‘标签的name值’);【了解】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据标签的name值获取一组节点对象。返回一个伪数组</span></span><br><span class="line"><span class="keyword">var</span> zzNodes = <span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;zz&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(zzNodes);  <span class="comment">// 找到返回一个伪数组，伪数组中存放了多个节点对象。找不到返回空伪数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：该方式有兼容性问题。在IE低版本（IE10以下有兼容性问题）</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="什么是事件"><a href="#什么是事件" class="headerlink" title="什么是事件"></a>什么是事件</h3><p> 我们和网页之间的交互，可以理解为何网页之间的一些行为。常见行为有鼠标点击、鼠标的移动、鼠标的移入和移出、键盘控制等等。这些行为，在我们DOM中被称之为事件。</p><p> 总而言之， <strong>事件就是被JavaScipt侦测到的行为。</strong> 事件的目的：就是 <strong>实现网页交互</strong>。</p><h4 id="事件三要素"><a href="#事件三要素" class="headerlink" title="事件三要素"></a>事件三要素</h4><ul><li>事件源（事件目标）：触发事件的元素</li><li>事件类型：哪种交互方式（鼠标点击、鼠标移入、鼠标离开等）</li><li>事件处理程序：事件触发后的结果，也就是事件发生后要执行的程序， 用<strong>函数</strong>表示</li></ul><h4 id="给元素注册事件"><a href="#给元素注册事件" class="headerlink" title="给元素注册事件"></a>给元素注册事件</h4><ul><li><p>语法</p><p><strong>事件源.事件类型 = 事件处理程序;</strong></p></li><li><p>代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">vlaue</span>=<span class="string">&quot;按钮&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 需求：点击按钮，弹出&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// ① 获取事件目标</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// ② 给事件目标绑定点击事件</span></span></span><br><span class="line"><span class="javascript">    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      alert(<span class="string">&#x27;hello&#x27;</span>);</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>事件处理程序的本质：就是元素对象的一个方法。当事件触发时，方法会被调用。</li></ul><h4 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h4><p>==onclick== 点击事件</p><p>其他事件可以参考手册 <img src= "/bubble/img/loading.gif" data-lazy-src="https://lixiaohui100200.github.io/book/list/Dom/assets/img/event.png" alt="img"></p><h3 id="操作元素对象的基本属性"><a href="#操作元素对象的基本属性" class="headerlink" title="操作元素对象的基本属性"></a>操作元素对象的基本属性</h3><h4 id="元素对象属性分类"><a href="#元素对象属性分类" class="headerlink" title="元素对象属性分类"></a>元素对象属性分类</h4><ul><li>非表单属性<ul><li>id</li><li>title</li><li>href</li><li>src</li><li>==className==</li><li>==innerHTML==</li><li>==innerText==</li></ul></li><li>表单属性（明天讲）</li></ul><h4 id="操作元素对象属性的语法"><a href="#操作元素对象属性的语法" class="headerlink" title="操作元素对象属性的语法"></a>操作元素对象属性的语法</h4><ul><li><p>获取： <strong>==元素.属性名==</strong> ;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(div.title);  <span class="comment">// 获取属性对应的值 </span></span><br></pre></td></tr></table></figure></li><li><p>设置：**==元素.属性名 = 值==;**</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>); <span class="comment">// 获取元素</span></span><br><span class="line"><span class="built_in">console</span>.log(div.title);  <span class="comment">// 设置之前，获取属性对应的值 </span></span><br><span class="line">div.title = <span class="string">&#x27;hello&#x27;</span>;     <span class="comment">// 设置（更改）这个div的title属性的值</span></span><br><span class="line"><span class="built_in">console</span>.log(div.title);  <span class="comment">// 设置之后，获取属性对应的值 </span></span><br></pre></td></tr></table></figure></li></ul><h4 id="操作非表单元素对象属性"><a href="#操作非表单元素对象属性" class="headerlink" title="操作非表单元素对象属性"></a>操作非表单元素对象属性</h4><ul><li><p><strong>元素对象.calssName</strong></p><ul><li><p>作用：操作元素的类名。可以通过类名管理或切换元素的样式。</p></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>); </span><br><span class="line"><span class="comment">// 获取元素的类名</span></span><br><span class="line"><span class="built_in">console</span>.log(div.className);  </span><br><span class="line"><span class="comment">// 设置元素的类名</span></span><br><span class="line">div.className = <span class="string">&#x27;dv1 dv2&#x27;</span>;   <span class="comment">// 注意：类名可以有多个，多个类名之间用空格分隔</span></span><br><span class="line"><span class="comment">// 获取元素的类名</span></span><br><span class="line"><span class="built_in">console</span>.log(div.className);  </span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>元素对象.innerHTML</strong></p><ul><li><p>作用：操作元素的内容</p></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>); </span><br><span class="line"><span class="comment">// 获取元素内部的内容，若元素内部有其他标签，获取则包含内部的标签和文本</span></span><br><span class="line"><span class="built_in">console</span>.log(div.innerHTML); </span><br><span class="line"><span class="comment">// 设置元素内部的内容，若设置的元素内部有其他标签，则元素内部标签会被浏览器解析</span></span><br><span class="line">div.innerHTML = <span class="string">&#x27;&lt;h1&gt;标题&lt;/h1&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">// 获取元素内部的内容</span></span><br><span class="line"><span class="built_in">console</span>.log(div.innerHTML); </span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>元素对象.innerText</strong></p><ul><li><p>作用：操作元素的内容</p></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>); </span><br><span class="line"><span class="comment">// 获取元素内部的内容，若元素内部有其他标签，获取的仅仅是文本，不包含内部标签</span></span><br><span class="line"><span class="built_in">console</span>.log(div.innerText); </span><br><span class="line"><span class="comment">// 设置元素内部的内容，若设置的元素内部有其他标签，则元素内部标签不会被解析，标签会被转义</span></span><br><span class="line">div.innerText = <span class="string">&#x27;&lt;h1&gt;标题&lt;/h1&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">// 获取元素内部的内容</span></span><br><span class="line"><span class="built_in">console</span>.log(div.innerText);  <span class="comment">// 获取元素的类名</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="innerText-和-textContent的区别"><a href="#innerText-和-textContent的区别" class="headerlink" title="innerText 和 textContent的区别"></a>innerText 和 textContent的区别</h3><p>innerText 是非标准的属性，textContent是标准的属性</p><ul><li>相同点：都是操作元素的文本</li><li>不同点：<ul><li>innerText 对IE的兼容性较好</li><li>textContent虽然作为标准方法但是只支持IE8+以上的浏览器</li><li>最新的浏览器，两个都可以使用</li></ul></li></ul><h3 id="事件处理程序中的this"><a href="#事件处理程序中的this" class="headerlink" title="事件处理程序中的this"></a>事件处理程序中的this</h3><ul><li>事件处理程序中的this代表的是事件源（将来触发哪个元素，就代表那个元素）</li></ul><h3 id="操作表单元素对象的属性【重点】"><a href="#操作表单元素对象的属性【重点】" class="headerlink" title="操作表单元素对象的属性【重点】"></a>操作表单元素对象的属性【重点】</h3><ul><li><p><strong>元素对象.value</strong></p><ul><li><p>作用：操作表单元素的值【所有表单元素都可以用】</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取文本框元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> userName = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;userName&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取文本框的内容</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(userName.value);  <span class="comment">// &#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 【设置文本框的内容】</span></span></span><br><span class="line"><span class="javascript">    userName.value = <span class="string">&#x27;admin&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 【获取文本框的内容】</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(userName.value);  <span class="comment">// &#x27;admin&#x27;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>元素对象.checked</strong></p><ul><li><p>作用：操作表单元素 <strong>是否</strong>选中【针对 单选框 和 多选框 】</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">喜欢足球：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ck&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取多选框元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ck = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;ck&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取多选框选中状态</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(ck.checked);   <span class="comment">// false 未选中</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 【设置多选框选中状态为 选中】</span></span></span><br><span class="line"><span class="javascript">    ck.checked = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 【获取多选框的选中状态】</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(ck.checked);   <span class="comment">// true  选中</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>        </span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>元素对象.disabled</strong></p><ul><li><p>作用：操作表单元素 <strong>是否</strong>禁用【针对按钮】</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span><span class="attr">value</span>=<span class="string">&#x27;按钮&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取按钮元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取按钮是否可禁用状态</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(btn.disabled);   <span class="comment">// false 没有禁用</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 【设置按钮是否可禁用状态 禁用】</span></span></span><br><span class="line"><span class="javascript">    btn.disabled = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 【获取按钮是否可禁用状态】</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(ck.checked);   <span class="comment">// true  禁用了</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>元素对象.selected</strong></p><ul><li><p>作用：操作下拉框选项<strong>是否</strong>选中【针对下拉框】</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&#x27;userName&#x27;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认选中张三 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;王五&quot;</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span>赵六<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取下拉框 和 一组option项</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> userName = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;userName&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> options = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;option&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取下拉框选中的内容</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(userName.value);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取李四是否被选中 【李四对应的索引时候1】</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(options[<span class="number">1</span>].selected);  <span class="comment">// false 李四没有被选中</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 设置李四被选中</span></span></span><br><span class="line"><span class="javascript">    options[<span class="number">1</span>].selected = <span class="literal">true</span>;  </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取下拉框选中的内容</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(userName.value);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取李四是否被选中 【李四对应的索引时候1】</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(options[<span class="number">1</span>].selected);  <span class="comment">// true 李四被选中</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="操作元素的样式【重点】"><a href="#操作元素的样式【重点】" class="headerlink" title="操作元素的样式【重点】"></a>操作元素的样式【重点】</h3><ul><li><p>通过元素的style属性操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line">box.style.width = <span class="string">&#x27;100px&#x27;</span>;</span><br><span class="line">box.style.height = <span class="string">&#x27;100px&#x27;</span>;</span><br><span class="line">box.style.backgroundColor = <span class="string">&#x27;red&#x27;</span>;   <span class="comment">// css→ background-color     js→ backgroundColor</span></span><br></pre></td></tr></table></figure><p><strong>注意：通过样式属性设置宽高、位置的属性类型是字符串，需要加上px。</strong></p></li></ul><ul><li><p>通过设置元素的className属性操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line">box.className = <span class="string">&#x27;aa bb&#x27;</span>;<span class="comment">//设置</span></span><br><span class="line">box.className.replace(<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;AA&#x27;</span>);<span class="comment">//替换</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>小结：元素的style属性适合操作单个样式，而元素className适合操作一组样式</strong></p><h3 id="操作标签的自定义属性【了解】"><a href="#操作标签的自定义属性【了解】" class="headerlink" title="操作标签的自定义属性【了解】"></a>操作标签的自定义属性【了解】</h3><ul><li><p>什么是自定义属性</p><blockquote><p>针对html标签的属性可以分为两类：</p><ul><li><p><strong>标签自带属性（语言设计者提供的属性）</strong> id、title、src、href、name、type等</p></li><li><p><strong>自定义标签属性</strong> 用户根据需求，自己给标签添加的自己定义的标签属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;wc.jpg&#x27;</span> <span class="attr">bigImg</span>=<span class="string">&#x27;bigWc.jpg&#x27;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--bigImg=&#x27;bigWc.jpg&#x27; 就是用户自定义的标签属性--&gt;</span></span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p>操作方式</p><blockquote><ul><li><p>获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">节点对象.getAttribute(<span class="string">&#x27;属性名&#x27;</span>);   <span class="comment">// 会返回标签的属性的值</span></span><br></pre></td></tr></table></figure></li><li><p>设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">节点对象.setAttribute(<span class="string">&#x27;属性名&#x27;</span>,<span class="string">&#x27;值&#x27;</span>);   <span class="comment">// 会修改或添加标签属性</span></span><br></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">节点对象.removeAttribute(<span class="string">&#x27;属性名&#x27;</span>);   <span class="comment">// 会删除标签的属性</span></span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul><p><strong>注意：自定义标签属性的操作只能够通过元素的getAtrribute、setAttribute、removeAttribute提供的方法操作。 不能直接通过元素点的方式直接获取或设置</strong></p><h3 id="根据元素的关系获取元素"><a href="#根据元素的关系获取元素" class="headerlink" title="根据元素的关系获取元素"></a>根据元素的关系获取元素</h3><h4 id="元素之间的关系"><a href="#元素之间的关系" class="headerlink" title="元素之间的关系"></a>元素之间的关系</h4><ul><li>嵌套关系<ul><li>父子关系</li><li>祖孙关系</li></ul></li><li>并列关系<ul><li>兄弟关系</li></ul></li></ul><h4 id="获取父元素【重点】"><a href="#获取父元素【重点】" class="headerlink" title="获取父元素【重点】"></a>获取父元素【重点】</h4><ul><li><p>语法：</p><blockquote><p><strong>元素节点.parentNode</strong></p><p>作用：获取一个节点的父节点</p></blockquote></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;grandFather&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;son&quot;</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取a元素节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;son&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取a元素的父节点</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.dir(a.parentNode);     <span class="comment">// 获取p元素</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取a元素的父节点的父节点</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.dir(a.parentNode.parentNode);  <span class="comment">// 获取div元素</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure></li></ul><h4 id="获取子元素【重点】"><a href="#获取子元素【重点】" class="headerlink" title="获取子元素【重点】"></a>获取子元素【重点】</h4><ul><li><blockquote><p><strong>元素节点.children</strong></p><p>作用：获取一组子元素</p></blockquote></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>    </span><br><span class="line"><span class="javascript">    <span class="comment">// 获取ul元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>); </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取ul下的所有元素节点（仅仅元素节点）</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> items = ul.children;  </span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(items.length);  <span class="comment">// 结果是5</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(items); <span class="comment">// HTMLCollection(5) [li, li, li, li, li]</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="获取兄弟元素【了解】"><a href="#获取兄弟元素【了解】" class="headerlink" title="获取兄弟元素【了解】"></a>获取兄弟元素【了解】</h4><ul><li><p>获取上一个兄弟元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取上一个同级的元素节点，有兼容问题IE9以下不支持</span></span><br><span class="line">元素节点.previousElementSibling;</span><br></pre></td></tr></table></figure></li><li><p>获取下一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取下一个同级的元素节点，有兼容问题IE9以下不支持</span></span><br><span class="line">元素节点.nextElementSibling;</span><br></pre></td></tr></table></figure></li></ul><h3 id="动态操作元素"><a href="#动态操作元素" class="headerlink" title="动态操作元素"></a>动态操作元素</h3><h4 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h4><h5 id="创建方式1"><a href="#创建方式1" class="headerlink" title="创建方式1"></a>创建方式1</h5><ul><li><p>语法： <strong>元素.innerHTML = ‘内容’;</strong></p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>创建元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取按钮元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取ul元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取所有li元素，并给每一个li元素添加点击事件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lis = ul.children;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        lis[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="built_in">this</span>.innerText); </span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// 给按钮注册点击事件</span></span></span><br><span class="line"><span class="javascript">    btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 给ul中添加也新的li元素</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        ul.innerHTML = ul.innerHTML  + &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是新的li<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;;</span></span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>缺点：会覆盖部分网页元素以及事件。</p></li><li><p>优点：对于创建嵌套多的元素方便。</p></li></ul><h5 id="创建方式2"><a href="#创建方式2" class="headerlink" title="创建方式2"></a>创建方式2</h5><ul><li><p>语法： <strong>document.createElement(‘标签名’);</strong></p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>创建元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取按钮元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取ul元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取所有li元素，并给每一个li元素添加点击事件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lis = ul.children;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        lis[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="built_in">this</span>.innerText); </span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// 给按钮注册点击事件</span></span></span><br><span class="line"><span class="javascript">    btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 创建一个新的li元素节点</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 把新的li追加到ul最后面</span></span></span><br><span class="line">        ul.appendChild(li)</span><br><span class="line"><span class="javascript">        <span class="comment">// 创建一个a元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 给a设置属性 和 内容</span></span></span><br><span class="line"><span class="javascript">        a.href = <span class="string">&#x27;#&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        a.innerText = <span class="string">&#x27;我是新来的&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 把a存入到li中</span></span></span><br><span class="line">        li.appendChild(a);</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>优点：不会覆盖原有的元素的事件。</p></li><li><p>缺点：对于添加嵌套多的内容操作麻烦。</p></li></ul><h5 id="创建元素性能问题-【了解】"><a href="#创建元素性能问题-【了解】" class="headerlink" title="创建元素性能问题 【了解】"></a>创建元素性能问题 【了解】</h5><ul><li><p>innerHTML 会产生字符串解析，由于字符串的不可变性，尽量避免大量的拼接，否则消耗内存，影响性能。</p></li><li><p>document.createElement(‘标签’)创建的性能要比innerHTML要高，但是若涉及到多层嵌套内容时，代码操作麻烦。</p></li><li><p>所以，一般情况下,两者配合使用较多</p><ul><li>document.createElement用来创建元素</li><li>innerHTML可以设置元素中的内容（元素内部的标签或文本）</li></ul><p><strong>备注：性能测试</strong></p></li></ul><p><strong>小结：在开发的中，innerHTML 和 document.createElement配合使用较多</strong></p><h4 id="追加元素"><a href="#追加元素" class="headerlink" title="追加元素"></a>追加元素</h4><ul><li><p>语法： <strong>父节点.appendChild(新的子节点);</strong></p></li><li><p>作用：向父节点最后追加新的节点</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我第1个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我第2个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我第3个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取ul元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取按钮元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 给按钮元素注册事件</span></span></span><br><span class="line"><span class="javascript">    btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 创建一个新的li元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 设定新的li的元素的内容</span></span></span><br><span class="line"><span class="javascript">        li.innerHTML = <span class="string">&#x27;我是新来的&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 把新创建的li元素追加到ul中</span></span></span><br><span class="line">        ul.appendChild(li);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><ul><li><p>语法： <strong>父节点.removeChild(子节点)</strong></p></li><li><p>作用：删除父元素中的指定的子节点</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我第1个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我第2个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我第3个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>删除第二个li<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取ul元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取按钮元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 给按钮元素注册事件</span></span></span><br><span class="line"><span class="javascript">    btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> li2 = ul.children[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 删除第二li</span></span></span><br><span class="line">        ul.removeChild(li2);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="动态操作元素-1"><a href="#动态操作元素-1" class="headerlink" title="动态操作元素"></a>动态操作元素</h3><h4 id="插入元素-【了解】"><a href="#插入元素-【了解】" class="headerlink" title="插入元素 【了解】"></a>插入元素 【了解】</h4><ul><li><p>语法： <strong>父节点.insertBefore(新的节点,旧的子节点)</strong></p></li><li><p>作用：将一个新的节点插入到父节点中的某个子节点的前面</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我第1个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我第2个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我第3个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取ul元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取按钮元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 给按钮元素注册事件</span></span></span><br><span class="line"><span class="javascript">    btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 创建一个新的li元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 设定新的li的元素的内容</span></span></span><br><span class="line"><span class="javascript">        li.innerHTML = <span class="string">&#x27;我是新来的&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取第二li元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> old = ul.children[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 把新创建的li元素追加到ul中第二li的前面</span></span></span><br><span class="line">        ul.insertBefore(li,old);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="替换元素【了解】"><a href="#替换元素【了解】" class="headerlink" title="替换元素【了解】"></a>替换元素【了解】</h4><ul><li><p>语法 <strong>父节点.replaceChild(新的子节点,旧的子节点)</strong></p></li><li><p>作用：替换子节点</p></li><li><p>代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我第1个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我第2个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我第3个li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>替换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取ul元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取按钮元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 给按钮元素注册事件</span></span></span><br><span class="line"><span class="javascript">    btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 创建一个新的li元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 设定新的li的元素的内容</span></span></span><br><span class="line"><span class="javascript">        li.innerHTML = <span class="string">&#x27;我是新来的&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取第二li元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> old = ul.children[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 把新创建的li元素 和 ul中第二li的前面替换</span></span></span><br><span class="line">        ul.replaceChild(li, old);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="根据节点的关系获取节点"><a href="#根据节点的关系获取节点" class="headerlink" title="根据节点的关系获取节点"></a>根据节点的关系获取节点</h3><h4 id="获取子节点【了解】"><a href="#获取子节点【了解】" class="headerlink" title="获取子节点【了解】"></a>获取子节点【了解】</h4><ul><li><p>childNodes</p><ul><li><p>语法：</p><blockquote><p><strong>父节点.childNodes</strong></p><p>作用：获取一组子节点（包括文本节点和元素节点）</p></blockquote></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>    </span><br><span class="line"><span class="javascript">      <span class="comment">// 获取ul元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>); </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取ul下的所有子节点（包括文本 和 元素节点）</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> items = ul.childNodes; </span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(items.length);  <span class="comment">// 结果是11</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(items);  <span class="comment">// NodeList(11) [text, li, text, li, text, li, text, li, text, li, text]</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="获取第一个和最后一个子节点【了解】"><a href="#获取第一个和最后一个子节点【了解】" class="headerlink" title="获取第一个和最后一个子节点【了解】"></a>获取第一个和最后一个子节点【了解】</h4><ul><li><p>获取第一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取第一个子节点对象，包含空白文本节点对象</span></span><br><span class="line">父节点.firstChild;</span><br><span class="line"><span class="comment">// 获取第一个元素子节点对象，有兼容问题IE9以下不支持</span></span><br><span class="line">父节点.firstElementChild</span><br></pre></td></tr></table></figure></li><li><p>获取最后一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取最后一个子节点对象，包含空白文本节点对象</span></span><br><span class="line">父节点.lastChild;</span><br><span class="line"><span class="comment">// 获取最后一个元素子节点对象，有兼容问题IE9以下不支持</span></span><br><span class="line">父节点.lastElementChild</span><br></pre></td></tr></table></figure></li></ul><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><p> 事件监听可以给元素绑定多个事件处理程序。在实际开发中， <strong>便于对事件程序的功能扩展</strong>。</p><h4 id="什么是事件监听？"><a href="#什么是事件监听？" class="headerlink" title="什么是事件监听？"></a>什么是事件监听？</h4><p> <strong>事件注册 或 移除</strong>的第二种方式</p><h4 id="事件监听给元素注册事件【重要】"><a href="#事件监听给元素注册事件【重要】" class="headerlink" title="事件监听给元素注册事件【重要】"></a>事件监听给元素注册事件【重要】</h4><ul><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    功能：给元素注册事件</span></span><br><span class="line"><span class="comment">    参数：</span></span><br><span class="line"><span class="comment">        事件类型  字符串      注意：事件名不加on 如 &#x27;click&#x27;</span></span><br><span class="line"><span class="comment">        事件处理程序    函数</span></span><br><span class="line"><span class="comment">        是否捕获：可选，默认为false ， true表示启用捕获  false表示启用冒泡</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">事件目标.addEventListener(事件类型,事件处理程序,是否捕获);</span><br></pre></td></tr></table></figure></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击改变<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取按钮元素节点 和 div元素节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 给按钮注册事件</span></span></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        box.style.width = <span class="string">&#x27;500px&#x27;</span>;</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        box.style.height = <span class="string">&#x27;500px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        box.style.backgroundColor = <span class="string">&#x27;blue&#x27;</span>;</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="事件监听移除元素事件程序【重要】"><a href="#事件监听移除元素事件程序【重要】" class="headerlink" title="事件监听移除元素事件程序【重要】"></a>事件监听移除元素事件程序【重要】</h4><ul><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    功能：移除元素的指定事件程序</span></span><br><span class="line"><span class="comment">    参数：</span></span><br><span class="line"><span class="comment">        事件类型  字符串  注意：事件名不加on 如：&#x27;click&#x27;</span></span><br><span class="line"><span class="comment">        事件处理程序：函数 注意：这里要把函数名传入过来</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">事件目标.removeEventListener(事件类型,事件处理程序名称);</span><br></pre></td></tr></table></figure></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击改变<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取按钮元素节点 和 div元素节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义第一个功能</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        box.style.width = <span class="string">&#x27;500px&#x27;</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// 给按钮注册事件</span></span></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>,fn1);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义第二个功能</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        box.style.height = <span class="string">&#x27;500px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        box.style.backgroundColor = <span class="string">&#x27;blue&#x27;</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// 给按钮注册事件</span></span></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>,fn2);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 移除按钮元素的第二个功能</span></span></span><br><span class="line"><span class="javascript">    btn.removeEventListener(<span class="string">&#x27;click&#x27;</span>, fn2);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><h4 id="什么是事件流？"><a href="#什么是事件流？" class="headerlink" title="[什么是事件流？"></a>[什么是事件流？</h4><p> 事件流，指的是 <strong>事件的==传播== 过程。 \</strong>传播过程要经历三个阶段（ **事件捕获<strong>、</strong>目标元素** 、 <strong>事件冒泡</strong>）</p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://lixiaohui100200.github.io/book/list/Dom/assets/img/01.jpg" alt="img"></p><h4 id="事件捕获【了解】"><a href="#事件捕获【了解】" class="headerlink" title="事件捕获【了解】"></a>事件捕获【了解】</h4><ul><li>图解 <strong>注意：</strong> 虽然没有启用处理捕获阶段，但是捕获阶段依然存在。 <img src= "/bubble/img/loading.gif" data-lazy-src="https://lixiaohui100200.github.io/book/list/Dom/assets/img/03.jpg" alt="img"></li></ul><h3 id="事件对象【重要】"><a href="#事件对象【重要】" class="headerlink" title="事件对象【重要】"></a>事件对象【重要】</h3><h4 id="为什么要学习事件对象？"><a href="#为什么要学习事件对象？" class="headerlink" title="为什么要学习事件对象？"></a>为什么要学习事件对象？</h4><p> 在实际应用开发中，我们经常会<strong>通过事件对象 获取当前事件相关的信息</strong>（比如：键盘按下时到底按下了哪个键？鼠标点击或移动时当前鼠标的位置？等等）</p><h4 id="什么是事件对象？"><a href="#什么是事件对象？" class="headerlink" title="什么是事件对象？"></a>什么是事件对象？</h4><p> 事件对象，是一个小的<strong>工具库</strong>，工具库中存放了和当前事件相关的各种信息和功能。</p><h4 id="如何获取事件对象？"><a href="#如何获取事件对象？" class="headerlink" title="如何获取事件对象？"></a>如何获取事件对象？</h4><ul><li><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">事件目标.事件类型 = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 事件处理程序（函数），函数的第一个形参就是我们将来要使用的 【事件对象】</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://lixiaohui100200.github.io/book/list/Dom/assets/img/04.jpg" alt="img"></p></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 形参e就是当前点击事件的 事件对象</span></span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="事件对象的公共属性和方法"><a href="#事件对象的公共属性和方法" class="headerlink" title="事件对象的公共属性和方法"></a>事件对象的公共属性和方法</h4><p> 公共：不论是什么类型的事件（比如键盘、鼠标、手指触摸等等），他们的事件对象都有的属性 和 方法。</p><ul><li><p>公共属性</p><ul><li><p><strong>事件对象.type</strong></p><ul><li><p>作用：获取当前的事件名。</p></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 查看当前的事件类型</span></span><br><span class="line">    <span class="built_in">console</span>.log(_e.type);  <span class="comment">// click</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>事件对象.target</strong></p><ul><li><p>作用：获取事件目标里最先触发事件的元素</p></li><li><p>备注：在实际处理程序中事件对象的target和this的区别</p><ul><li>this指的是事件源</li><li>target指的是最先触发的元素，不一定是事件源</li></ul></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">            div &#123;</span><br><span class="line">                width: 300px;</span><br><span class="line">                height: 300px;</span><br><span class="line">                background-color: green;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(e.target);</span></span><br><span class="line">            &#125;;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p>公共方法</p><ul><li><p><strong>事件对象.preventDefault();</strong></p><ul><li><p>作用：阻止事件默认行为的执行。</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//www.baidu.com&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> link = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;link&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    link.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;执行了&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 阻止默认行为</span></span></span><br><span class="line"><span class="javascript">        e.preventDefault(); <span class="comment">// 可以用return false 代替</span></span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>事件对象.stopPropagation();</strong></p><ul><li>作用：停止冒泡</li></ul></li></ul></li></ul><h4 id="鼠标事件对象的属性"><a href="#鼠标事件对象的属性" class="headerlink" title="鼠标事件对象的属性"></a>鼠标事件对象的属性</h4><ul><li><p><strong>事件对象.clientX / 事件对象.clientY</strong></p><blockquote><ul><li><p>作用：鼠标在<strong>浏览器可视区域</strong>中的坐标</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">      height: 2000px;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取鼠标在浏览器可视区域中的坐标</span></span></span><br><span class="line"><span class="javascript">      alert(<span class="string">&#x27;x:&#x27;</span> + e.clientX + <span class="string">&#x27;,y:&#x27;</span> + e.clientY);</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p><strong>事件对象.offsetX / 事件对象.offsetY</strong></p><blockquote><ul><li><p>作用：获取鼠标在<strong>指定的元素的区域</strong>中的坐标</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 300px;</span><br><span class="line">      background-color: red;</span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:100px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line">      cursor: default;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我第div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> divNode = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    divNode.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取鼠标在div中的坐标</span></span></span><br><span class="line"><span class="javascript">      alert(<span class="string">&#x27;X:&#x27;</span> + e.offsetX + <span class="string">&#x27;,Y:&#x27;</span> + e.offsetY);</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p><strong>事件对象.pageX / 事件对象.pageY</strong></p><blockquote><ul><li><p>作用：获取鼠标<strong>在整个文档区域</strong>中的坐标</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">      height: 2000px;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取鼠标在整个文档区域中的坐标</span></span></span><br><span class="line"><span class="javascript">      alert(<span class="string">&#x27;x:&#x27;</span> + e.pageX + <span class="string">&#x27;,y:&#x27;</span> + e.pageY);</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul><p><strong>图解：client/offset/page的x/y的区别</strong></p><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://lixiaohui100200.github.io/book/list/Dom/assets/img/05.jpg" alt="img"></p><h4 id="键盘事件对象的属性"><a href="#键盘事件对象的属性" class="headerlink" title="键盘事件对象的属性"></a>键盘事件对象的属性</h4><ul><li><p><strong>事件对象.altKey</strong></p><blockquote><ul><li><p>作用：检测是否按下键盘上的 <strong>Alt键</strong>。 按下返回 true</p></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  alert(e.altKey);  <span class="comment">// 按下alt键，返回true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p><strong>事件对象.ctrlKey</strong></p><blockquote><ul><li><p>作用：检测是否按下键盘上的 <strong>Ctrl键</strong>。 按下返回 true</p></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">   alert(e.ctrlKey);  <span class="comment">// 按下Ctrl键，返回true</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p><strong>事件对象.shiftKey</strong></p><blockquote><ul><li><p>作用：检测是否按下键盘上的 <strong>Shift键</strong>。 按下返回 true</p></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  alert(e.shiftKey);  <span class="comment">// 按下shift键，返回true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li><li><p><strong>事件对象.keyCode</strong></p><blockquote><ul><li><p>作用：返回被敲击的键生成的 <strong>Unicode 字符码</strong>(ascii码)</p></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  alert(e.keyCode); <span class="comment">// 返回ascii码表对应的十进制的数字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul><h3 id="扩展：兼容问题"><a href="#扩展：兼容问题" class="headerlink" title="扩展：兼容问题"></a>扩展：兼容问题</h3><h4 id="兼容问题1：获取事件对象"><a href="#兼容问题1：获取事件对象" class="headerlink" title="兼容问题1：获取事件对象"></a>兼容问题1：获取事件对象</h4><ul><li><p>标准方式： 事件处理程序函数的第一个参数 e</p></li><li><p>IE低版本方式：window.event</p></li><li><p>兼容处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 事件对象的兼容处理</span></span><br><span class="line">    <span class="keyword">var</span> _event = e || <span class="built_in">window</span>.event;     </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="兼容问题2：事件监听的注册和移除"><a href="#兼容问题2：事件监听的注册和移除" class="headerlink" title="兼容问题2：事件监听的注册和移除"></a>兼容问题2：事件监听的注册和移除</h4><ul><li><p>注册事件：</p><ul><li><p>标准：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">事件目标.addEventListener(事件类型,事件处理程序,是否捕获);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    事件目标：要绑定的那个节点对象。</span></span><br><span class="line"><span class="comment">    事件类型：交互行为，在这里不加on</span></span><br><span class="line"><span class="comment">    事件处理程序：函数</span></span><br><span class="line"><span class="comment">    是否捕获:可选，布尔值，true是捕获，false是冒泡，默认为false;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>IE低版本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    事件目标.attachEvent(事件类型,事件处理程序);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    事件目标：要绑定的那个节点对象。</span></span><br><span class="line"><span class="comment">    事件类型：交互行为，在这里要加on</span></span><br><span class="line"><span class="comment">    事件处理程序：函数</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>兼容处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  功能：绑定事件</span></span><br><span class="line"><span class="comment">  参数：</span></span><br><span class="line"><span class="comment">    node 事件目标 节点对象</span></span><br><span class="line"><span class="comment">    type 事件类型 string 不加on</span></span><br><span class="line"><span class="comment">    handler 事件处理程序 函数</span></span><br><span class="line"><span class="comment">  返回值：无</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">node, type, handler</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (node.addEventListener) &#123; <span class="comment">// 检测浏览器是否支持标准方式</span></span><br><span class="line">    <span class="comment">// 支持</span></span><br><span class="line">    node.addEventListener(type, handler);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 不支持</span></span><br><span class="line">    node.attachEvent(<span class="string">&#x27;on&#x27;</span> + type, handler);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>移除事件：</p><ul><li><p>标准：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">事件目标.removeEventListener(事件类型,事件处理程序的名称);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    事件目标: 要解绑事件的那个节点对象</span></span><br><span class="line"><span class="comment">    事件类型：解绑什么类型的实际，不加on</span></span><br><span class="line"><span class="comment">    事件处理程序的名称：函数的名称；</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>IE低版本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">事件目标.detachEvent(事件类型,事件处理程序的名称);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    事件目标：要绑定的那个节点对象。</span></span><br><span class="line"><span class="comment">    事件类型：交互行为，在这里要加on</span></span><br><span class="line"><span class="comment">    事件处理程序的名称：函数名称</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>兼容处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  功能：解绑事件</span></span><br><span class="line"><span class="comment">  参数：</span></span><br><span class="line"><span class="comment">    node 事件目标  节点对象</span></span><br><span class="line"><span class="comment">    type 事件类型  string</span></span><br><span class="line"><span class="comment">    handlerName 事件处理程序名称 函数</span></span><br><span class="line"><span class="comment">  返回值：无</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeEvent</span>(<span class="params">node, type, handlerName</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (node.removeEventListener) &#123;<span class="comment">// 检测浏览器是否支持标准方式</span></span><br><span class="line">    <span class="comment">//支持</span></span><br><span class="line">    node.removeEventListener(type, handlerName);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 不支持</span></span><br><span class="line">    node.detachEvent(<span class="string">&#x27;on&#x27;</span> + type, handlerName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="鼠标相关的事件"><a href="#鼠标相关的事件" class="headerlink" title="鼠标相关的事件"></a>鼠标相关的事件</h3><ul><li>事件名称：onmousemove<ul><li>作用：鼠标在元素上移动时，会不断的检测</li></ul></li><li>事件名称：onmosuedown<ul><li>作用：鼠标按键按下时</li></ul></li><li>事件名称：onmosueup<ul><li>作用：鼠标按键松开时</li></ul></li></ul><h2 id="核心知识点"><a href="#核心知识点" class="headerlink" title="核心知识点"></a>核心知识点</h2><ul><li>事件委托（原理、实现方式、作用）</li><li>定时器（setInterval）</li><li>DOM元素的offset系列属性</li></ul><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><h3 id="什么是事件委托"><a href="#什么是事件委托" class="headerlink" title="什么是事件委托"></a>什么是事件委托</h3><p> 事件委托，也叫==事件代理== 。指的是子孙元素的事件绑定，完全交给其上级父元素或祖先元素绑定。</p><h3 id="为什么学习事件委托"><a href="#为什么学习事件委托" class="headerlink" title="为什么学习事件委托"></a>为什么学习事件委托</h3><p> 在web前端开发中，并不是程序注册事件越多越好， <strong>事件注册越多，就越消耗程序的性能</strong>。所以，在事件注册较多的情况下， <strong>为了提高程序的性能，应当适当减少事件的绑定</strong>。</p><p> 传统的事件处理中，需要为每个元素注册事件。事件委托则是一种简单有效的技巧，通过它可以把<strong>事件注册到一个父级或父级以上的元素上</strong>，从而<strong>避免把事件注册到多个子级元素上</strong>。</p><h3 id="事件委托的原理-【重点】"><a href="#事件委托的原理-【重点】" class="headerlink" title="事件委托的原理 【重点】"></a>事件委托的原理 【重点】</h3><p> 事件委托的原理用到的就是 <strong>目标元素</strong> 和 <strong>事件冒泡</strong>，<strong>把事件注册到父元素或父级以上的元素上</strong>，等待 <strong>子元素事件冒泡</strong>，并且在父元素或父级以上的元素注册的事件中能够 <strong>通过事件对象.target判断是哪个子元素</strong>，从而做相应处理。 ==① 给目标元素的父元素或父级以上的元素注册事件==</p><p> ==② 在父元素或父级以上元素注册的事件中通过 <strong>事件对象.target</strong>判断是哪个子元素==</p><p> ==③ 根据判断做出处理。==</p><h3 id="事件委托的作用【重点】"><a href="#事件委托的作用【重点】" class="headerlink" title="事件委托的作用【重点】"></a>事件委托的作用【重点】</h3><ul><li>可以代理新动态添加的元素的事件。</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    p &#123;</span><br><span class="line">      background-color: blue;;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落6<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落7<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取div元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> divNode = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    divNode.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取最先触发的元素节点</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> node = e.target;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 节点对象.tagName  获取节点对象对应的标签名 返回的是大写</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span>(node.tagName.toLowerCase()==<span class="string">&#x27;p&#x27;</span>)&#123;</span></span><br><span class="line">        alert(node.innerHTML);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="课堂一练"><a href="#课堂一练" class="headerlink" title="课堂一练"></a>课堂一练</h3><ul><li>案例1: 事件委托的方式事件对ul中的li（原有的和新添加的）的点击事件</li><li>案例2： 事件委托的方式实现表格管理中的删除功能</li></ul><h2 id="DOM中的元素的offset系列属性"><a href="#DOM中的元素的offset系列属性" class="headerlink" title="DOM中的元素的offset系列属性"></a>DOM中的元素的offset系列属性</h2><h3 id="获取元素的大小-【重要】"><a href="#获取元素的大小-【重要】" class="headerlink" title="获取元素的大小 【重要】"></a>获取元素的大小 【重要】</h3><ul><li><blockquote><p><strong>元素.offsetWidth</strong> 和 <strong>元素.offsetHeight</strong></p><p>获取元素的宽度 和 高度，返回数字，不含单位。</p><p>元素的宽度：width + padding(左右) + border（左右）;</p><p>元素的高度： height + padding(上下) + border(上下);</p></blockquote></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">      width: 100px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      padding: 10px;</span><br><span class="line">      border: 5px solid red;</span><br><span class="line">      background-color: blue;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> divNode = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// width(100) + padding(左10 右10) + border(左5 右5)</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(divNode.offsetWidth);<span class="comment">// 130</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// height(100) + padding(上10 下10) + border(上5 下5)</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(divNode.offsetHeight);<span class="comment">// 130</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="获取元素的位置【重要】"><a href="#获取元素的位置【重要】" class="headerlink" title="获取元素的位置【重要】"></a>获取元素的位置【重要】</h3><ul><li><p>语法：</p><blockquote><p><strong>元素.offsetLeft</strong> 和 <strong>元素.offsetTop</strong> 作用：获取元素的坐标，相对于其最近的定位的上级元素的坐标。否则，相对于body。</p></blockquote></li><li><p>代码：父元素定位了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 300px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span><span class="selector-pseudo">:blue</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">blue</span>;</span></span><br><span class="line">      position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">      height: 200px;</span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--父元素是定位的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> sonNode = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(sonNode.offsetLeft);<span class="comment">// 50  参照定位的父元素</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(sonNode.offsetTop); <span class="comment">// 50  参照定位的父元素</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>代码：父元素没有定位</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 300px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span><span class="selector-pseudo">:blue</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">blue</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">      height: 200px;</span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父元素的没有定位--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> sonNode = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(sonNode.offsetLeft);<span class="comment">// 406  参照body</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(sonNode.offsetTop);<span class="comment">// 101   参照body</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="获取元素的父元素【重要】"><a href="#获取元素的父元素【重要】" class="headerlink" title="获取元素的父元素【重要】"></a>获取元素的父元素【重要】</h3><ul><li><p>语法：</p><blockquote><p><strong>元素.offsetParent</strong> 作用：获取元素的最近的定位的上级元素</p></blockquote></li><li><p>代码1：父元素定位了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 300px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span><span class="selector-pseudo">:blue</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">blue</span>;</span></span><br><span class="line">      position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">      height: 200px;</span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父元素有定位--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> sonNode = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> parent = sonNode.offsetParent;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(parent); <span class="comment">// 获取定位的上级元素，div.father</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>代码2：父元素没有定位</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 300px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span><span class="selector-pseudo">:blue</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">blue</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">      height: 200px;</span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父元素没有定位--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> sonNode = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> parent = sonNode.offsetParent;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(parent); <span class="comment">// 因为没有最近的定位的上级元素，所以获取body</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="图解offset系列属性"><a href="#图解offset系列属性" class="headerlink" title="图解offset系列属性"></a>图解offset系列属性</h3><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://lixiaohui100200.github.io/book/list/Dom/media/06.png" alt="img"></p><h3 id="本节小结"><a href="#本节小结" class="headerlink" title="本节小结"></a>本节小结</h3><blockquote><p>获取元素的大小</p><p>获取元素的位置</p><p>获取元素的父元素</p></blockquote><h2 id="课堂一练-1"><a href="#课堂一练-1" class="headerlink" title="课堂一练"></a>课堂一练</h2><ul><li>案例1：放大镜</li></ul><h2 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h2><blockquote><p><strong>扩展1：BOM中window对象中onload事件和onunload事件window对象中onload事件和onunload事件)</strong></p></blockquote><ul><li><p>onload</p><ul><li><p>作用：页面加载（页面元素，图片，媒体资源，外联等）完后要执行的代码。</p></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;页面加载完了&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>onunload</p><ul><li><p>作用：页面卸载完后（刷新），要执行的代码。</p></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;页面卸载了&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p><strong>扩展2：onmouseenter和onmouseover的区别 以及onmouseleave和onmouseout的区别</strong></p></blockquote><ul><li><p>相同点：</p><ul><li>都是鼠标进入或离开事件，功能一致。</li></ul></li><li><p>不同点：</p><ul><li>onmouseenter和onmouseleave不冒泡</li><li>onmouseover和onmouseout会冒泡</li></ul></li></ul><h2 id="offset系列【回顾】"><a href="#offset系列【回顾】" class="headerlink" title="offset系列【回顾】"></a>offset系列【回顾】</h2><h3 id="获取元素的大小-【重要】-1"><a href="#获取元素的大小-【重要】-1" class="headerlink" title="获取元素的大小 【重要】"></a>获取元素的大小 【重要】</h3><ul><li><p>语法：</p><blockquote><p><strong>元素.offsetWidth</strong> 和 <strong>元素.offsetHeight</strong></p><p>获取元素的宽度 和 高度，返回数字，不含单位。</p><p>元素的宽度：width + padding(左右) + border（左右）;</p><p>元素的高度： height + padding(上下) + border(上下);</p></blockquote></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">      width: 100px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      padding: 10px;</span><br><span class="line">      border: 5px solid red;</span><br><span class="line">      background-color: blue;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> divNode = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// width(100) + padding(左10 右10) + border(左5 右5)</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(divNode.offsetWidth);<span class="comment">// 130</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// height(100) + padding(上10 下10) + border(上5 下5)</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(divNode.offsetHeight);<span class="comment">// 130</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="获取元素的位置【重要】-1"><a href="#获取元素的位置【重要】-1" class="headerlink" title="获取元素的位置【重要】"></a>获取元素的位置【重要】</h3><ul><li><p>语法：</p><blockquote><p><strong>元素.offsetLeft</strong> 和 <strong>元素.offsetTop</strong> 作用：获取元素的坐标，相对于其最近的定位的上级元素的坐标。否则，相对于body。</p></blockquote></li><li><p>代码：父元素定位了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 300px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span><span class="selector-pseudo">:blue</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">blue</span>;</span></span><br><span class="line">      position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">      height: 200px;</span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--父元素是定位的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> sonNode = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(sonNode.offsetLeft);<span class="comment">// 50  参照定位的父元素</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(sonNode.offsetTop); <span class="comment">// 50  参照定位的父元素</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>代码：父元素没有定位</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 300px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span><span class="selector-pseudo">:blue</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">blue</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">      height: 200px;</span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父元素的没有定位--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> sonNode = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(sonNode.offsetLeft);<span class="comment">// 406  参照body</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(sonNode.offsetTop);<span class="comment">// 101   参照body</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="获取元素的父元素【重要】-1"><a href="#获取元素的父元素【重要】-1" class="headerlink" title="获取元素的父元素【重要】"></a>获取元素的父元素【重要】</h3><ul><li><p>语法：</p><blockquote><p><strong>元素.offsetParent</strong> 作用：获取元素的最近的定位的上级元素</p></blockquote></li><li><p>代码1：父元素定位了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 300px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span><span class="selector-pseudo">:blue</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">blue</span>;</span></span><br><span class="line">      position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">      height: 200px;</span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父元素有定位--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> sonNode = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> parent = sonNode.offsetParent;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(parent); <span class="comment">// 获取定位的上级元素，div.father</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>代码2：父元素没有定位</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 300px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span><span class="selector-pseudo">:blue</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">blue</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">      height: 200px;</span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父元素没有定位--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> sonNode = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> parent = sonNode.offsetParent;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(parent); <span class="comment">// 因为没有最近的定位的上级元素，所以获取body</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="图解offset系列属性-1"><a href="#图解offset系列属性-1" class="headerlink" title="图解offset系列属性"></a>图解offset系列属性</h3><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://lixiaohui100200.github.io/book/list/Dom/media/offset.png" alt="img"></p><h2 id="client系列"><a href="#client系列" class="headerlink" title="client系列"></a>client系列</h2><h3 id="获取元素的大小【了解】"><a href="#获取元素的大小【了解】" class="headerlink" title="获取元素的大小【了解】"></a>获取元素的大小【了解】</h3><ul><li><p>语法</p><blockquote><p><strong>元素.clientWidth</strong>和 <strong>元素.clientHeight</strong></p><p>获取元素的宽度 和 高度，返回数字，不含单位。</p><p>元素的宽度：width + padding(左右) ;</p><p>元素的高度： height + padding(上下)</p></blockquote></li><li><p>代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">      width: 100px;</span><br><span class="line">      height: 100px;</span><br><span class="line"><span class="css">      <span class="selector-tag">padding</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border</span><span class="selector-pseudo">:5px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span></span><br><span class="line">      background-color: blue;</span><br><span class="line">      margin: 100px auto;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> divNode = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// width(100) + padding(左10 右10) </span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 注意：不包含边框</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(divNode.clientWidth);<span class="comment">//120</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// height(100) + padding(上10 下10)</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 注意：不包含边框</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(divNode.clientHeight);<span class="comment">//120</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="获取元素的位置【了解】"><a href="#获取元素的位置【了解】" class="headerlink" title="获取元素的位置【了解】"></a>获取元素的位置【了解】</h3><ul><li><p>语法：</p><blockquote><p><strong>元素.clientLeft</strong> 和 <strong>元素.clientTop</strong> 作用：获取元素的坐标，获取当前节点对象的padding的外边界，距离border外边界的距离。实际上就是左边框的厚度。</p></blockquote></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 200px;</span><br><span class="line"><span class="css">      <span class="selector-tag">padding</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border-top</span><span class="selector-pseudo">:50px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span></span><br><span class="line">      background-color: blue;</span><br><span class="line">      margin: 100px auto;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> divNode = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(divNode.clientLeft);<span class="comment">// 10</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(divNode.clientTop);<span class="comment">// 50</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="图解client系列属性"><a href="#图解client系列属性" class="headerlink" title="图解client系列属性"></a>图解client系列属性</h3><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://lixiaohui100200.github.io/book/list/Dom/media/client2.png" alt="img"></p><h2 id="scroll系列"><a href="#scroll系列" class="headerlink" title="scroll系列"></a>scroll系列</h2><h3 id="获取元素的大小【了解】-1"><a href="#获取元素的大小【了解】-1" class="headerlink" title="获取元素的大小【了解】]"></a>获取元素的大小【了解】]</h3><ul><li><p>语法：</p><blockquote><p><strong>元素.scrollWidth</strong> 和 <strong>元素.scrollHieght</strong> 获取当前节点对象的宽度和高度，返回数字，不包含单位。</p><p>宽度：width+padding（左右）+ 溢出部分</p><p>高度：height+padding（上下）+ 溢出部分</p></blockquote></li><li><p>代码1：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">width</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line">      height: 300px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:100px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">      <span class="comment">/*overflow: auto;*/</span></span></span><br><span class="line">      padding: 10px;</span><br><span class="line"><span class="css">      <span class="selector-tag">border</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line">      width: 400px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      background-color: blue;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> fNode = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line">    /*</span><br><span class="line">      width + padding(左右)  包含溢出部分</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(fNode.scrollWidth); <span class="comment">// 410</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://lixiaohui100200.github.io/book/list/Dom/media/scroll1.png" alt="img"></p></li><li><p>代码2：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">width</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line">      height: 300px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:100px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line">      padding: 10px;</span><br><span class="line"><span class="css">      <span class="selector-tag">border</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line">      width: 100px;</span><br><span class="line">      height: 400px;</span><br><span class="line">      background-color: blue;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> fNode = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line">    /*</span><br><span class="line">      height + padding(上下)  包含溢出部分</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(fNode.scrollHeight); <span class="comment">//410</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://lixiaohui100200.github.io/book/list/Dom/media/scroll2.png" alt="img"></p></li></ul><h3 id="获取元素中被卷去的内容的距离【重要】"><a href="#获取元素中被卷去的内容的距离【重要】" class="headerlink" title="获取元素中被卷去的内容的距离【重要】"></a>获取元素中被卷去的内容的距离【重要】</h3><ul><li><p>语法：</p><blockquote><p><strong>元素.scrollLeft【了解】</strong> 和 <strong>元素.scrollTop【重点】</strong> 作用：获取元素内部总被卷去的内容的横向距离 和 <strong>纵向距离</strong></p></blockquote></li><li><p>代码：</p><ul><li><p>代码1：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">width</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line">      height: 300px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:100px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line">      padding: 10px;</span><br><span class="line">      overflow: auto;</span><br><span class="line"><span class="css">      <span class="selector-tag">border</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line">      width: 400px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      background-color: blue;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> fNode = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    fNode.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(fNode.scrollLeft);</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://lixiaohui100200.github.io/book/list/Dom/media/scroll3.png" alt="img"></p></li></ul></li></ul><ul><li><p>代码2：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">width</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line">      height: 300px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">margin</span><span class="selector-pseudo">:100px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line">      padding: 10px;</span><br><span class="line">      overflow: auto;</span><br><span class="line"><span class="css">      <span class="selector-tag">border</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.son</span> &#123;</span></span><br><span class="line">      width: 100px;</span><br><span class="line">      height: 400px;</span><br><span class="line">      background-color: blue;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> fNode = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    fNode.onscroll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(fNode.scrollTop);</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://lixiaohui100200.github.io/book/list/Dom/media/scroll4.png" alt="img"></p></li></ul><h2 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h2><blockquote><p>能够区分offset、client、scroll三个系列属性的区别</p><p>掌握onscroll事件以及scrollLeft和<strong>scrollTop</strong> 的使用</p></blockquote><h2 id="bom相关"><a href="#bom相关" class="headerlink" title="bom相关"></a>bom相关</h2><h3 id="BOM介绍【了解】"><a href="#BOM介绍【了解】" class="headerlink" title="BOM介绍【了解】"></a>BOM介绍【了解】</h3><p> BOM：（<strong>B</strong>rowser <strong>O</strong>bject <strong>M</strong>odel） <strong>浏览器对象模型</strong>。提供了操作浏览器的工具库（浏览器中的文档，地址栏，刷新，历史记录，浏览器的信息等等）。 <img src= "/bubble/img/loading.gif" data-lazy-src="https://lixiaohui100200.github.io/book/list/Dom/media/01.png" alt="img"></p><h3 id="BOM中的顶级对象window"><a href="#BOM中的顶级对象window" class="headerlink" title="BOM中的顶级对象window"></a>BOM中的顶级对象window</h3><h4 id="window是顶级对象【重要】"><a href="#window是顶级对象【重要】" class="headerlink" title="window是顶级对象【重要】"></a>window是顶级对象【重要】</h4><ul><li><p>window对象被称为 <strong>顶级对象</strong>（ <strong>全局对象</strong>），在程序中所有的 <strong>全局变量</strong>或者<strong>全局函数</strong>都会被当作window对象中的属性或方法。</p></li><li><p>书写时, <strong>window对象可以省略</strong></p></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line"><span class="keyword">var</span> userName = <span class="string">&#x27;张三&#x27;</span>;   </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;   <span class="comment">// 全局函数</span></span><br><span class="line">  alert(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.userName); <span class="comment">// &#x27;张三&#x27;;</span></span><br><span class="line">  <span class="built_in">console</span>.log(userName); <span class="comment">// &#x27;张三&#x27;;   window对象可以省略</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.test();  <span class="comment">// &#x27;hello&#x27;;</span></span><br><span class="line">  test(); <span class="comment">// &#x27;hello&#x27;;  window对象可以省略</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 在定义全局变量名，命名不要是 name 和 top。 name变量若存入数组时， 在window中永远都会是字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top 在window中已经被占用，并且top是只读的，无法修改top变量的值。</span><br></pre></td></tr></table></figure></li></ul><h4 id="window对象中的对话框方法【了解】"><a href="#window对象中的对话框方法【了解】" class="headerlink" title="window对象中的对话框方法【了解】"></a>window对象中的对话框方法【了解】</h4><ul><li><p>alert();</p></li><li><p>prompt();</p></li><li><p>confirm();</p></li><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="number">1</span>);  <span class="comment">// window.alert(1);</span></span><br><span class="line">confirm(<span class="string">&#x27;你确定要删除吗？&#x27;</span>);  <span class="comment">// window.confirm(&#x27;你确定要删除吗？&#x27;);</span></span><br><span class="line">prompt(<span class="string">&#x27;请输入你的年龄&#x27;</span>); <span class="comment">// window.prompt(&#x27;请输入你的年龄&#x27;);</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="window对象中的定时器方法【重要】"><a href="#window对象中的定时器方法【重要】" class="headerlink" title="window对象中的定时器方法【重要】"></a>window对象中的定时器方法【重要】</h4><ul><li><p><strong>setTimeout(callback, time);</strong></p><ul><li><p><strong>作用</strong>：超时调用，<strong>仅执行一次</strong> 。定时炸弹</p></li><li><p><strong>参数</strong>：</p><ul><li>callback，函数，表示超时时要执行的程序。</li><li>time，数字，表示毫秒数</li></ul></li><li><p><strong>返回值</strong>：返回一个数字，标识这一个定时器。</p></li><li><p><strong>代码</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 三秒后爆炸</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;爆炸了！&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br><span class="line"><span class="comment">// 问题：定时器后面的代码，是在爆炸后执行？还是爆炸前执行？为什么？</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;执行了&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://lixiaohui100200.github.io/book/list/Dom/media/02.png" alt="img"></p></li></ul></li></ul><ul><li><p><strong>清除setTimeout定时器</strong></p><ul><li><p>语法：<strong>clearTimeout(定时器数字标识);</strong></p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;stop&quot;</span>&gt;</span>清除定时器（拆弹）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建一个定时器，并用变量接收定时器返回的标识。</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> flag = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;爆炸&#x27;</span>);</span></span><br><span class="line">    &#125;, 3000);</span><br><span class="line"><span class="javascript">    <span class="comment">// 获取按钮元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> stop = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;stop&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 给按钮元素注册点击事件</span></span></span><br><span class="line"><span class="javascript">    stop.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 清除定时器</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">clearInterval</span>(flag);</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><strong>setInterval(callback, time);</strong></p><ul><li><p><strong>作用</strong>：超时调用，重复执行（每间隔一段时间执行一次）。 定时闹钟</p></li><li><p><strong>参数</strong>：</p><ul><li>callback，函数，表示超时时要执行的程序。</li><li>time，数字，表示毫秒数</li></ul></li><li><p><strong>返回值</strong>：返回一个数字，标识这一个定时器。</p></li><li><p><strong>代码</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;懒虫起床&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://lixiaohui100200.github.io/book/list/Dom/media/03.png" alt="img"></p></li><li><p><strong>清除setInterval定时器</strong></p><ul><li><p>语法：<strong>clearInterval(定时器数字标识);</strong></p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;stop&quot;</span>&gt;</span>清除定时器（摔闹钟）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建一个定时器，并用变量接收定时器返回的标识。</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> flag = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;懒虫起床&#x27;</span>);</span></span><br><span class="line">    &#125;, 1000);</span><br><span class="line"><span class="javascript">    <span class="comment">// 获取按钮元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> stop = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;stop&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 给按钮元素注册点击事件</span></span></span><br><span class="line"><span class="javascript">    stop.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 清除定时器</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">clearInterval</span>(flag);</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="BOM中的location对象【了解】"><a href="#BOM中的location对象【了解】" class="headerlink" title="BOM中的location对象【了解】"></a>BOM中的location对象【了解】</h3><h4 id="location对象介绍"><a href="#location对象介绍" class="headerlink" title="location对象介绍"></a>location对象介绍</h4><p> location对象可以用来**操作地址栏中的地址 **</p><h4 id="URL介绍"><a href="#URL介绍" class="headerlink" title="URL介绍"></a>URL介绍</h4><ul><li><p>URL统一资源定位符 (Uniform Resource Locator, URL)，指的就是<strong>网址</strong></p></li><li><p>URL的组成： <strong>scheme://host:port/path?query#fragment</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">scheme:通信协议</span><br><span class="line">    常用的http,https,ftp,maito等</span><br><span class="line"></span><br><span class="line">host:主机</span><br><span class="line">    服务器(计算机)域名系统 (DNS) 主机名或 IP 地址。</span><br><span class="line"></span><br><span class="line">port:端口号</span><br><span class="line">    整数，可选，省略时使用方案的默认端口，如http的默认端口为80。</span><br><span class="line"></span><br><span class="line">path:路径</span><br><span class="line">    由零或多个&#39;&#x2F;&#39;符号隔开的字符串，一般用来表示主机上的一个目录或文件地址。</span><br><span class="line"></span><br><span class="line">query:查询</span><br><span class="line">    可选，用于给动态网页传递参数，可有多个参数，用&#39;&amp;&#39;符号隔开，每个参数的名和值用&#39;&#x3D;&#39;符号隔开。例如：name&#x3D;zs</span><br><span class="line"></span><br><span class="line">fragment:信息片断</span><br><span class="line">    字符串，锚点.</span><br></pre></td></tr></table></figure><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://lixiaohui100200.github.io/book/list/Dom/media/04.png" alt="img"></p></li></ul><h4 id="location对象中的属性"><a href="#location对象中的属性" class="headerlink" title="location对象中的属性"></a>location对象中的属性</h4><p><img src= "/bubble/img/loading.gif" data-lazy-src="https://lixiaohui100200.github.io/book/list/Dom/media/05.png" alt="img"></p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 地址：https://www.jd.com/index.html?userName=admin&amp;pwd=123456#beijing</span></span><br><span class="line"><span class="built_in">console</span>.log(location.hash);  <span class="comment">// #beijing</span></span><br><span class="line"><span class="built_in">console</span>.log(location.host);  <span class="comment">// www.jd.com</span></span><br><span class="line"><span class="built_in">console</span>.log(location.hostname);  <span class="comment">// www.jd.com</span></span><br><span class="line"><span class="built_in">console</span>.log(location.href);  <span class="comment">// https://www.jd.com/index.html?userName=admin&amp;pwd=123456#beijing</span></span><br><span class="line"><span class="built_in">console</span>.log(location.hostname);  <span class="comment">// /index.html</span></span><br><span class="line"><span class="built_in">console</span>.log(location.port);  <span class="comment">// &#x27;&#x27; 默认是80</span></span><br><span class="line"><span class="built_in">console</span>.log(location.protocol);  <span class="comment">// https</span></span><br><span class="line"><span class="built_in">console</span>.log(location.search); <span class="comment">// ?userName=admin&amp;pwd=123456</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="location对象中的方法"><a href="#location对象中的方法" class="headerlink" title="location对象中的方法"></a>location对象中的方法</h4><ul><li><p>location.reload();</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--刷新当前页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;location.reload()&quot;</span>&gt;</span>刷新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="BOM中的history对象【了解】"><a href="#BOM中的history对象【了解】" class="headerlink" title="BOM中的history对象【了解】"></a>BOM中的history对象【了解】</h3><ul><li><p>history对象介绍</p><blockquote><p>用来<strong>操作历史记录</strong></p></blockquote></li><li><p>history对象中常用的方法</p><blockquote><ul><li><p>history.back();</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载上一个历史记录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;history.back()&quot;</span>&gt;</span>上一个页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>history.forward();</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载下一个历史记录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;history.forward()&quot;</span>&gt;</span>下一个页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>history.go(num);</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载上一个历史记录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;history.go(-1)&quot;</span>&gt;</span>上一个页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加载下一个历史记录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;history.go(1)&quot;</span>&gt;</span>下一个页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul><h3 id="BOM中的Navigator对象【了解】"><a href="#BOM中的Navigator对象【了解】" class="headerlink" title="BOM中的Navigator对象【了解】"></a>BOM中的Navigator对象【了解】</h3><ul><li><p>navigator对象介绍</p><blockquote><p>用来获取当前浏览器的信息（所在的系统、浏览器的版本）</p></blockquote></li><li><p>navigator对象中常见的属性</p><blockquote><ul><li><p>navigator.userAgent</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过userAgent可以判断用户浏览器的类型</span><br></pre></td></tr></table></figure></li><li><p>navigator.platform</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过platform可以判断浏览器所在的系统平台类型.</span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul><blockquote><ol><li>理解window对象是顶级对象</li><li>掌握两种定时器的创建 和 清理</li><li>掌握location对象中href属性</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> 面试 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/bubble/2020/07/17/whatis-css/"/>
      <url>/bubble/2020/07/17/whatis-css/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\bubble\css\APlayer.min.css"><script src="\bubble\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\bubble\js\Meting.min.js"></script><p><a href="https://zhuanlan.zhihu.com/p/92721841?utm_source=com.gzqwkj.cshu">参考文档</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript基础</title>
      <link href="/bubble/2020/07/17/whaist-js/"/>
      <url>/bubble/2020/07/17/whaist-js/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\bubble\css\APlayer.min.css"><script src="\bubble\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\bubble\js\Meting.min.js"></script><h1 id="一、javaScript简单介绍"><a href="#一、javaScript简单介绍" class="headerlink" title="一、javaScript简单介绍"></a>一、javaScript简单介绍</h1><ol><li>1994年，网景公司(Netscape)发布了Navigator浏览器0.9版，这是世界上第一款比较成熟的网络浏览器，<br> 轰动一时。但是这是一款名副其实的浏览器–只能浏览页面，浏览器无法与用户互动,当时解决这个问题有两个办         法，一个是采用现有的语言,许它们直接嵌入网页。另一个是发明一种全新的语言。<a id="more"></a></li><li>1995年Sun公司将Oak语言改名为Java，正式向市场推出。Sun公司大肆宣传，许诺这种语言可以”一次编写，到处运      行”(Write Once, Run Anywhere)，它看上去很可能成为未来的主宰。</li><li>网景公司动了心，决定与Sun公司结成联盟</li><li>34岁的系统程序员Brendan Eich登场了。1995年4月，网景公司录用了他,他只用10天时间就把Javascript设计出    来了。  （多肽语言）</li><li>(1)借鉴C语言的基本语法; (2)借鉴Java语言的数据类型和内存管理; (3)借鉴Scheme语言，将函数提升到”第一等公民”(first class)的地位; (4)借鉴Self语言，使用基于原型(prototype)的继承机制。</li></ol><h4 id="一、什么是JavaScript？"><a href="#一、什么是JavaScript？" class="headerlink" title="一、什么是JavaScript？"></a>一、什么是JavaScript？</h4><p>JavaScript： 基于对象和事件驱动，运行在浏览器客户端的脚本语言。</p><pre><code>     ✔  js的运行环境： 运行在浏览器端的一种语言     </code></pre><p>​        ✔  最后将所有的js代码都要以对象的形式去执行，都要通过事件的方式去触发执行【DOM】</p><p> 对象：      </p><p>​        现实世界中的对象：  将任何一个具体的事物都是一个对象【万事万物皆对象】   </p><p>​        编程中的对象： 对现实中对象的抽象描述。  </p><p>✔面向对象：【推荐】        </p><p>​            代码执行都要以一个具体的对象为整体去执行  </p><p>✔面向过程： </p><p>​            代码执行的时候，一行一行执行的。</p><p>1、JavaScript是一种在网络浏览器上运行的编程语言。</p><p>它主要添加到使用HTML和CSS构建的网站中，并在实现各种页面动态效果方面发挥作用。 例如，网页上显示的轮播模式和在咨询平台上输入内容后显示的提示信息不正确等。另外，在商场网站上购物时，购物车的使用和成本估算也 需要JavaScript。 因此，即使不是很明显，它仍然是编码人员经常使用的语言。</p><p>2、JavaScript是一种多功能开发语言。</p><p>除了向网页添加操作的有用性之外，JavaScript还可以用于实现许多其他功能。 例如，它可以开发各种网站应用程序，例如“聊天工具”和“货币图表”，它们可以实时修改，这是JavaScript的主要魅力之一。</p><h4 id="二、JavaScript的特点是什么？"><a href="#二、JavaScript的特点是什么？" class="headerlink" title="二、JavaScript的特点是什么？"></a>二、JavaScript的特点是什么？</h4><p>1，脚本语言。 JavaScript是一种解释型脚本语言。首先编译和执行C，C ++和其他语言，同时在程序运行期间逐行解释JavaScript。</p><p>2.基于对象。 JavaScript是一种基于对象的脚本语言，不仅可以创建对象，还可以使用现有对象。</p><p>3.简单。 JavaScript语言使用弱类型的变量类型。它对使用的数据类型没有严格要求。它是一种基于Java基本语句和控件的脚本语言。它的设计既简单又紧凑。</p><p>4，动态。 JavaScript是一种事件驱动的脚本语言，无需通过Web服务器即可响应用户输入。访问网页时，鼠标可以在网页上单击鼠标，或上下移动并移动窗口。 JavaScript可以直接响应这些事件。</p><p>5.跨平台。 JavaScript脚本语言不依赖于操作系统，仅需要浏览器支持。因此，只要机器上的浏览器支持JavaScript脚本语言，那么编写后就可以在任何机器上使用JavaScript脚本。目前，大多数浏览器都支持JavaScript。</p><h4 id="三、javaScript的组成"><a href="#三、javaScript的组成" class="headerlink" title="三、javaScript的组成"></a>三、javaScript的组成</h4><blockquote><p> ☞ ECMASCRIPT    定义了javascript的语法规范,描述了语言的基本语法和数据类型 </p></blockquote><blockquote><p>☞ BOM （Browser Object Model） 即浏览器对象模型。    浏览器对象模型,一套操作浏览器功能的API,通过       BOM可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等  </p></blockquote><blockquote><p>☞ DOM (Document Object Model) 文档对象模型,一套操作页面元素的API,DOM可以把HTML看做是文档树，通过           DOM提供的API可以对树上的节点进行操作 【js+HTMl+css】</p></blockquote><h3 id="javaScript书写位置"><a href="#javaScript书写位置" class="headerlink" title="javaScript书写位置"></a>javaScript书写位置</h3><h4 id="一、内嵌式写法"><a href="#一、内嵌式写法" class="headerlink" title="一、内嵌式写法"></a>一、内嵌式写法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">☞  在html页面内部设置</span><br><span class="line">     &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">         js</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">  注意：</span><br><span class="line">        该标签可以放到head标签中或者body标签中</span><br></pre></td></tr></table></figure><h4 id="二、外联式写法【推荐写法】"><a href="#二、外联式写法【推荐写法】" class="headerlink" title="二、外联式写法【推荐写法】"></a>二、外联式写法【推荐写法】</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">☞</span><br><span class="line">    <span class="number">1.</span> 新建js文件</span><br><span class="line">   <span class="number">1.</span> 通过script标签引用到当前页面中</span><br><span class="line">   &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;test.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">     <span class="number">1.</span> 不能将代码写到外联式标签中。</span><br><span class="line">     <span class="number">2.</span> 一个网页中可以同时调用多个外部js文件</span><br><span class="line">   &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;test.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;test.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;test.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;test.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="三、行内式写法【不推荐】"><a href="#三、行内式写法【不推荐】" class="headerlink" title="三、行内式写法【不推荐】"></a>三、行内式写法【不推荐】</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">☞  将js代码写到标签内部</span><br><span class="line">&lt;div onclick=<span class="string">&quot;js代码&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">     onclick 是一个点击事件： 当点击div的时候，会触发该事件，执行该事件中的代码</span><br></pre></td></tr></table></figure><h3 id="javaScript中输入消息方式"><a href="#javaScript中输入消息方式" class="headerlink" title="javaScript中输入消息方式"></a>javaScript中输入消息方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">alert();</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;&lt;h1&gt;我是一段文字&lt;/h1&gt;&#x27;</span>);   在网页中输出信息</span><br><span class="line"></span><br><span class="line">prompt(<span class="string">&quot;请输入姓名&quot;</span>,<span class="string">&quot;测试&quot;</span>);</span><br><span class="line"></span><br><span class="line">confirm(<span class="string">&quot;确定不听课么&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;adsadsfafds&quot;</span>);</span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line">    <span class="number">1.</span> 在js中如果希望输出一个具体的文本信息，必须带引号</span><br><span class="line">  <span class="number">2.</span> 在使用<span class="built_in">document</span>.write();的时候，可以在方法内输出html标签，加引号。</span><br></pre></td></tr></table></figure><h3 id="变量【重点】"><a href="#变量【重点】" class="headerlink" title="变量【重点】"></a>变量【重点】</h3><h4 id="变量概念"><a href="#变量概念" class="headerlink" title="变量概念"></a>变量概念</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">☞ 变量：  在程序中用来保存数据的一个容器</span><br></pre></td></tr></table></figure><p>定义变量及升职</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> ☞ 定义变量</span><br><span class="line">    <span class="keyword">var</span> 自定义变量名；</span><br><span class="line"></span><br><span class="line">☞ 变量赋值    </span><br><span class="line"></span><br><span class="line">     变量名 = 值；</span><br><span class="line"></span><br><span class="line">☞ 总结：</span><br><span class="line">    <span class="number">1.</span> 变量一次只能保存一个值</span><br><span class="line">    <span class="number">2.</span> 变量只能保存最后一次赋值结果</span><br><span class="line">    <span class="number">3.</span> js中区分字母大小写</span><br></pre></td></tr></table></figure><h4 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">☞ 规则    必须遵守的，不遵守的话 JS引擎 发现并报错 </span><br><span class="line">    <span class="number">1.</span> 由字母(A-Za-z)、数字(<span class="number">0</span><span class="number">-9</span>)、下划线(_)、美元符号( $ )组成，如：<span class="keyword">var</span> usrAge, num01, _name</span><br><span class="line">    <span class="number">2.</span> 区分大小写 强调：JS 严格区分大小写 ，<span class="keyword">var</span> app; 和 <span class="keyword">var</span> App; 是两个变量</span><br><span class="line">    <span class="number">3.</span> 不能 以数字开头，或者汉字定义变量名</span><br><span class="line">    <span class="number">4.</span> 不能 是关键字、保留字 和 代码符号，例如：<span class="keyword">var</span>、<span class="keyword">for</span>、<span class="keyword">while</span>、&amp;, <span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class">    5. 不能出现空格</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">☞ 规范  建议遵守的，不遵守的话 <span class="title">JS</span>引擎 也不会报错</span></span><br><span class="line"><span class="class">    1. 变量名必须有意义</span></span><br><span class="line"><span class="class">    2. 遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。</span></span><br></pre></td></tr></table></figure><h3 id="数据类型【重点】"><a href="#数据类型【重点】" class="headerlink" title="数据类型【重点】"></a>数据类型【重点】</h3><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">☞ 数据类型---- 指的是变量的数据类型</span><br><span class="line">数据类型可以分为基本数据类型和引用数据类型</span><br><span class="line"></span><br><span class="line">基本数据类型 ：<span class="built_in">String</span>、<span class="built_in">Number</span>、<span class="built_in">Boolean</span> 、Null、Undefined、<span class="built_in">Symbol</span>、BigInt ;</span><br><span class="line"></span><br><span class="line">引用数据类型：<span class="built_in">Object</span>;</span><br></pre></td></tr></table></figure><h5 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h5><ul><li><p>数值类型(number)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> ☞ 凡是数字都属于该类型【整数，小数，负数】</span><br><span class="line"></span><br><span class="line"> ☞ 只要变量的值是一个具体的数字，那么当前变量的数据类型就是数值类型</span><br><span class="line"></span><br><span class="line"> ☞ number类型表示的数字大小：</span><br><span class="line">       最大值是±<span class="number">1.7976931348623157</span>乘以<span class="number">10</span>的<span class="number">308</span>次方    <span class="built_in">Number</span>.MAX_VALUE</span><br><span class="line">      最小值是±<span class="number">5</span> 乘以<span class="number">10</span>的<span class="number">-324</span>次方                  <span class="built_in">Number</span>.MIN_VALUE</span><br><span class="line"></span><br><span class="line"> ☞ 数值类型表示方式：</span><br><span class="line">     ✔ 十进制表示</span><br><span class="line">         <span class="keyword">var</span>  n1=<span class="number">10</span>,n2=<span class="number">9</span>, n3=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">     ✔ 十六进制表示</span><br><span class="line">         以 <span class="number">0</span>x开头 <span class="number">0</span>到<span class="number">9</span>之间的数字，a(A)-f(F)之间字母构成。 a-f对应的数字是<span class="number">10</span><span class="number">-15</span></span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">0xA</span>;</span><br><span class="line"></span><br><span class="line">     ✔ 八进制表示</span><br><span class="line">         八进制直接以数字<span class="number">0</span>开始，有<span class="number">0</span><span class="number">-7</span>之间的数字组成。</span><br><span class="line">        <span class="keyword">var</span> num1 = <span class="number">07</span>;   <span class="comment">// 对应十进制的7</span></span><br><span class="line">        <span class="keyword">var</span> num2 = <span class="number">019</span>;  <span class="comment">// 对应十进制的19</span></span><br><span class="line">        <span class="keyword">var</span> num3 = <span class="number">08</span>;   <span class="comment">// 对应十进制的8</span></span><br><span class="line"></span><br><span class="line">☞ 备注：</span><br><span class="line">     进行算数计算时，八进制和十六进制表示的数值最终都将被转换成十进制数值。</span><br></pre></td></tr></table></figure></li><li><p>字符串类型(string)</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">☞ 字符串可以是引号中的任意文本。可以使用单引号或双引号</span><br><span class="line"></span><br><span class="line">☞  在js中一般写字符串类型的变量时候，推荐使用单引号。</span><br><span class="line"></span><br><span class="line">☞ 注意：</span><br><span class="line">    <span class="number">1.</span> 单引号和双引号之间的嵌套</span><br><span class="line">         例如： 输出    我是<span class="string">&quot;高帅富&quot;</span>程序猿;  </span><br><span class="line"></span><br><span class="line">    <span class="number">2.</span> 转义字符</span><br><span class="line">         \n          换行</span><br><span class="line">         \\          斜杠</span><br><span class="line">         \<span class="string">&#x27;          单引号</span></span><br><span class="line"><span class="string">         \&quot;          双引号</span></span><br><span class="line"><span class="string">         \r          回车符</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       例如：</span></span><br><span class="line"><span class="string">       var strMsg = &#x27;</span>I<span class="string">&#x27;m the GOD of my world ~!&#x27;</span>;   <span class="comment">//输出：I&#x27;m the GOD of my world ~!</span></span><br><span class="line">       <span class="keyword">var</span> strMsg2 = <span class="string">&quot;I&quot;</span>m the GOD of my world ~!<span class="string">&quot;;  //输出：I&quot;</span>m the GOD of my world ~!</span><br><span class="line">       <span class="keyword">var</span> strMsg3 = <span class="string">&#x27;反斜杠是这个 \\，神奇！&#x27;</span>;  <span class="comment">//输出：反斜杠是这个 \，神奇！</span></span><br></pre></td></tr></table></figure><ul><li>布尔类型（Boolean）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">☞ <span class="literal">true</span>  和 <span class="literal">false</span> </span><br></pre></td></tr></table></figure><ul><li>undefined类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(☞ 如果一个变量，没有赋值，那么该变量的默认是是 <span class="literal">undefined</span> </span><br><span class="line"></span><br><span class="line"> ☞ 如果一个变量的值是<span class="literal">undefined</span>，那么该变量对应的数据类型就是<span class="literal">undefined</span>类型)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>null空对象类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">◆ <span class="literal">null</span>类型被看做空对象指针.只有一个值，即 <span class="literal">null</span> 值</span><br><span class="line">◆ <span class="literal">null</span> 空比如一个变量原先有值 可以将变量的值设置为<span class="literal">null</span> 代表清空变量容器中的数据 </span><br><span class="line">◆ 作用为了清空对象。</span><br></pre></td></tr></table></figure><h5 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h5><ul><li>object类型</li></ul><h4 id="数据类型判断"><a href="#数据类型判断" class="headerlink" title="数据类型判断"></a>数据类型判断</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">☞ 使用  <span class="keyword">typeof</span> 变量  可以得到对应变量的数据类型</span><br><span class="line"></span><br><span class="line"> 例如：</span><br><span class="line">        <span class="keyword">var</span> n1 = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> n2;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span>  n2);</span><br></pre></td></tr></table></figure><blockquote><h5 id="判断变量是不是一个数字"><a href="#判断变量是不是一个数字" class="headerlink" title="判断变量是不是一个数字"></a>判断变量是不是一个数字</h5></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(x) 方法</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">    <span class="keyword">var</span> usrAge = <span class="number">21</span>;</span><br><span class="line">    <span class="keyword">var</span> isOk = <span class="built_in">isNaN</span>(usrAge);</span><br><span class="line">    <span class="built_in">console</span>.log(isNum); <span class="comment">// false ，21 不是一个 非数值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> usrName = <span class="string">&quot;James&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(usrName));<span class="comment">//true ，&quot;James&quot;是一个 非数值</span></span><br></pre></td></tr></table></figure><h4 id="数组类型转换"><a href="#数组类型转换" class="headerlink" title="数组类型转换"></a>数组类型转换</h4><ul><li>转数值类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">☞<span class="built_in">Number</span>(变量)：</span><br><span class="line">      总结：</span><br><span class="line">        <span class="number">1.</span> 可以通过该方法将数据类型转换为数值类型</span><br><span class="line">       <span class="keyword">var</span> n1 = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">           n1 = <span class="built_in">Number</span>(n1);</span><br><span class="line">     <span class="number">2.</span> 在转换的过程中，遇到小数直接保留下来，不会舍去</span><br><span class="line">     <span class="number">3.</span> 如果变量无法转换为数值类型，那么返回的结果是<span class="literal">NaN</span>； 对应的数据类型依然是数值类型</span><br><span class="line">     <span class="number">4.</span> 如果将布尔类型转换为数值类型，<span class="literal">true</span> 转化后的结果是 <span class="number">1</span>  <span class="literal">false</span> 转化后的结果是<span class="number">0</span></span><br><span class="line"></span><br><span class="line"> ☞<span class="built_in">parseInt</span>(变量)</span><br><span class="line">     <span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">&quot;12.3abc&quot;</span>);   <span class="comment">// 返回12，如果第一个字符是数字会解析知道遇到非数字结束</span></span><br><span class="line">   <span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(<span class="string">&quot;abc123&quot;</span>);   <span class="comment">// 返回NaN，如果第一个字符不是数字或者符号就返回NaN</span></span><br><span class="line">   备注：</span><br><span class="line">       <span class="number">1</span> 只会保留整数部分，通过该方式进行数据类型转换后得到就是一个整数</span><br><span class="line">       <span class="number">2.</span> 如果一个变量中的值无法转换为具体数字，那么返回的结果是一个 <span class="literal">NaN</span> 的值</span><br><span class="line">       <span class="number">3.</span> <span class="literal">NaN</span> (not  a  number)   ----<span class="literal">NaN</span>对应的数据类型是数值类型</span><br><span class="line">       <span class="number">4.</span> 通过该方法可以将其他数据类型转为数值类型</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ☞<span class="built_in">parseFloat</span>(变量)</span><br><span class="line">   总结：</span><br><span class="line">       <span class="number">1.</span> 通过该方法可以将其他数据类型转换为数值类型</span><br><span class="line">     <span class="number">2.</span> 在转换过程中，如果遇到小数，那么会直接将小数部分保留</span><br><span class="line">     <span class="number">3.</span> 如果转化不成功过，返回的结果<span class="literal">NaN</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">parseFloat</span>()把字符串转换成浮点数</span><br></pre></td></tr></table></figure><ul><li>转字符串类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">☞  toString()</span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line">       <span class="built_in">console</span>.log(num.toString());</span><br><span class="line"></span><br><span class="line">☞  <span class="built_in">String</span>()</span><br><span class="line"></span><br><span class="line">   备注：</span><br><span class="line">   <span class="built_in">String</span>()函数存在的意义：有些值没有toString()，这个时候可以使用<span class="built_in">String</span>()。比如：<span class="literal">undefined</span>和<span class="literal">null</span></span><br></pre></td></tr></table></figure><ul><li>转布尔值类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">☞ <span class="built_in">Boolean</span>() </span><br><span class="line">备注：</span><br><span class="line">    <span class="number">0</span>  |<span class="string">&#x27;&#x27;</span>(空字符串) | <span class="literal">null</span> | <span class="literal">undefined</span> | <span class="literal">NaN</span>  会转换成<span class="literal">false</span>  其它都会转换成 <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><blockquote><p> <strong>算数运算符</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">+运算</span><br><span class="line">    总结：</span><br><span class="line">      <span class="number">1.</span> 如果是数值类型的变量相加，得到的结果是数值类型</span><br><span class="line">      <span class="number">2.</span> 如果有一个数据类型是字符串类型，相加得到的结果是字符串结果 【加号起到就是一个连接的作用】</span><br><span class="line"> -运算</span><br><span class="line">    总结：</span><br><span class="line">      <span class="number">1.</span> 如果是数值类型的变量相减，得到的结果是数值类型</span><br><span class="line">      <span class="number">2.</span> 如果一个非数字类型的字符串相减，得到的结果是 <span class="literal">NaN</span></span><br><span class="line">      <span class="number">3.</span> 如果是一个数字的字符串相减，得到的结果是数值类型（代码在执行过程中发生了隐式类型转换）</span><br><span class="line"></span><br><span class="line"> *运算</span><br><span class="line">    总结：</span><br><span class="line">       <span class="number">1.</span> 如果是数值类型的变量相乘，得到的结果是数值类型</span><br><span class="line">       <span class="number">2.</span> 如果是一个数字的字符串相乘，得到的结果是数值类型（代码在执行过程中发生了隐式类型转换）</span><br><span class="line">       <span class="number">3.</span> 如果一个非数字类型的字符串相乘，得到的结果是 <span class="literal">NaN</span></span><br><span class="line"></span><br><span class="line"> /运算</span><br><span class="line">     总结：</span><br><span class="line">       <span class="number">1.</span> 如果是数值类型的变量相除，得到的结果是数值类型 </span><br><span class="line">       <span class="number">2.</span> 如果是一个数字的字符串相乘，得到的结果是数值类型（代码在执行过程中发生了隐式类型转换）</span><br><span class="line">       <span class="number">3.</span> 如果一个非数字类型的字符串相除，得到的结果是 <span class="literal">NaN</span></span><br><span class="line">       <span class="number">4.</span> 如果除数为<span class="number">0</span> ，得到的结果是 <span class="literal">Infinity</span>（无穷大） 结果也是数值类型</span><br><span class="line"></span><br><span class="line"> %取余（获取余数）</span><br></pre></td></tr></table></figure><blockquote><p>赋值运算符</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+= |  -=   |  *=  |  /=  |   %= </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span>  a += b ;    =====&gt; 等价于        a = a+b;</span><br></pre></td></tr></table></figure><blockquote><p><strong>一元运算符</strong></p></blockquote><ul><li>前置++ 和 后置++</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果++在变量之后，那么赋值给一个新的变量的时候，先赋值后计算</span><br><span class="line">如果++在变量之前，那么赋值给一个新的变量的时候，先计算后赋值</span><br></pre></td></tr></table></figure><ul><li>前置– 和 后置–</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果--在变量之后，那么赋值给一个新的变量的时候，先赋值后计算</span><br><span class="line">如果--在变量之前，那么赋值给一个新的变量的时候，先计算后赋值</span><br></pre></td></tr></table></figure><blockquote><p><strong>比较运算符</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>   &gt;  </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>   &lt;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>   &gt;=     大于 或者 等于，只要有一个满足即可</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>   &lt;=     小于 或者 等于，只要满足一个即可</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>  ==      只用来比较变量中的值是否相等，不考虑数据类型</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>  ===     用来判断值和数据类型必须同时相等</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>  !=        判断值是否不相等，不考虑数据类型</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>  !==      判断值和数据类型</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">☞ 总结：</span><br><span class="line">      ✔ 通过比较运算符得到的结果只有两个结果，一个是正确的，一个是错误的</span><br><span class="line">      ✔ 通过比较运算符得到的结果 只有 <span class="literal">true</span>[正确] 和 <span class="literal">false</span>[错误]</span><br></pre></td></tr></table></figure><blockquote><p><strong>逻辑运算符</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>   ||  或： 条件只要有一个满足即可</span><br><span class="line">      总结：</span><br><span class="line">        <span class="number">1.</span> 如果条件中有一个结为<span class="literal">true</span>(代表有一个条件满足了)，那么通过或运算后最后的结果为<span class="literal">true</span></span><br><span class="line">        <span class="number">2.</span> 如果条件中结果都不满足，那么通过或运算后结果为<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"> <span class="number">2.</span>   &amp;&amp;  且： 要求所有的条件都必须满足才可以</span><br><span class="line">       总结：</span><br><span class="line">        <span class="number">1.</span> 如果条件都为真（<span class="literal">true</span>），那么通过且运算后最后的结果也是真（<span class="literal">true</span>）</span><br><span class="line">        <span class="number">2.</span> 如果条件中自少有一个条件不满足（<span class="literal">false</span>），那么通过且运算后的结果为<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"> <span class="number">3.</span>   !      非（取反） : </span><br></pre></td></tr></table></figure><blockquote><p><strong>运算符优先级（了解）</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">优先级从高到底</span><br><span class="line">    <span class="number">1.</span> ()  优先级最高</span><br><span class="line">    <span class="number">2.</span> 一元运算符  ++   --   !</span><br><span class="line">    <span class="number">3.</span> 算数运算符  先*  /  %   后 +   -</span><br><span class="line">    <span class="number">4.</span> 关系运算符  &gt;   &gt;=   &lt;   &lt;=</span><br><span class="line">    <span class="number">5.</span> 相等运算符   ==   !=    ===    !==</span><br><span class="line">    <span class="number">6.</span> 逻辑运算符 先&amp;&amp;   后||</span><br><span class="line">    <span class="number">7.</span> 赋值运算符</span><br></pre></td></tr></table></figure><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><blockquote><p><strong>语法</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">☞   <span class="keyword">if</span> ( 条件表达式【布尔类型的结果】 ) &#123; </span><br><span class="line"></span><br><span class="line">           逻辑代码。。。</span><br><span class="line"></span><br><span class="line">     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">         逻辑代码。。。</span><br><span class="line">     &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">☞  <span class="keyword">if</span> ( 条件表达式 ) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( 条件表达式 ) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  执行过程：</span><br><span class="line">      <span class="number">1.</span> 如果第一个条件满足（<span class="literal">true</span>）,程序只会执行第一个<span class="keyword">if</span>中的代码，后面的代码不会执行</span><br><span class="line">        <span class="number">2.</span> 如果第一个条件不满足，那么看第二个条件是否满足，如果满足，程序只会执行第二<span class="keyword">if</span>中的代码，后面的代码不执行，如果条件不满足，那么继续往下判断下一个条件是否满足</span><br></pre></td></tr></table></figure><blockquote><p><strong>执行过程</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>  先判断<span class="keyword">if</span>中的条件是否满足（<span class="literal">true</span> | <span class="literal">false</span>）,如果结果是<span class="literal">true</span>,那么程序只会执行<span class="keyword">if</span>后面的功能代码，不会执行<span class="keyword">else</span>中的代码</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>  如果条件表达式得到的结果是 <span class="literal">false</span>(条件不满足)，那么程序会进入<span class="keyword">else</span>中执行对应的代码，不会执行<span class="keyword">if</span>语句中的代码</span><br></pre></td></tr></table></figure><h4 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a>三元运算</h4><blockquote><p><strong>语法</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">表达式 ?  结果<span class="number">1</span> ：  结果<span class="number">2</span> </span><br></pre></td></tr></table></figure><blockquote><p><strong>执行过程</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 先判断表达式结果是否为<span class="literal">true</span></span><br><span class="line">  <span class="number">2.</span> 如果结果为<span class="literal">true</span> 那么执行 问号后面第一个代码块</span><br><span class="line">  <span class="number">3.</span> 如果结果为<span class="literal">false</span>,那么执行冒号后面的代码</span><br><span class="line"></span><br><span class="line">  注意：</span><br><span class="line">         ？   相当于   <span class="keyword">if</span></span><br><span class="line">         :    相当于   <span class="keyword">else</span></span><br><span class="line">         <span class="number">1.</span> 如果在程序中想要实现一个简单的条件判断，那么可以考虑使用三元表达式替代<span class="keyword">if</span>条件判断</span><br></pre></td></tr></table></figure><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><blockquote><p><strong>语法</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> ( 变量 ) &#123;</span><br><span class="line">    <span class="keyword">case</span>  值<span class="number">1</span>:</span><br><span class="line">        代码语句..</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span>  值<span class="number">2</span>:</span><br><span class="line">        代码语句...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:    </span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>执行过程</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">总结：</span><br><span class="line">   <span class="number">1.</span> 如果在程序中要表示一个范围，那么推荐使用条件判断</span><br><span class="line">   <span class="number">2.</span> 如果程序中表示的是一个具体的值， 可以用<span class="keyword">switch</span>语句</span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">☞ 反复的再做一件事情。</span><br></pre></td></tr></table></figure><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><blockquote><p><strong>语法</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    循环体（各种功能代码）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>执行过程</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>先判断条件表达式的结果是否为<span class="literal">true</span></span><br><span class="line"><span class="number">1.</span> 如果条件表达式的结果为<span class="literal">true</span>,那么执行循环体中的代码</span><br><span class="line"><span class="number">2.</span> 如果条件表达式的结果为<span class="literal">false</span>,程序就不会执行循环体中的代码</span><br></pre></td></tr></table></figure><h4 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do  while循环"></a>do  while循环</h4><blockquote><p><strong>语法</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    循环体代码</span><br><span class="line">&#125;<span class="keyword">while</span>（条件表达式）;</span><br></pre></td></tr></table></figure><blockquote><p><strong>执行过程</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>  先执行一次循环体代码</span><br><span class="line"><span class="number">2.</span>  执行第一次循环体代码后，要进行条件判断，如果为<span class="literal">true</span>，继续执行循环体中代码，如果条件为<span class="literal">false</span>，循环体中的代码不再执行</span><br><span class="line"> 区别：    </span><br><span class="line">  <span class="number">1.</span> 如果条件不满足，<span class="keyword">do</span> <span class="keyword">while</span>循环会比<span class="keyword">while</span>循环多一次</span><br><span class="line">  <span class="number">2.</span> 如果条件满足，那么<span class="keyword">do</span> <span class="keyword">while</span>循环和<span class="keyword">while</span>循环执行次数是一样的</span><br></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><blockquote><p><strong>语法</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">☞  如果能够确定循环次数，推荐使用<span class="keyword">for</span>循环。</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> ( 变量初始化; 条件判断（范围判断）;  变量自增（自减） ) &#123;</span><br><span class="line">      循环体代码</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>执行过程</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 先执行变量初始化</span><br><span class="line"><span class="number">2.</span> 条件判断，是否为<span class="literal">true</span></span><br><span class="line"><span class="number">3.</span> 如果条件为<span class="literal">true</span>,那么执行循环体中的代码</span><br><span class="line"><span class="number">4.</span> 变量自增或自减</span><br><span class="line"><span class="number">5.</span> 继续判断条件是否成立，如果成立执行代码</span><br></pre></td></tr></table></figure><h4 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h4><blockquote><p><strong>特点</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 当代码执行<span class="keyword">continue</span>的时候，本次循环后面的代码不再执行，会进入到下一次循环中</span><br></pre></td></tr></table></figure><h4 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h4><blockquote><p><strong>特点</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 当代码执行到<span class="keyword">break</span>的时候，会跳转整个循环，后面的代码不再执行。</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><blockquote><p> <strong>字面量创建数组</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  自定义数组名称 = [] ;</span><br></pre></td></tr></table></figure><blockquote><p><strong>构造函数创建数组</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  自定义数组名称  = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure><h4 id="数组赋值"><a href="#数组赋值" class="headerlink" title="数组赋值"></a>数组赋值</h4><blockquote><p> <strong>创建数组并赋值</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">☞ 构造函数方式</span><br><span class="line">       <span class="keyword">var</span>  ary = <span class="keyword">new</span>  <span class="built_in">Array</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"> ☞ 字面量方式赋值</span><br><span class="line">      <span class="keyword">var</span>  ary = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>];</span><br></pre></td></tr></table></figure><blockquote><p><strong>通过索引方式赋值</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  ary = [];</span><br><span class="line">    ary[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    ary[<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line">     <span class="number">1.</span> 数组中索引值是从 <span class="number">0</span> 开始的</span><br><span class="line">     <span class="number">2.</span> 通过索引的方式给数组赋值，要按照顺序个数设置</span><br><span class="line">     <span class="number">3.</span> 通过  数组名.length 可以获取到当前数组的长度</span><br></pre></td></tr></table></figure><blockquote><p><strong>获取数组中的值</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">☞  通过索引的方式获取数组中的值，数组的索引从<span class="number">0</span>开始</span><br><span class="line"></span><br><span class="line">☞  语法：</span><br><span class="line">     数组名[索引号]</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">    <span class="keyword">var</span>  ary = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    ary[<span class="number">0</span>];</span><br><span class="line">    ary[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><h4 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h4><blockquote><p><strong>冒泡排序</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">冒泡排序，从小到大  </span><br><span class="line">冒泡排序：  </span><br><span class="line">将两个相邻的数字进行比较，如果第一个数比第二个数大，就交换，一直比较到最后，将把最大值移动到数组</span><br><span class="line">   <span class="comment">// 编写方法，实现冒泡</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">29</span>,<span class="number">45</span>,<span class="number">51</span>,<span class="number">68</span>,<span class="number">72</span>,<span class="number">97</span>];</span><br><span class="line">    <span class="comment">//外层循环，控制趟数，每一次找到一个最大值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 内层循环,控制比较的次数，并且判断两个数的大小</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="comment">// 白话解释：如果前面的数大，放到后面(当然是从小到大的冒泡排序)</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(arr);<span class="comment">//[2, 4, 5, 12, 31, 32, 45, 52, 78, 89</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><blockquote><p><strong>函数概念</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">函数： 可以封装一段特定功能代码，然后通过函数名调用，实现对该段代码重复使用</span><br><span class="line"></span><br><span class="line">      ✔ 封装（把散开的代码写到一个集体中）</span><br><span class="line">      ✔ 重复使用</span><br></pre></td></tr></table></figure><blockquote><p><strong>函数作用</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实现代码的重复使用。</span><br></pre></td></tr></table></figure><h4 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h4><blockquote><p><strong>函数声明及执行方式</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">☞ 函数的声明：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>  自定义函数名(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    具体的功能代码</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">注意：</span><br><span class="line">     <span class="number">1.</span> 由于函数是用来实现某种特定功能代码，所以一般我们设置函数名的时候，以动词开始。</span><br><span class="line">     <span class="number">2.</span> 函数不能自己执行代码，需要通过函数名调用实现代码的执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ☞ 调用函数（执行函数）</span><br><span class="line"></span><br><span class="line">     函数名();  <span class="comment">//函数的调用</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>函数表达式（字面量）及执行方式</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><h4 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h4><blockquote><p><strong>形参</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">在 函数创建时，在小扩号中定义的变量</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参,形参,形参...</span>) </span>&#123;<span class="comment">//形参，就是一个占位符，命名规则和规范和变量一样</span></span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">      <span class="number">1</span> 函数也可以做为参数进行传递</span><br></pre></td></tr></table></figure><blockquote><p><strong>实参</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">实参，在函数调用时，在小扩号中所传入的实际的数据。</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line">  函数名(数据,数据,数据...);   <span class="comment">//实参，就是实际的数据</span></span><br></pre></td></tr></table></figure><h4 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h4><blockquote><p><strong>返回值：函数执行完后，可以把执行的结果 通过 **return 语法</strong> 返回给 调用者**</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1，num2</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">    <span class="keyword">return</span> num1 + num2; <span class="comment">// 注意：return 后的代码不执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> resNum = add(<span class="number">21</span>,<span class="number">6</span>); <span class="comment">// 调用函数，传入 两个实参，并通过 resNum 接收函数返回值</span></span><br><span class="line">alert(resNum);<span class="comment">// 27</span></span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">    <span class="number">1.</span> 如果函数没有显示的使用 <span class="keyword">return</span>语句 ，那么函数有默认的返回值：<span class="literal">undefined</span></span><br><span class="line">    <span class="number">2.</span> 如果函数中写了<span class="keyword">return</span>语句，后面没有写任何其他内容，那么函数的返回值依然是 <span class="literal">undefined</span></span><br><span class="line">    <span class="number">3.</span> 一个函数只能有一个返回值</span><br><span class="line">    <span class="number">4.</span> <span class="keyword">return</span> 代码执行完成后，后面的代码不再执行</span><br><span class="line">    <span class="number">5.</span> 函数也可以作为返回值（理解）</span><br></pre></td></tr></table></figure><h4 id="函数其他部分"><a href="#函数其他部分" class="headerlink" title="函数其他部分"></a>函数其他部分</h4><blockquote><p><strong>arguments的使用</strong></p></blockquote><p>☞ 通过 arguments获取到函数参数的个数 【不确定函数到底有多少个参数】</p><p>☞ 总结： 1. 如果函数参数不确定，可以定义函数的时候不写参数，通过arguments获取 2. 如果函数的参数确定，那么推荐定义函数的时候写参数</p><blockquote><p><strong>匿名函数和自调用函数</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">☞ 匿名函数： 没有函数名的函数</span><br><span class="line">例如：</span><br><span class="line"><span class="keyword">var</span>  fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">☞总结：</span><br><span class="line">    <span class="number">1.</span> 匿名函数不能单独使用</span><br><span class="line">    <span class="number">2.</span> 可以将匿名函数赋值给一个变量</span><br><span class="line">    <span class="number">3.</span> 可以让匿名函数自己调用自己（自调用函数【匿名函数】）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">☞ 自调用函数： 函数封装好，立即执行。</span><br><span class="line">    总结：</span><br><span class="line">        <span class="number">1.</span> 自调用函数必须是匿名函数</span><br><span class="line">        <span class="number">2.</span> ( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; )(); </span><br><span class="line">☞ 函数属于一种数据类型</span><br><span class="line">☞ 函数作为参数</span><br><span class="line">☞ 函数可以为返回值</span><br></pre></td></tr></table></figure><h4 id="函数作用域和局部变量"><a href="#函数作用域和局部变量" class="headerlink" title="函数作用域和局部变量"></a>函数作用域和局部变量</h4><blockquote><p><strong>作用域</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">作用域： 变量或者函数可以起作用的区域</span><br><span class="line"></span><br><span class="line"> ◆ 全局作用域（全局变量）</span><br><span class="line">       <span class="number">1</span>， 在script标签中或者js文件中定义的变量，在任何地方都可以访问</span><br><span class="line">       <span class="number">2</span>,  在函数内部声明变量不使用<span class="keyword">var</span>关键字 （不建议使用）</span><br><span class="line"></span><br><span class="line"> ◆ 局部作用域（局部变量）</span><br><span class="line">       <span class="number">1</span>， 在函数内部定义的变量</span><br><span class="line">       <span class="number">2</span>， 局部变量只能在定义变量的函数中使用</span><br><span class="line"></span><br><span class="line"> ◆ 块级作用域 （目前所学版本没有，新版本语义中有块级作用域）</span><br><span class="line">       &#123;</span><br><span class="line">          块级作用域</span><br><span class="line">       &#125;  </span><br><span class="line">       <span class="number">1.</span> 本质上块级作用域中的变量在外部不能访问</span><br><span class="line">       <span class="number">2.</span> 但是在js中可以访问块级作用域的变量（证明js没有块级作用域）</span><br></pre></td></tr></table></figure><blockquote><p><strong>全局作用域（全局变量）</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在函数外，一开始被赋予变量值，可以被所有函数使用的变量，作用域为全局，称为全局变量</span><br></pre></td></tr></table></figure><blockquote><p><strong>局部作用域（局部变量）</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">声明在某个函数内部的变量或函数的形参，只能在函数内部使用</span><br></pre></td></tr></table></figure><h4 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">作用域链：</span><br><span class="line">    当访问一个变量时，会先从本作用域中去找这个变量，若找不到则向上一级作用域中去找，依次类推，就形成了一个作用域链。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">案例代码分析：</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(a);   <span class="comment">//a的值 </span></span><br><span class="line">      &#125;</span><br><span class="line">      fn2()</span><br><span class="line">    &#125;</span><br><span class="line">    fn1();</span><br></pre></td></tr></table></figure><h4 id="作用域案例分析"><a href="#作用域案例分析" class="headerlink" title="作用域案例分析"></a>作用域案例分析</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 分析代码执行结果</span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">f1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( num );<span class="comment">//123</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    f2 ();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span>  num = <span class="number">456</span>;</span><br><span class="line">f1();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">☞  思考<span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">5</span>; </span><br><span class="line">    <span class="built_in">console</span>.log( num );</span><br><span class="line"></span><br><span class="line">☞  思考<span class="number">2</span></span><br><span class="line">    <span class="built_in">console</span>.log( num );</span><br><span class="line">    <span class="keyword">var</span>  num = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">预解析：</span><br><span class="line">    <span class="number">1.</span> js 代码执行先执行预解析</span><br><span class="line">  <span class="number">2.</span> 先进行变量提升： 把变量声明提升到当前作用域的最上面，不包括变量的赋值</span><br><span class="line">  <span class="number">3.</span> 函数提升： 把函数声明提升到当前作用域的最上面，不包括函数的调用</span><br><span class="line"></span><br><span class="line">预解析案例分析：</span><br><span class="line"><span class="number">1.</span> </span><br><span class="line"><span class="keyword">var</span>  a  = <span class="number">25</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abc();</span><br><span class="line">自己写</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  alert(a);弹出a的值为<span class="literal">undefined</span>;</span><br><span class="line">  a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">abc()</span><br><span class="line">a = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> </span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">自己写</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;aa&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">     <span class="number">1.</span> 如果函数名和变量名一样，函数优先</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> <span class="keyword">var</span>  a  = <span class="number">18</span>;</span><br><span class="line">f1();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">9</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">自己写</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b;</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">   b=<span class="number">9</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);未定义</span><br><span class="line">  conslol.log(b);<span class="number">9</span></span><br><span class="line">  a=<span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line">a = <span class="number">18</span>;</span><br><span class="line">f1();</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span></span><br><span class="line">f1();</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = b = c = <span class="number">9</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">自己写</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> a ；</span><br><span class="line">      a = <span class="number">9</span></span><br><span class="line">      b= <span class="number">9</span> 两个是全局变量没有加<span class="keyword">var</span></span><br><span class="line">      c= <span class="number">9</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">   a = <span class="number">9</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">☞ 总结：</span><br><span class="line">      <span class="number">1.</span> 程序中的对象：</span><br><span class="line">          ✔ 对象必须有对应的属性【描述对象的特点，在程序中一般使用名词描述】</span><br><span class="line">          ✔ 对象必须有行为动作方法 【方法用来描述具体对象的行为动作，一般方法使用动词】</span><br></pre></td></tr></table></figure><h4 id="创建对象方法"><a href="#创建对象方法" class="headerlink" title="创建对象方法"></a>创建对象方法</h4><blockquote><p><strong>字面量创建对象</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> ☞ 通过字面量方式创建对象</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span>  变量名  =  &#123;  <span class="attr">key</span>: value, <span class="attr">key</span>: value,  <span class="attr">key</span>: functon () &#123;&#125;  &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">备注：</span><br><span class="line">    <span class="number">1.</span> 创建对象，必须要确定具体的事物</span><br><span class="line">    <span class="number">2.</span> 创建对象，必须要确定对象有哪些属性【特征】或者方法【动作，行为】</span><br><span class="line">    <span class="number">3.</span> 如果一次想要输出多个对象，那么可以将每一个对象放到一个数组中。</span><br><span class="line"></span><br><span class="line"> ☞ 访问对象属性    （对象.属性   |  对象[<span class="string">&#x27;属性名&#x27;</span>]）</span><br><span class="line"> ☞ 访问对象方法    （对象.方法名）</span><br><span class="line"></span><br><span class="line"> 注意：</span><br><span class="line">      <span class="number">1</span>、 如果通过  对象[<span class="string">&#x27;属性名&#x27;</span>]访问对象的属性时候，必须保证使用字符串格式</span><br></pre></td></tr></table></figure><blockquote><p><strong>构造函数创建对象</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">☞   <span class="keyword">var</span>  obj  =  <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">       obj.name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">       obj.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">     obj.eat() <span class="comment">//调用方法</span></span><br><span class="line">     <span class="number">1.</span> <span class="built_in">Object</span> 是一个构造函数</span><br><span class="line">     <span class="number">2.</span> 通过<span class="keyword">new</span>调用构造函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">☞ 添加属性：</span><br><span class="line">     对象变量.属性名 = 值;</span><br><span class="line"></span><br><span class="line">☞ 添加方法：</span><br><span class="line">   对象变量.方法名 =  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>工厂方式创建对象</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">create</span> (<span class="params"> name, age, height </span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span>  Ob = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">           Ob.name = name;</span><br><span class="line">           Ob.age = age;</span><br><span class="line">           Ob.height = height;</span><br><span class="line">           Ob.eat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> Ob;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> zs = create(<span class="string">&#x27;zs&#x27;</span>,<span class="number">12</span>,<span class="number">12</span>)</span><br></pre></td></tr></table></figure><blockquote><p>自定义构造函数创建对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">☞ 使用帕斯卡命名法 （每个单词首字母大写）</span><br><span class="line"></span><br><span class="line"> ☞ 例如：</span><br><span class="line">    <span class="function"><span class="keyword">function</span>  <span class="title">CreateHero</span> (<span class="params"> name, age, height </span>) </span>&#123;</span><br><span class="line">         <span class="built_in">this</span>.name = name;</span><br><span class="line">         <span class="built_in">this</span>.age = age;</span><br><span class="line">         <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> zs = <span class="keyword">new</span> People(<span class="string">&#x27;zs&#x27;</span>,<span class="number">15.111</span>)</span><br></pre></td></tr></table></figure><h4 id="new关键字执行过程"><a href="#new关键字执行过程" class="headerlink" title="new关键字执行过程"></a>new关键字执行过程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 执行new开始启动构造函数</span><br><span class="line">2. 将实参传递给形参</span><br><span class="line">3. 【this指向创建好的对象】</span><br><span class="line">4. 【返回对象】</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">     1. 在构造函数中，默认的返回值就是当前创建的对象</span><br></pre></td></tr></table></figure><h4 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 函数中的<span class="built_in">this</span>         指向Window</span><br><span class="line"><span class="number">2.</span> 在方法中的<span class="built_in">this</span>       指向当前方法所属的对象</span><br><span class="line"><span class="number">3.</span> 在构造函数的<span class="built_in">this</span>      指向创建的对象</span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line">     谁调用函数，<span class="built_in">this</span>就指向谁</span><br></pre></td></tr></table></figure><h4 id="遍历对象删除对象属性"><a href="#遍历对象删除对象属性" class="headerlink" title="遍历对象删除对象属性"></a>遍历对象删除对象属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">☞ 通过   <span class="keyword">for</span>   <span class="keyword">in</span>  遍历 对象的成员</span><br><span class="line"></span><br><span class="line">☞ 遍历对象中的属性</span><br><span class="line"></span><br><span class="line">☞ 遍历对象中的值</span><br></pre></td></tr></table></figure><h4 id="检测对象的数据类型"><a href="#检测对象的数据类型" class="headerlink" title="检测对象的数据类型"></a>检测对象的数据类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象  <span class="keyword">instanceof</span>  构造函数</span><br></pre></td></tr></table></figure><h3 id="数据储存"><a href="#数据储存" class="headerlink" title="数据储存"></a>数据储存</h3><blockquote><p> <strong>简单数据类型在内存中的储存</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">☞ 简单数据类型（值类型） 存储在内存的 栈 上</span><br><span class="line"></span><br><span class="line">  ☞ <span class="built_in">Number</span>  <span class="built_in">String</span>   <span class="built_in">Boolean</span>  Null Undefined</span><br><span class="line">  ☞ 分析简单数据类型在内存中的存储方式</span><br><span class="line">      <span class="keyword">var</span>  n1 = <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">var</span>  n2 = n1;</span><br></pre></td></tr></table></figure><blockquote><p><strong>复杂数据类型在内存中的储存</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">☞ 复杂数据类型（引用类型） 存储在内存的 堆 上</span><br><span class="line"></span><br><span class="line"> ☞  <span class="built_in">Object</span> | <span class="built_in">Array</span> | 函数</span><br></pre></td></tr></table></figure><blockquote><p> <strong>简单数据类型作为函数的参数在内存存储</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">☞  分析案例代码</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">fn</span> (<span class="params"> a, b </span>) </span>&#123;</span><br><span class="line">     a = a+<span class="number">1</span>;</span><br><span class="line">     b = b+<span class="number">1</span>;</span><br><span class="line">     <span class="built_in">console</span>.log( a );</span><br><span class="line">     <span class="built_in">console</span>.log( b );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span>  x = <span class="number">10</span>；</span><br><span class="line"><span class="keyword">var</span>  y = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">fn(x, y);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( x, y );   思考：x ， y 的值是多少？</span><br></pre></td></tr></table></figure><blockquote><p><strong>复杂数据类型作为函数的参数在内存存储</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">☞ </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params"> name, age </span>) </span>&#123;</span><br><span class="line">       <span class="built_in">this</span>.name =  name; </span><br><span class="line">       <span class="built_in">this</span>.age = age;</span><br><span class="line">       <span class="built_in">this</span>.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log( <span class="string">&quot;你好&quot;</span> );</span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> p1 = <span class="keyword">new</span> Person( <span class="string">&quot;张三&quot;</span>, <span class="number">18</span> );</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getperson</span> (<span class="params"> person </span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">          person.name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getperson( p1 );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log( p1.name );   思考： p1 的name值是什么？</span><br></pre></td></tr></table></figure><h3 id="课堂案例"><a href="#课堂案例" class="headerlink" title="课堂案例"></a>课堂案例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">☞ </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params"> name, age </span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">&quot;你好&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">&quot; 张三 &quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getperson</span> (<span class="params"> person </span>) </span>&#123;</span><br><span class="line">    person.name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">    person = <span class="keyword">new</span> Person(<span class="string">&quot;王五&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(person.name);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getperson(p1);</span><br><span class="line"><span class="built_in">console</span>.log(p1.name);    思考： p1.name 输出的结果是什么？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">☞  数组作为参数</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getary</span> (<span class="params"> ary </span>) </span>&#123;</span><br><span class="line">    ary[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newary = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">getary( newary );</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( newary[<span class="number">0</span>] );</span><br></pre></td></tr></table></figure><h3 id="内置对象介绍"><a href="#内置对象介绍" class="headerlink" title="内置对象介绍"></a>内置对象介绍</h3><p>☞  JavaScript组成：   ECMAScript  |   DOM   |  BOM</p><p>☞  ECMAScript：  变量 ， 函数， 数据类型 ，流程控制，内置对象。。。</p><p>☞  js中的对象： 自定义对象 ， 内置对象 ， 浏览器对象（不属于ECMAScript）</p><p>☞  Math对象，Array对象，Date对象。。。。</p><h4 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">☞ 提供了一系列与数学相关的方法或属性  ( 静态  |  实例)</span><br><span class="line"></span><br><span class="line">☞ <span class="built_in">Math</span>.PI          获取圆周率【属性】 </span><br><span class="line">☞ <span class="built_in">Math</span>.random()    返回大于等于<span class="number">0</span>小于<span class="number">1</span>之间的随机数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">☞ <span class="built_in">Math</span>.floor()      向下取整，返回一个小于当前数字的整数</span><br><span class="line">☞ <span class="built_in">Math</span>.ceil()         向上取整，返回一个大于当前数字的整数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">☞ <span class="built_in">Math</span>.round()     四舍五入（小数如果小于<span class="number">0.5</span>,返回小于当前数字的整数，如果小数部分大于<span class="number">0.5</span>返回大于当前数字的一个整数）</span><br><span class="line">☞ <span class="built_in">Math</span>.abs()        取绝对值（返回当前数字的绝对值，正整数）</span><br><span class="line"></span><br><span class="line">☞ <span class="built_in">Math</span>.max()       返回一组数中的最大值 （可以设置多个参数，返回其中最大值，参数不可以是数组）</span><br><span class="line">☞ <span class="built_in">Math</span>.min()       返回一组数中的最小值 （可以同时设置多个参数，与最大值效果一样）</span><br><span class="line"></span><br><span class="line">☞ <span class="built_in">Math</span>.sin(x)         返回一个正弦的三角函数 ( 注意： x 是一个以弧度为单位的角度)</span><br><span class="line">☞ <span class="built_in">Math</span>.cos(x)         返回一个余弦的三角函数 （注意： x 参数是一个以弧度为单位的角度）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    记住角度和弧度之间的关系</span><br><span class="line">            <span class="comment">//已知角度求对应的弧度</span></span><br><span class="line">          <span class="function"><span class="keyword">function</span> <span class="title">aTor</span>(<span class="params">angle</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> angle*<span class="built_in">Math</span>.PI/<span class="number">180</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//已知弧度求对应的角度</span></span><br><span class="line">          <span class="function"><span class="keyword">function</span> <span class="title">rToa</span> (<span class="params">rotate</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> rotate*<span class="number">180</span>/<span class="built_in">Math</span>.PI</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">☞ <span class="built_in">Math</span>.pow(x,y)     返回x的y次幂</span><br></pre></td></tr></table></figure><h4 id="静态成员和实例成员"><a href="#静态成员和实例成员" class="headerlink" title="静态成员和实例成员"></a>静态成员和实例成员</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">☞静态成员：  </span><br><span class="line">         1. 不需要通过构造函数创建对象且能访问对象中的属性或方法</span><br><span class="line"></span><br><span class="line"> ☞实例成员： </span><br><span class="line">        1.  首先必须通过构造函数创建对象</span><br><span class="line">        2.  通过构造函数创建对象并访问的属性或方法[实例成员]</span><br></pre></td></tr></table></figure><h4 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">☞ <span class="built_in">Date</span>是一个构造函数，必须通过 <span class="keyword">new</span> <span class="built_in">Date</span>() 创建一个实例成员才能使用</span><br><span class="line"></span><br><span class="line">☞ 用法一：空构造函数</span><br><span class="line">   <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">   ☞GMT 格林威治时间（<span class="number">0</span>时区）</span><br><span class="line"></span><br><span class="line">☞ 用法二：在构造函数中传入毫秒值</span><br><span class="line">   <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(d.valueOf());</span><br><span class="line"></span><br><span class="line">☞ 用法三： 传入日期格式的字符串</span><br><span class="line">  <span class="keyword">var</span>  d = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;1988-8-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">☞ 用法四： 传入数字</span><br><span class="line">  <span class="keyword">var</span>  d = <span class="keyword">new</span> <span class="built_in">Date</span>(year, month[,day,time,second]);  <span class="comment">//必须设置年和月</span></span><br><span class="line">  备注： 月份从<span class="number">0</span> 开始， <span class="number">0</span> 代表<span class="number">1</span>月</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">☞ 获取当前时间的毫秒值：</span><br><span class="line">  d.valueOf()  </span><br><span class="line">  d.getTime()  <span class="comment">// 推荐使用</span></span><br><span class="line">  <span class="built_in">Date</span>.now()   <span class="comment">//H5 新方法 有兼容信息</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>date方法</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">☞ 日期格式化方法</span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    d.toString();  <span class="comment">//转化成字符串</span></span><br><span class="line">    d.toDateString();  <span class="comment">//转换成日期字符串</span></span><br><span class="line">    d.toTimeString();  <span class="comment">//转换成时间字符串</span></span><br><span class="line">    d.toLocaleDateString();   <span class="comment">//返回本地的日期格式  （不同浏览器不同效果）</span></span><br><span class="line">    d.toLocaleTimeString();   <span class="comment">//返回本地的时间格式  （不同浏览器不同效果）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">☞ 获取日期其他部分</span><br><span class="line">    d.getSeconds()  <span class="comment">//获取秒</span></span><br><span class="line">    d.getMinutes()  <span class="comment">//获取分钟</span></span><br><span class="line">    d.getHours()    <span class="comment">//获取小时</span></span><br><span class="line">    d.getDay()      <span class="comment">//返回周几   （0表示周日）</span></span><br><span class="line">    d.getDate()     <span class="comment">//返回当前月的第几天</span></span><br><span class="line">    d.getMonth()    <span class="comment">//返回月份   （从0开始）</span></span><br><span class="line">    d.getFullYear()  <span class="comment">//返回年份</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>date对象案例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">☞ 写一个函数，格式化日期对象，返回 yyyy-mm-dd HH:mm：ss 形式</span><br><span class="line"></span><br><span class="line">☞ 写一个函数计算时间差，返回相差的天/时/分/秒  【求 <span class="number">2008</span>年<span class="number">8</span>月<span class="number">8</span>日到今天】</span><br></pre></td></tr></table></figure></blockquote><h4 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h4><blockquote><p> <strong>Array基本使用</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">☞  创建数组的方式</span><br><span class="line">        ✔ 通过字母量方式创建</span><br><span class="line">        <span class="keyword">var</span> arr = []</span><br><span class="line">   ✔ 通过构造函数</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line">☞  数组中常用的属性</span><br><span class="line">      数组.length  获取数组长度</span><br><span class="line"></span><br><span class="line">☞  清空数组的方式</span><br><span class="line">        ✔ 给数组赋值为<span class="literal">null</span></span><br><span class="line">   ✔ 给数组赋值为空</span><br><span class="line">   ✔ 可以将数组的长度设置为<span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>数组中的方法</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">☞  toString()   <span class="comment">// 把数组转换为字符串，使用逗号分隔</span></span><br><span class="line">  ☞  valueOf()   <span class="comment">//  返回数组对象本身</span></span><br><span class="line"></span><br><span class="line">  ☞ 栈方法(先进后出)</span><br><span class="line">   ary.push()   <span class="comment">// 该方法有一个返回值，表示数组最新的长度，该方法中可以设置多个参数</span></span><br><span class="line">     ary.pop()    <span class="comment">//返回数组中最后一个字，且会修改数组的长度</span></span><br><span class="line"></span><br><span class="line">  ☞ 队列方法(先进先出)</span><br><span class="line">     ary.shift()         <span class="comment">//取出数组中的第一个元素，修改数组的长度</span></span><br><span class="line">     ary.unshift(number)  <span class="comment">//在数组中最开始位置添加一个值</span></span><br><span class="line"></span><br><span class="line">   ☞ 排序方法</span><br><span class="line">       ary.reverse()  <span class="comment">// 翻转数组</span></span><br><span class="line">      ary.sort()    <span class="comment">//数组排序  默认是从字符编码排序的</span></span><br><span class="line"></span><br><span class="line">      备注:</span><br><span class="line">            自定义排序规则:</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">compare</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//升序排列</span></span><br><span class="line">                    <span class="keyword">return</span>  a-b;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">             <span class="function"><span class="keyword">function</span> <span class="title">compare1</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//降序排列</span></span><br><span class="line">                    <span class="keyword">return</span>  b-a;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">   ☞ 其他方法汇总</span><br><span class="line">◆ concat()  <span class="comment">//把两个数组拼接到一块,返回一个新数组</span></span><br><span class="line">◆ slice(startindex, endindex)   <span class="comment">//从当前数组中截取一个新的数组 </span></span><br><span class="line">    ✔ 第一个参数表示开始索引位置,第二个参数代表结束索引位置</span><br><span class="line">◆ splice(startindex, deletCont, options)  <span class="comment">//删除或者替换数组中的某些值</span></span><br><span class="line">    ✔ 第一个参数代表从哪开始删除</span><br><span class="line">  ✔ 第二个参数代表一共删除几个</span><br><span class="line">  ✔ 第三个参数代表要替换的值</span><br><span class="line">◆ indexOf(content[,index])   <span class="comment">//没找到返回-1</span></span><br><span class="line">    ✔ 找数组中的某个值,如果找到返回索引位置,如果没有找到返回<span class="number">-1</span></span><br><span class="line">◆lastIndexof()  从数组的末尾开始找,如果找到,返回索引位置,如果没有找到返回<span class="number">-1</span></span><br><span class="line">◆ Join()   <span class="comment">//将数组中的每一个元素通过一个字符链接到一块</span></span><br><span class="line">◆ 数组遍历</span><br><span class="line">  filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index, ary</span>) </span>&#123;&#125;)   <span class="comment">//返回一个新数组,可以获取赛选结果</span></span><br><span class="line">    map(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,ary</span>) </span>&#123;&#125;)  <span class="comment">//遍历数组,返回一个新数组</span></span><br><span class="line">    forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index, ary</span>) </span>&#123;&#125;) <span class="comment">//遍历数组,没有返回值</span></span><br></pre></td></tr></table></figure><h4 id="基本包装类型-了解"><a href="#基本包装类型-了解" class="headerlink" title="基本包装类型(了解)"></a>基本包装类型(了解)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">☞  对象具有属性和方法（复杂类型），简单类型不具有属性和方法</span><br><span class="line"></span><br><span class="line">☞  基本包装类型：</span><br><span class="line">       <span class="number">1.</span> <span class="built_in">String</span> | <span class="built_in">Number</span>  | <span class="built_in">Boolean</span>   ----构造函数</span><br><span class="line">    例如：</span><br><span class="line">      <span class="keyword">var</span> s1 = <span class="string">&#x27;adsfafd&#x27;</span>;           ---简单类型的字符串</span><br><span class="line">            <span class="keyword">var</span>  s2 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;asdaf&#x27;</span>); ----复杂类型的对象（字符串）</span><br><span class="line">       <span class="number">1.</span> 推荐使用基本包装类型中的<span class="built_in">String</span>，不推荐使用 <span class="built_in">Number</span> | <span class="built_in">Boolean</span></span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">☞ 不可变性</span><br><span class="line">☞ 注意: 尽量不要大量的拼接字符串</span><br></pre></td></tr></table></figure><h4 id="字符串的方法"><a href="#字符串的方法" class="headerlink" title="字符串的方法"></a>字符串的方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> ☞ 字符方法</span><br><span class="line"><span class="number">1.</span> charAt(index)      <span class="comment">//获取指定位置处的字符</span></span><br><span class="line"><span class="number">2.</span> str[index]           <span class="comment">//获取指定位置的字符 （H5中的方法）</span></span><br><span class="line"></span><br><span class="line"> ☞ 字符串方法</span><br><span class="line"><span class="number">1.</span> concat()   <span class="comment">//拼接字符串  等效于 +</span></span><br><span class="line"><span class="number">2.</span> slice(strat,end)       <span class="comment">//从指定位置开始，截取字符串到结束位置，end值取不到</span></span><br><span class="line"><span class="number">3.</span> substring(start,end)   <span class="comment">//从指定位置开始，截取字符串到结束位置， end值取不到</span></span><br><span class="line"><span class="number">4.</span> substr(start,length)   <span class="comment">//从指定位置开始，截取length长度个字符</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ☞ 位置方法</span><br><span class="line"><span class="number">1.</span> indexOf(字符)   <span class="comment">//返回字符在字符串中的位置</span></span><br><span class="line"><span class="number">2.</span> lastIndexOf(字符)  <span class="comment">//从后往前找，只找第一个匹配的字符</span></span><br><span class="line"></span><br><span class="line">  ☞ 去除空白</span><br><span class="line">trim()      <span class="comment">//只能去除字符串前后空白</span></span><br><span class="line"></span><br><span class="line">  ☞ 大小写转换法</span><br><span class="line">toLocaleUpperCase()  <span class="comment">//转化为大写</span></span><br><span class="line">toLocaleLowerCase()  <span class="comment">//转化为小写</span></span><br><span class="line"></span><br><span class="line">  ☞其他</span><br><span class="line">replace(a,b)  <span class="comment">// 用b替换a</span></span><br><span class="line">split()   <span class="comment">//    以一个分割符,将一个字符串串分割成一个数组</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/bubble/2020/07/16/whatis-html/"/>
      <url>/bubble/2020/07/16/whatis-html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\bubble\css\APlayer.min.css"><script src="\bubble\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\bubble\js\Meting.min.js"></script><h4 id="一、html语言是什么"><a href="#一、html语言是什么" class="headerlink" title="一、html语言是什么"></a>一、html语言是什么</h4><p>“html”是“Hyper Text Markup Language”的缩写，即“超文本标记语言”，是标准通用标记语言下的一个应用。html并不是一种编程语言，它是一种标记语言，是由一些标签组成，主要是用来制作网页的。<a id="more"></a></p><p>为什么说是超文本语言呢？“超文本”指的是它的内容可以是一些非文本的内容，比如：图片、链接、声音等等。</p><h4 id="二、html语言的结构"><a href="#二、html语言的结构" class="headerlink" title="二、html语言的结构"></a>二、html语言的结构</h4><p>html语言主要分为两个部分，第一部分是“头部”，“头部”主要提供网页的基本信息，比如：标题、编码等等；第二部分是“主体”，主体部分提供的是网页的主题内容，即浏览器中显示的内容。</p><p>“头部”由“<hend>标签”来标记，“主体”部分由“<body>标签”来标记。除了这两个部分，还有文档的类型声明，文档类型声明的作用就是告诉浏览器你用的是哪个html版本来编写的，浏览器才能成功的渲染。<br><img src= "/bubble/img/loading.gif" data-lazy-src="'https://pics5.baidu.com/feed/09fa513d269759eef1d3b6fa63bef0126c22dfcf.jpeg?token=54355b03c86c626f18d323a5e6a2c62e&s=A483F014850AAF137EBE77930300C08C'" alt="html"></p><p>文档类型的声明由“DOCTYPE”单词来完成，放在文档的第一行。文档类型声明后是<html>标签，<html>标签中才是“头部”和“主体”部分。如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">HTML根标签,整个文档的根标签</span></span><br><span class="line"><span class="comment">head:一般用于说明页面的一些信息，不会显示在网页上</span></span><br><span class="line"><span class="comment">title:网页标题</span></span><br><span class="line"><span class="comment">body:一般页面的内容，直接用于显示数据</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="三、html语言的特点"><a href="#三、html语言的特点" class="headerlink" title="三、html语言的特点"></a>三、html语言的特点</h4><ol><li>html语言编写起来简单方便，都是由一些标签组成，没有什么复杂的语法，人人都学的懂；</li><li>html语言可以跨平台，可以使用在广泛的平台上，这也是万维网盛行的一个原因；</li><li>html语言支持不同数据格式的文件镶入，这也是万维网盛行的原因之一；当然，特点远不止以上3点，等你学会了，在使用过程中会发现更多的特点。</li></ol><h4 id="四、html语言开发工具"><a href="#四、html语言开发工具" class="headerlink" title="四、html语言开发工具"></a>四、html语言开发工具</h4><p>关于html语言的开发工具就多了，只要是有编辑功能的编辑器，基本都可以用来开发html，甚至可以使用电脑自带的记事本、word等编辑器，只要记住把文档的后缀名改为.html就可以了。<br><img src= "/bubble/img/loading.gif" data-lazy-src="https://pics6.baidu.com/feed/37d3d539b6003af374d76377e46f75581038b606.jpeg?token=6f57505add27106cc016f77c74608b1c&s=A98CE0139F0A62C61275C8500300C0F0" alt="html编辑器"><br>当然不建议使用比如记事本之类的编辑器，因为这类编辑器没有提示也没有格式，使用起来开发效率低。如果是刚开始学习的话，可以使用这种编辑器，会帮助你记忆（写多了自然就记住了）。</p><h4 id="五、html标签大全"><a href="#五、html标签大全" class="headerlink" title="五、html标签大全"></a>五、html标签大全</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>This is study note<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;我是做外链的，一般在head里面&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span>里面可加n多css<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span>javescript语句<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span>不支持javescript的替代语句<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1-h6是标题标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p是段落标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>a标签是插入超链接的，herf指定链接地址，target指定新窗口开启<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="comment">&lt;!--这是一个换行符--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">wbr</span>&gt;</span><span class="comment">&lt;!-- 定义何处适合换行，窗口大小不够则不换行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;a.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;这是一个图片，加载不出来时显示我&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;60&quot;</span>&gt;</span><span class="comment">&lt;!--加载图像的标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span><span class="comment">&lt;!--这是一条水平线--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">&quot;China&quot;</span>&gt;</span>CN<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span><span class="comment">&lt;!--定义缩写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">rcw <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:small_pupil@126.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">tel:18127655676</span><br><span class="line"><span class="tag">&lt;/<span class="name">address</span>&gt;</span><span class="comment">&lt;!--定义地址，签名或者文档的作者身份--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;范围，tect/circle&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;坐标&quot;</span> <span class="attr">href</span>=<span class="string">&quot;链接地址&quot;</span>&gt;</span><span class="comment">&lt;!-- 可以在图像上划分区域，可点击返回herf --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span>一般和area一起用，管理里面的area<span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span>我这里指定面页的独立部分内容，也可以是页眉<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>介绍性内容，在article里面<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span>语义化标签，我也不知道什么意思<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;链接地址&quot;</span> <span class="attr">type</span>=<span class="string">&quot;视频类型&quot;</span>&gt;</span><span class="comment">&lt;!-- source可以为图片，视频，音频元素指定资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span><span class="comment">&lt;!-- video也是这样用的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>我可以把字体加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="comment">&lt;!-- 无序表格；ol有序列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>我是做表格用的，必须在ul里或者ol里面<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bdi</span>&gt;</span>把我隔离出来<span class="tag">&lt;/<span class="name">bdi</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bdo</span> <span class="attr">dir</span>=<span class="string">&quot;rtl&quot;</span>&gt;</span>我可以把文字排序倒置，必须有dir<span class="tag">&lt;/<span class="name">bdo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">cite</span>=<span class="string">&quot;引用地址&quot;</span>&gt;</span>我是被自动缩进的引用，我可以很长很长<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cite</span>&gt;</span>我是引用，我将变成斜体字<span class="tag">&lt;/<span class="name">cite</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> ο<span class="attr">nclick</span>=<span class="string">&quot;alert(我是弹窗内容)&quot;</span>&gt;</span>都用我来设置按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;我的标识记号&quot;</span>&gt;</span>我是画布，想让我变得更美，就要用script<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span>&gt;</span>我是表格的名字，我出现在table里面<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">col</span> <span class="attr">span</span>=<span class="string">&quot;2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:red&quot;</span>&gt;</span><span class="comment">&lt;!-- 我在table下的colgroup中使用，来设置表格的列属性值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">colgroup</span>&gt;</span>我把表格按列分组了<span class="tag">&lt;/<span class="name">colgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;input的那个表格list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;我是input那个表格里的下拉选项&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span><span class="comment">&lt;!--我与input一起用，做出来的表格高大上呦，还能让用户选择--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>小米<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>为发骚而生<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span><span class="comment">&lt;!--看懂了吗？我跟ol，ul差不多，dt是名人，dd要拍名人的马屁，看出来了吧，dl是代表一个描述列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>我会被划上删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>我也会被划上删除线<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>我会被划上下划线，表示修改<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>我才是名正言顺的下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">summary</span>&gt;</span>点我能看到很多<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>很多<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span><span class="comment">&lt;!--创建一个可折叠的东西，点开你能看到很多--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>我是强调文本<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>我能加粗文本<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dfn</span>&gt;</span>反正我是斜的，定义项目<span class="tag">&lt;/<span class="name">dfn</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>一段电脑代码<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">samp</span>&gt;</span>计算机样本<span class="tag">&lt;/<span class="name">samp</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>键盘输入<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">var</span>&gt;</span>变量<span class="tag">&lt;/<span class="name">var</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dialog</span> <span class="attr">open</span>&gt;</span>我差不多一个是个th的批注，但我很大，还不能隐藏<span class="tag">&lt;/<span class="name">dialog</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;属性&quot;</span> <span class="attr">id</span>=<span class="string">&quot;自己体会&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;语言&quot;</span>&gt;</span>我将被很多属性标记，太幸福了<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;你竟然要把我嵌入面页，呜呜。。。&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span>我被用在form下，我下面的input属于我，哼<span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">legend</span>&gt;</span>我替fieldset管理input<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span><span class="comment">&lt;!--我是独立的，想引用谁就是谁--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>我属于figure<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>我相当于页脚<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;把数据存起来，怎么样&quot;</span> <span class="attr">method</span>=<span class="string">&quot;传输方式post/get&quot;</span>&gt;</span>我向服务器传输数据<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hgroup</span>&gt;</span>标题集合<span class="tag">&lt;/<span class="name">hgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体文字<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;内联框架&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;控件类型&quot;</span> <span class="attr">name</span>=<span class="string">&quot;给控件起个名字&quot;</span> <span class="attr">value</span>=<span class="string">&quot;把我传给数据库&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>单选控件类型<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;文件地址吧&quot;</span>&gt;</span><span class="comment">&lt;!-- 我一般用来链接css --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">make</span>&gt;</span>我将被标记，重点显示哦<span class="tag">&lt;/<span class="name">make</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span>&gt;</span>我定义一个命令列表或菜单，但好像没有浏览器支持我<span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="comment">&lt;!-- 一般显示在head里 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;10&quot;</span>&gt;</span>0到10之间，输出2，相当于20%<span class="tag">&lt;/<span class="name">meter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>导航链接，索引，目录，菜单<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span>&gt;</span>外部资源</span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>定义资源</span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span>定义一个下拉菜单</span><br><span class="line"><span class="tag">&lt;<span class="name">optgroup</span>&gt;</span>下拉菜单里的分类</span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>分类里面的选项<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">output</span>&gt;</span>显示计算或用户操作的结果<span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>你怎样输入的，      我就怎么显示<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">value</span>=<span class="string">&quot;88&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="comment">&lt;!-- 下载任务完成88% --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q</span>&gt;</span>显示为引号包含<span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span>帅<span class="tag">&lt;<span class="name">rp</span>&gt;</span>(<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;<span class="name">rt</span>&gt;</span>shuai<span class="tag">&lt;/<span class="name">rt</span>&gt;</span><span class="tag">&lt;<span class="name">rp</span>&gt;</span>)<span class="tag">&lt;/<span class="name">rp</span>&gt;</span><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span><span class="comment">&lt;!-- 作为注释标签使用表示很难懂，不知道为什     么，但就是这样子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span>定义文档独立的一部分<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>我是最小号的字体<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;样式&quot;</span>&gt;</span>想给我加样式就这么用<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>下标<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>上标<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span>大表哥，里面有很多tr组成,边框为1</span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span><span class="comment">&lt;!-- 我和tbody，tfoot一样，不会对表格造成什么影响，但可以通过我们为每一行加css --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span>横向定义的表格，表示一行数据</span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>加粗版表头文档<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>表中内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span>&gt;</span>我是一个文本框<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span>&gt;</span>时间：21：00<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">track</span> <span class="attr">kind</span>=<span class="string">&quot;文本轨道的文本类型&quot;</span> <span class="attr">src</span>=<span class="string">&quot;轨道文件的url&quot;</span>&gt;</span><span class="comment">&lt;!-- 可以叫我字幕 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瘾</title>
      <link href="/bubble/2020/07/15/index/"/>
      <url>/bubble/2020/07/15/index/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\bubble\css\APlayer.min.css"><script src="\bubble\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\bubble\js\Meting.min.js"></script><p>  青春的逝去并不可怕，可怕的是失去了勇敢地热爱生活的心。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
